%{
#include <assert.h>
#include <limits.h>
#include <stdarg.h>
#include <string.h>
#include <iostream>
#include <map>
#include "ir/ir.h"
#include "lib/cstring.h"
#include "lib/error.h"
#include "lib/source_file.h"
#include "lib/gmputil.h"
#include "frontends/p4v1/p4v1-parse.h"
#include "frontends/common/constantParsing.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static map<int, std::pair<std::string, int>> line_file_map;
static IR::V1Program *global;
static void yyerror(const char *fmt);
static IR::Constant *constantFold(IR::Expression *);

#define YYLTYPE Util::SourceInfo
#define YYLLOC_DEFAULT(Cur, Rhs, N)                                     \
    ((Cur) = (N) ? YYRHSLOC(Rhs, 1) + YYRHSLOC(Rhs, N)                  \
                 : Util::SourceInfo(YYRHSLOC(Rhs, 0).getEnd()))

namespace {  // anonymous namespace
static int yylex();

%}

%union {
    YYSTYPE() {}
    int                         i;
    cstring                     str;
    IR::ActionFunction          *ActionFunction;
    IR::ActionProfile           *ActionProfile;
    IR::ActionSelector          *ActionSelector;
    IR::Apply                   *Apply;
    IR::CalculatedField         *CalculatedField;
    IR::CaseEntry               *CaseEntry;
    IR::Vector<IR::CaseEntry>   *CaseEntryList;
    IR::Constant                *Constant;
    IR::Counter                 *Counter;
    IR::Expression              *Expression;
    IR::Vector<IR::Expression>  *ExpressionList;
    IR::FieldList               *FieldList;
    IR::FieldListCalculation    *FieldListCalculation;
    IR::NameList                *NameList;
    IR::Member                  *Member;
    IR::Meter                   *Meter;
    IR::V1Parser                *Parser;
    IR::Register                *Register;
    IR::V1Table                 *Table;
    const IR::Type              *Type;
    struct {
        IR::Vector<IR::Annotation>      *annotations;
        IR::IndexedVector<IR::StructField> *fields;
    }                           HeaderType;
}

%token<str> ACTION ACTIONS ACTION_PROFILE ACTION_SELECTOR ALGORITHM APPLY
            ATTRIBUTE ATTRIBUTES BIT BLACKBOX BLACKBOX_TYPE
            CALCULATED_FIELD CONTROL COUNTER CURRENT DEFAULT DEFAULT_ACTION
            DIRECT DROP DYNAMIC_ACTION_SELECTION ELSE EXTRACT FALSE
            FIELD_LIST FIELD_LIST_CALCULATION FIELDS HEADER HEADER_TYPE
            IF IMPLEMENTATION INPUT INSTANCE_COUNT INT LATEST LAYOUT LENGTH MASK
            MAX_LENGTH MAX_SIZE MAX_WIDTH METADATA METER METHOD MIN_SIZE MIN_WIDTH NOT
            OUTPUT_WIDTH PARSE_ERROR PARSER PARSER_EXCEPTION PAYLOAD PREFIX
            PRE_COLOR PRIMITIVE_ACTION READS REGISTER RESULT RETURN SATURATING
            SELECT SELECTION_KEY SELECTION_MODE SELECTION_TYPE SET_METADATA
            SIGNED SIZE STATIC TABLE TRUE TYPE UPDATE VALID VERIFY WIDTH WRITES

%token<str> IDENTIFIER
%token<Constant> INTEGER

%left EXPRLIST
%right '='
%left OR
%left AND
%left '|'
%left '^'
%left '&'
%left EQ NE
%left '<' '>' LE GE
%left SHL SHR
%left '+' '-'
%left '*' '/' '%'
%right PREFIX

%type<i>                opt_field_modifiers attributes attrib
%type<str>              name
%type<ActionFunction>   action_function_body action_statement_list
%type<ActionProfile>    action_profile_body
%type<ActionSelector>   action_selector_body
%type<Apply>            apply_case_list
%type<CalculatedField>  update_verify_spec_list
%type<CaseEntry>        case_value_list
%type<CaseEntryList>    case_entry_list
%type<Constant>         const_expression
%type<Counter>          counter_spec_list
%type<Expression>       expression header_ref header_or_field_ref field_or_masked_ref opt_condition
%type<ExpressionList>   expression_list opt_expression_list control_statement_list opt_else
                        field_match_list expressions
%type<FieldList>        field_list_entries
%type<FieldListCalculation>     field_list_calculation_body
%type<Member>           field_ref
%type<HeaderType>       header_dec_body field_declarations
%type<NameList>         action_list name_list opt_name_list field_list_list
%type<Meter>            meter_spec_list
%type<Parser>           parser_statement_list
%type<Register>         register_spec_list
%type<Table>            table_body
%type<Type>             bit_width type

%error-verbose
%locations

%%

input: /* epsilon */
    | input header_type_declaration
    | input header_instance
    | input metadata_instance
    | input field_list_declaration
    | input field_list_calculation_declaration
    | input calculated_field_declaration
    | input parser_function_declaration
    | input parser_exception_declaration
    | input counter_declaration
    | input meter_declaration
    | input register_declaration
    | input primitive_action_declaration
    | input action_function_declaration
    | input action_profile_declaration
    | input action_selector_declaration
    | input table_declaration
    | input control_function_declaration
    | input blackbox_type_declaration
    | input blackbox_instantiation
    | input error
;

/********************************/
/* 5.1 Header Type Declarations */
/********************************/

header_type_declaration: HEADER_TYPE name '{' header_dec_body '}'
      { global->add($2, new IR::v1HeaderType(@1+@5, $2,
            new IR::Type_Struct(@1+@5, IR::ID(@2, $2),
                                new IR::Annotations($4.annotations), $4.fields),
            new IR::Type_Header(@1+@5, IR::ID(@2, $2),
                                new IR::Annotations($4.annotations), $4.fields))); }
;

header_dec_body: FIELDS '{' field_declarations '}' opt_length opt_max_length
      { $$ = $3; }
;

field_declarations: /* epsilon */
      { $$.annotations = new IR::Vector<IR::Annotation>;
        $$.fields = new IR::IndexedVector<IR::StructField>; }
    | field_declarations name ':' bit_width ';'
      { ($$=$1).fields->push_back(new IR::StructField(@2+@4, IR::ID(@2, $2), $4)); }
    | field_declarations type name ';'
      { ($$=$1).fields->push_back(new IR::StructField(@2+@4, IR::ID(@3, $3), $2)); }
;

bit_width:
      const_expression opt_field_modifiers
      { if ($1)
            $$ = IR::Type::Bits::get(@1, $1->asInt(), $2 & 1);
        else
            $$ = IR::Type::Unknown::get(); }
    | '*' opt_field_modifiers
      { $$ = IR::Type::Varbits::get(); }
;

opt_field_modifiers: /* epsilon */ { $$ = 0;}
    | '(' attributes ')' { $$ = $2; }
;

attributes:
      attrib
    | attributes ',' attrib { $$ = $1 | $3; }
;

attrib:
      SIGNED     { $$ = 1; }
      // TODO: these seem to be currently ignored
    | SATURATING { $$ = 2; }
;

opt_length: /* epsilon */
    | LENGTH ':' expression ';'  /* const_expression or name */
      { $<HeaderType>-1.annotations->emplace_back(@1+@4, "length", $3); }
    ;

opt_max_length: /* epsilon */
    | MAX_LENGTH ':' const_expression ';'
      { $<HeaderType>-2.annotations->emplace_back(@1+@4, "max_length", $3); }
    ;

type: INT '<' INTEGER '>'
      { if (!$3->fitsInt())
            BUG("%1$: Value too large", @3);
        $$ = IR::Type::Bits::get(@3, $3->asInt()); }
    | BIT '<' INTEGER '>'
      { if (!$3->fitsInt())
            BUG("%1$: Value too large", @3);
        $$ = IR::Type::Bits::get(@3, $3->asInt()); }
;

/************************************/
/* 5.2 Header and Metadata instance */
/************************************/

header_instance:
      HEADER name name ';'
      { global->add($3, new IR::Header(@1+@4, IR::ID(@2, $2), IR::ID(@3, $3), nullptr)); }
    | HEADER name name '[' const_expression ']' ';'
      { global->add($3, new IR::HeaderStack(@1+@7, IR::ID(@2, $2), IR::ID(@3, $3),
                                            nullptr, $5 ? $5->asLong() : 0));
        $5 = nullptr; }
    ;

metadata_instance:
      METADATA name name opt_metadata_initializer ';'
      { global->add($3, new IR::Metadata(@1+@5, IR::ID(@2, $2), IR::ID(@3, $3), nullptr)); }
    ;

opt_metadata_initializer: /* epsilon */
    | '{' metadata_field_init_list '}'
    ;

metadata_field_init_list: /* empty */
    | metadata_field_init_list name ':' const_expression ';'
      { $4 = nullptr; }
    ;

/*******************/
/* 5.4 Field Lists */
/*******************/

field_list_declaration:
      FIELD_LIST name '{' field_list_entries '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
    | FIELD_LIST name ';'
      /* FIXME -- empty field list? or (unneeded) forward declaration? */
;

field_list_entries: /* epsilon */ { $$ = new IR::FieldList; }
    | field_list_entries expression ';'  /* const_expression or field_ref or name */
      { ($$=$1)->fields.push_back($2); }
    | field_list_entries PAYLOAD ';'
      { ($$=$1)->payload = true; }
    ;

/***************************************************/
/* 6  Checksums and Hash-based Selection Functions */
/***************************************************/

field_list_calculation_declaration:
      FIELD_LIST_CALCULATION name '{' field_list_calculation_body '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
;

field_list_calculation_body: /* epsilon */ { $$ = new IR::FieldListCalculation; }
    | field_list_calculation_body INPUT '{' field_list_list '}'
      { if ($1->input)
            error("%s: multiple 'input' in field_list_calculation", @2);
        ($$=$1)->input = $4; }
    | field_list_calculation_body ALGORITHM ':' name ';'
      { if ($1->algorithm)
            error("%s: multiple 'algorithm' in field_list_calculation", @2);
        ($$=$1)->algorithm = IR::ID(@4, $4); }
    | field_list_calculation_body OUTPUT_WIDTH ':' const_expression ';'
      { if ($1->output_width)
            error("%s: multiple 'output_width' in field_list_calculation", @2);
        ($$=$1)->output_width = $4 ? $4->asInt() : 0; }
    | field_list_calculation_body error ';'
    | field_list_calculation_body error
;

field_list_list: /* epsilon */
      { $$ = new IR::NameList; }
    | field_list_list name ';'
      { ($$=$1)->names.emplace_back(@2, $2); }
;

calculated_field_declaration:
      CALCULATED_FIELD field_ref '{' update_verify_spec_list '}'
      { $4->field = $2; $4->srcInfo = @1 + @5; global->add($2->toString(), $4); }
;

update_verify_spec_list: /* epsilon */
      { $$ = new IR::CalculatedField; }
    | update_verify_spec_list UPDATE name opt_condition ';'
      { ($$=$1)->specs.emplace_back(@1+@3, true, IR::ID(@3, $3), $4); }
    | update_verify_spec_list VERIFY name opt_condition ';'
      { ($$=$1)->specs.emplace_back(@1+@3, false, IR::ID(@3, $3), $4); }
    | update_verify_spec_list error ';'
    | update_verify_spec_list error
;

opt_condition: /* epsilon */ { $$ = nullptr; }
    | IF '(' expression ')' { $$ = $3; }
;

/************************/
/* 7.4 Parser Functions */
/************************/

parser_function_declaration:
      PARSER name '{' parser_statement_list '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
;

parser_statement_list: /* epsilon */ { $$ = new IR::V1Parser; }
    | parser_statement_list EXTRACT '(' header_ref ')' ';'
      { ($$=$1)->stmts.push_back(new IR::Primitive(@2+@5, $2, $4)); }
    | parser_statement_list SET_METADATA '(' field_ref ',' expression ')' ';'
      { ($$=$1)->stmts.push_back(new IR::Primitive(@2+@7, $2, $4, $6)); }
    | parser_statement_list field_ref '=' expression ';'
      { ($$=$1)->stmts.push_back(new IR::Primitive(@3, "set_metadata", $2, $4)); }
    | parser_statement_list RETURN name ';'
      { ($$=$1)->default_return = IR::ID(@3, $3); }
    | parser_statement_list RETURN SELECT '(' expression_list ')' '{' case_entry_list '}'
      { ($$=$1)->select = $5; $$->cases = $8; }
    | parser_statement_list PARSE_ERROR name ';'
      { ($$=$1)->parse_error = IR::ID(@3, $3); }
    | parser_statement_list DROP ';'
      { ($$=$1)->drop = true; }
    | parser_statement_list error ';'
    | parser_statement_list error
;

case_entry_list: /* epsilon */ { $$ = new IR::Vector<IR::CaseEntry>; }
    | case_entry_list case_value_list ':' name ';'
      { $2->action = IR::ID(@4, $4); $1->srcInfo += @2 + @4; ($$=$1)->push_back($2); }
    | case_entry_list case_value_list ':' PARSE_ERROR ';'
      { $2->action = IR::ID(@4, $4); $1->srcInfo += @2 + @4; ($$=$1)->push_back($2); }
;

case_value_list:
      { $<CaseEntry>$ = new IR::CaseEntry; } case_value { ($$=$<CaseEntry>1)->srcInfo = @2; }
    | case_value_list ',' { $<CaseEntry>$ = $1; } case_value { ($$=$1)->srcInfo = @1+@4; }
;
case_value:
      const_expression { $<CaseEntry>0->values.emplace_back($1 ? $1 : new IR::Constant(-1),
                                                            new IR::Constant(-1)); }
    | const_expression MASK const_expression
      { $<CaseEntry>0->values.emplace_back($1 ? $1 : new IR::Constant(-1), $3 ? $3 :
                                           new IR::Constant(0)); }
    | DEFAULT
      { $<CaseEntry>0->values.emplace_back(new IR::Constant(0), new IR::Constant(0)); }
;

/*************************/
/* 7.6 Parser Exceptions */
/*************************/

parser_exception_declaration:
      PARSER_EXCEPTION name '{' parser_statement_list '}'
;

/*****************/
/* 10.1 Counters */
/*****************/

counter_declaration: COUNTER name '{' counter_spec_list '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
;

counter_spec_list:
      TYPE ':' name ';'
      { ($$ = new IR::Counter)->settype($3); }
    | counter_spec_list DIRECT ':' name ';'
      { if (($$=$1)->table)
            error("%s: Can't attach counter to two tables", @2+@4);
        $$->table = IR::ID(@4, $4);
        $$->direct = true; }
    | counter_spec_list STATIC ':' name ';'
      { if (($$=$1)->table)
            error("%s: Can't attach counter to two tables", @2+@4);
        $$->table = IR::ID(@4, $4);
        $$->direct = false; }
    | counter_spec_list INSTANCE_COUNT ':' const_expression ';'
      { ($$=$1)->instance_count = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | counter_spec_list MAX_WIDTH ':' const_expression ';'
      { ($$=$1)->max_width = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | counter_spec_list MIN_WIDTH ':' const_expression ';'
      { ($$=$1)->min_width = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | counter_spec_list SATURATING ';'
      { ($$=$1)->saturating = true; }
    | counter_spec_list error ';'
    | counter_spec_list error
;

/***************/
/* 10.2 Meters */
/***************/

meter_declaration : METER name '{' meter_spec_list '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
;

meter_spec_list:
      TYPE ':' name ';'
      { ($$ = new IR::Meter)->settype($3); }
    | meter_spec_list RESULT ':' field_ref ';'
      { ($$=$1)->result = $4; }
    | meter_spec_list PRE_COLOR ':' field_ref ';'
      { ($$=$1)->pre_color = $4; }
    | meter_spec_list DIRECT ':' name ';'
      { if (($$=$1)->table)
            error("%s: Can't attach meter to two tables", @2+@4);
        $$->table = IR::ID(@4, $4);
        $$->direct = true; }
    | meter_spec_list STATIC ':' name ';'
      { if (($$=$1)->table)
            error("%s: Can't attach meter to two tables", @2+@4);
        $$->table = IR::ID(@4, $4);
        $$->direct = false; }
    | meter_spec_list INSTANCE_COUNT ':' const_expression ';'
      { ($$=$1)->instance_count = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | meter_spec_list IMPLEMENTATION ':' name ';'
      { ($$=$1)->implementation = IR::ID(@4, $4); }
    | meter_spec_list error ';'
    | meter_spec_list error
;

/******************/
/* 10.2 Registers */
/******************/

register_declaration: REGISTER name '{' register_spec_list '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
;

register_spec_list:
      WIDTH ':' const_expression ';'
      { ($$ = new IR::Register)->width = $3 ? $3->asLong() : 0; $3 = nullptr; }
    | LAYOUT ':' name ';'
      { ($$ = new IR::Register)->layout = IR::ID(@3, $3); }
    | register_spec_list DIRECT ':' name ';'
      { if (($$=$1)->table)
            error("%s: Can't attach register to two tables", @2+@4);
        $$->table = IR::ID(@4, $4);
        $$->direct = true; }
    | register_spec_list STATIC ':' name ';'
      { if (($$=$1)->table)
            error("%s: Can't attach register to two tables", @2+@4);
        $$->table = IR::ID(@4, $4);
        $$->direct = false; }
    | register_spec_list INSTANCE_COUNT ':' const_expression ';'
      { ($$=$1)->instance_count = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | register_spec_list ATTRIBUTES ':' attributes ';'
      { ($$=$1)->signed_ = ($4 & 1) ? true : false;
        $1->saturating = ($4 & 2) ? true : false; }
    | register_spec_list error ';'
    | register_spec_list error
;

/**************************/
/* 12.1 Primitive Actions */
/**************************/

primitive_action_declaration: PRIMITIVE_ACTION name '(' name_list ')' ';'
    { $4 = nullptr; }
;

name_list: name { $$ = new IR::NameList(@1, $1); }
    | name_list ',' name { ($$=$1)->names.emplace_back(@3, $3); $$->srcInfo = @1 + @3; }
    ;

opt_name_list: { $$ = nullptr; } | name_list ;

/***************************/
/* 12.2 Action Definitions */
/***************************/

action_function_declaration:
      ACTION name '(' opt_name_list ')' action_function_body
      { $6->name = IR::ID(@2, $2);
        if ($4) for (auto &arg : $4->names)
            $6->args.push_back(new IR::ActionArg(arg));
        $4 = nullptr;
        $6->srcInfo = @1 + @6;
        global->add($2, $6); }
;

action_function_body:
      '{' action_statement_list '}'  { $$ = $2; }
    | '{' action_statement_list error '}'  { $$ = $2; }
;

action_statement_list: /* epsilon */ { $$ = new IR::ActionFunction; }
    | action_statement_list name '(' opt_expression_list ')' ';'
      { ($$ = $1)->action.push_back(new IR::Primitive(@2+@5, $2, $4)); }
    | action_statement_list field_ref '=' expression ';'
      { ($$ = $1)->action.push_back(new IR::Primitive(@3, "modify_field", $2, $4)); }
    | action_statement_list field_ref '(' opt_expression_list ')' ';'
      { ($$ = $1)->action.push_back(new IR::Primitive(@2+@5, $2->member, $2->expr, $4)); }
    | action_statement_list error ';'
      { $$ = $1; }
;

/***************************/
/* Action Profile Definitions */
/***************************/

action_profile_declaration: ACTION_PROFILE name '{' action_profile_body '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
    ;

action_profile_body: /* epsilon */ { $$ = new IR::ActionProfile; }
    | action_profile_body ACTIONS '{' action_list '}'
      { ($$=$1)->actions = $4->names; $4 = nullptr; }
    | action_profile_body SIZE ':' const_expression ';'
      { ($$=$1)->size = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | action_profile_body DYNAMIC_ACTION_SELECTION ':' name ';'
      { ($$=$1)->selector = IR::ID(@4, $4); }
    ;

action_selector_declaration: ACTION_SELECTOR name '{' action_selector_body '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
    ;

action_selector_body: /* epsilon */ { $$ = new IR::ActionSelector; }
    | action_selector_body SELECTION_KEY ':' name ';'
      { ($$=$1)->key = IR::ID(@4, $4); }
    | action_selector_body SELECTION_MODE ':' name ';'
      { ($$=$1)->mode = IR::ID(@4, $4); }
    | action_selector_body SELECTION_TYPE ':' name ';'
      { ($$=$1)->type = IR::ID(@4, $4); }
    ;

/*************************/
/* 13 Table Declarations */
/*************************/

table_declaration: TABLE name '{' table_body '}'
      { $4->name = IR::ID(@2, $2); $4->srcInfo = @1 + @5; global->add($2, $4); }
;

table_body: /* epsilon */ { $$ = new IR::V1Table; }
    | table_body READS '{' field_match_list '}'
      { ($$=$1)->reads = $4; }
    | table_body ACTIONS '{' action_list '}'
      { ($$=$1)->actions = $4->names; $4 = nullptr; }
    | table_body ACTION_PROFILE ':' name ';'
      { ($$=$1)->action_profile = IR::ID(@4, $4); }
    | table_body MIN_SIZE ':' const_expression ';'
      { ($$=$1)->min_size = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | table_body MAX_SIZE ':' const_expression ';'
      { ($$=$1)->max_size = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | table_body SIZE ':' const_expression ';'
      { ($$=$1)->size = $4 ? $4->asLong() : 0; $4 = nullptr; }
    | table_body DEFAULT_ACTION ':' name ';'
      { ($$=$1)->default_action = IR::ID(@4, $4); }
    | table_body DEFAULT_ACTION ':' name '(' expression_list ')' ';'
      { ($$=$1)->default_action = IR::ID(@4, $4);
        $$->default_action_args = $6; }
    | table_body IDENTIFIER ':' expression ';'
      { auto exp = new IR::ExpressionValue(@4, $4);
        auto prop = new IR::TableProperty(@2, IR::ID(@2, $2), IR::Annotations::empty, exp, false);
        $1->addProperty(prop);
        $$ = $1; }
    | table_body error ';' { $$=$1; }
    | table_body error { $$=$1; }
;

field_match_list: /* epsilon */ { $$ = new IR::Vector<IR::Expression>(); }
    | field_match_list field_or_masked_ref ':' name ';'
      { ($$=$1)->push_back($2);
        $$->srcInfo += @2 + @4;
        $<Table>-2->reads_types.push_back(IR::ID(@4, $4)); }
    | field_match_list header_ref ':' VALID ';'
      { ($$=$1)->push_back(new IR::Primitive(@2+@4, $4, $2));
        $$->srcInfo += @2 + @4;
        $<Table>-2->reads_types.push_back(IR::ID(@4, $4)); }
    | field_match_list error ';' { $$ = $1; }
    | field_match_list error { $$ = $1; }
;

field_or_masked_ref:
      field_ref { $$ = $1; }
    | field_ref MASK const_expression
      { $$ = new IR::Mask(@2, $1, $3); }
;

action_list: /* epsilon */ { $$ = new IR::NameList(); }
    | action_list name ';' { ($$=$1)->names.emplace_back(@2, $2); }
;

/*****************************************/
/* 14 Packet Processing and Control Flow */
/*****************************************/

control_function_declaration: CONTROL name '{' control_statement_list '}'
      { global->add($2, new IR::V1Control(@1+@5, IR::ID(@2, $2), $4)); }
;

control_statement_list: /* epsilon */ { $$ = new IR::Vector<IR::Expression>; }
    | control_statement_list APPLY '(' name ')' ';'
      { ($$=$1)->push_back(new IR::Apply(@2+@5, IR::ID(@4, $4))); }
    | control_statement_list APPLY '(' name ')' '{' apply_case_list '}'
      { $7->name = IR::ID(@4, $4); $7->srcInfo = @2+@5; ($$=$1)->push_back($7); }
    | control_statement_list IF '(' expression ')' '{' control_statement_list '}' opt_else
      { ($$=$1)->push_back(new IR::If(@2+@4, $4, $7, $9)); }
    | control_statement_list name '(' ')' ';'
      { ($$=$1)->push_back(new IR::Primitive(@2+@4, $2)); }
    | control_statement_list error ';'
    | control_statement_list error
;

opt_else: /* epsilon */ { $$ = nullptr; }
    | ELSE '{' control_statement_list '}'
      { $$ = $3; }
    | ELSE IF '(' expression ')' '{' control_statement_list '}' opt_else
      { $$ = new IR::Vector<IR::Expression>(new IR::If(@2+@5, $4, $7, $9)); }
;

apply_case_list: /* epsilon */ { $$ = new IR::Apply; }
    | apply_case_list name_list '{' control_statement_list '}'
        { for (auto name : $2->names)
              $1->actions[name] = $4;
          $$ = $1; }
    | apply_case_list DEFAULT '{' control_statement_list '}'
        { ($$=$1)->actions["default"] = $4; }
;

/************/
/* blackbox */
/************/

blackbox_type_declaration: BLACKBOX_TYPE name '{' blackbox_body '}'
;

blackbox_body: /* epsilon */
    | blackbox_body ATTRIBUTE name '{' blackbox_attribute '}'
    | blackbox_body METHOD name '(' opt_argument_list ')' '{' blackbox_method '}'
    | blackbox_body error
;

blackbox_attribute: /* epsilon */
    | blackbox_attribute name ':' name ';'
    | blackbox_attribute name ':' type ';'
    | blackbox_attribute name '{' opt_name_list '}'
    | blackbox_attribute name ';'
    | blackbox_attribute error ';'
    | blackbox_attribute error
;

blackbox_method: /* epsilon */
    | blackbox_method READS '{' opt_name_list '}'
    | blackbox_method WRITES '{' opt_name_list '}'
;

opt_argument_list: /* epsilon */ | argument_list ;

argument_list: argument | argument_list ',' argument ;

argument: name | type | argument name | argument type;

blackbox_instantiation: BLACKBOX name name '{' blackbox_config '}'
;

blackbox_config: /* epsilon */
    | blackbox_config name ':' expressions ';'
    | blackbox_config name '{' expressions '}'
;

expressions: /* epsilon */
      { $$ = new IR::Vector<IR::Expression>; }
    | expressions expression %prec EXPRLIST
      { ($$=$1)->push_back($2); $$->srcInfo += @2; }
;

/***************/
/* Expressions */
/***************/

expression:
      VALID '(' header_or_field_ref ')' { $$ = new IR::Primitive(@1+@4, $1, $3); }
    | CURRENT '(' const_expression ',' const_expression ')'
        { $$ = new IR::Primitive(@1+@6, $1, $3, $5); }
    | field_ref { $$ = $1; }
    | header_ref
    | LATEST '.' name   { $$ = new IR::Member(@1+@3, new IR::NamedRef(@1, $1), IR::ID(@3, $3)); }
    | INTEGER           { $$ = $1; }
    | '(' expression ')'                { $$ = $2; }
    | NOT expression %prec PREFIX       { $$ = new IR::LNot(@1, $2); }
    | '!' expression %prec PREFIX       { $$ = new IR::LNot(@1, $2); }
    | '~' expression %prec PREFIX       { $$ = new IR::Cmpl(@1, $2); }
    | '-' expression %prec PREFIX       { $$ = new IR::Neg(@1, $2); }
    | '+' expression %prec PREFIX       { $$ = $2; }
    | expression '*' expression         { $$ = new IR::Mul(@2, $1, $3); }
    | expression '/' expression         { $$ = new IR::Div(@2, $1, $3); }
    | expression '%' expression         { $$ = new IR::Mod(@2, $1, $3); }
    | expression '+' expression         { $$ = new IR::Add(@2, $1, $3); }
    | expression '-' expression         { $$ = new IR::Sub(@2, $1, $3); }
    | expression SHL expression         { $$ = new IR::Shl(@2, $1, $3); }
    | expression SHR expression         { $$ = new IR::Shr(@2, $1, $3); }
    | expression LE expression          { $$ = new IR::Leq(@2, $1, $3); }
    | expression GE expression          { $$ = new IR::Geq(@2, $1, $3); }
    | expression '<' expression         { $$ = new IR::Lss(@2, $1, $3); }
    | expression '>' expression         { $$ = new IR::Grt(@2, $1, $3); }
    | expression NE expression          { $$ = new IR::Neq(@2, $1, $3); }
    | expression EQ expression          { $$ = new IR::Equ(@2, $1, $3); }
    | expression '&' expression         { $$ = new IR::BAnd(@2, $1, $3); }
    | expression '^' expression         { $$ = new IR::BXor(@2, $1, $3); }
    | expression '|' expression         { $$ = new IR::BOr(@2, $1, $3); }
    | expression AND expression         { $$ = new IR::LAnd(@2, $1, $3); }
    | expression OR expression          { $$ = new IR::LOr(@2, $1, $3); }
    | TRUE                              { $$ = new IR::BoolLiteral(@1, true); }
    | FALSE                             { $$ = new IR::BoolLiteral(@1, false); }
;

header_or_field_ref:
      header_ref
    | field_ref { $$ = $1; }
;

header_ref:
      name      { $$ = new IR::NamedRef(@1, IR::ID(@1, $1)); }
    | header_ref '[' expression ']'     { $$ = new IR::HeaderStackItemRef(@1+@4, $1, $3); }
;

field_ref: header_ref '.' name
         { $$ = new IR::Member(@1+@3, $1, IR::ID(@3, $3)); }
;


const_expression: expression
        { if (!($$ = constantFold(&*$1)))
                error("%s: Non constant expression", @1); }
;

expression_list:
      expression { $$ = new IR::Vector<IR::Expression>($1); $$->srcInfo = @1; }
    | expression_list ',' expression { ($$=$1)->push_back($3); $$->srcInfo += @3; }
    ;

opt_expression_list: /* epsilon */ { $$ = nullptr; } | expression_list


name: IDENTIFIER
    | ACTION | ACTIONS | ACTION_PROFILE | ACTION_SELECTOR | ALGORITHM
    | ATTRIBUTE | ATTRIBUTES | BIT | BLACKBOX | BLACKBOX_TYPE
    | CALCULATED_FIELD | CONTROL | COUNTER | DEFAULT_ACTION
    | DIRECT | DROP | DYNAMIC_ACTION_SELECTION | EXTRACT | FIELD_LIST
    | FIELD_LIST_CALCULATION | FIELDS | HEADER | HEADER_TYPE | IMPLEMENTATION
    | INPUT | INSTANCE_COUNT | INT | LAYOUT | LENGTH | MASK | MAX_LENGTH | MAX_SIZE
    | MAX_WIDTH | METADATA | METER | METHOD | MIN_SIZE | MIN_WIDTH | OUTPUT_WIDTH
    | PARSER | PARSER_EXCEPTION | PRE_COLOR | PRIMITIVE_ACTION | READS
    | REGISTER | RESULT | RETURN | SATURATING | SELECTION_KEY | SELECTION_MODE
    | SELECTION_TYPE | SET_METADATA | SIGNED | SIZE | STATIC | TABLE | TYPE
    | UPDATE | VERIFY | WIDTH | WRITES
;

%%

#include "p4v1-lex.c"
}  // end anonymous namespace

static bool parsing = false;

void yyerror(const char *msg) {
    if (strstr(msg, "IDENTIFIER"))
        error("%s: %s \"%s\"", yylloc, msg, yylval.str);
    else
        error("%s: %s", yylloc, msg);
}

const IR::V1Program *parse_p4v1_file(const CompilerOptions &options, FILE *in) {
    extern int verbose;
    if (verbose)
        std::cout << "Parsing P4 v1 program " << options.file << std::endl;
#ifdef YYDEBUG
    if (const char *p = getenv("YYDEBUG"))
        yydebug = atoi(p);
#endif
    global = new IR::V1Program(options);
    parsing = true;
    yyrestart(in);
    Util::InputSources::instance->mapLine(options.file, 1);
    yyparse();
    parsing = false;
    if (::errorCount() > 0) {
        ::error("Errors during parsing; aborting compilation");
        global = nullptr;
    }
    return global;
}

#include "frontends/common/constantFolding.h"

static IR::Constant *constantFold(IR::Expression *a) {
    IR::Node *exp(a);
    auto rv = exp->apply(P4::ConstantFolding(nullptr, nullptr))->to<IR::Constant>();
    return rv ? new IR::Constant(rv->type, rv->value, rv->base) : nullptr;
}
