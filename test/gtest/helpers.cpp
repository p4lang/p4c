/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "helpers.h"

namespace detail {

std::string makeP4Source(const char* file, unsigned line, const char* rawSource) {
    std::stringstream source;

    unsigned lineCount = 0;
    for (auto iter = rawSource; *iter; ++iter) {
        if (*iter == '\n') ++lineCount;
    }

    // Add a #line preprocessor directive, so that any errors generated by the
    // compiler reference the appropriate file and line in the unit test source
    // code. __LINE__ (i.e., @line in this function) refers to the *last* line
    // containing a multiline macro; since we expect this function to be called
    // from a macro that accepts a multiline P4 program in a raw string, we need
    // to subtract the number of lines in the program to get the *first* line of
    // the macro, which is what we need to use in #line to get the correct
    // mapping to the unit test source.
    source << "#line " << (line - lineCount)  << " \"" << file << "\"" << std::endl;
    source << rawSource;

    return source.str();
}

}  // namespace detail

/* static */ P4CTestEnvironment* P4CTestEnvironment::get() {
    static P4CTestEnvironment* instance = new P4CTestEnvironment;
    return instance;
}

void P4CTestEnvironment::SetUp() {
    // Open core.p4. XXX(seth): It'd be ideal to locate the file more robustly.
    const char* coreP4File = "p4include/core.p4";
    std::ifstream input(coreP4File);
    ASSERT_TRUE(input.good());

    // Initialize a buffer with a #line preprocessor directive. This ensures
    // that any errors we encounter in core.p4 will reference the correct file
    // and line.
    std::stringstream buffer;
    buffer << "#line 1 \"" << coreP4File << "\"" << std::endl;

    // Read the contents of core.p4 into the buffer and store it for use by tests.
    while (input >> buffer.rdbuf()) continue;
    _coreP4 = buffer.str();
}

std::string with_core_p4(const std::string& pgm) {
    return P4CTestEnvironment::get()->coreP4() + pgm;
}
