version:
  version: 1.0.1
  run_id: "ecba7fb5cb3842db"
  target: Tofino2
phv ingress:
  ig_intr_md_for_dprsr.mirror_type.$valid: H7(0)
  ig_intr_md.ingress_port: {  stage 0..8: H65(0..8), stage 9..13: DH20(0..8), stage 14..15: H65(0..8) } 
  hdr.fabric_trace.trace_counter: {  stage 16..20: H43 } 
  hdr.fabric_trace.timestamp.0-31: MW11
  hdr.fabric_trace.timestamp.32-47: {  stage 0..8: H52, stage 9: DH16, stage 10..19: H52 } 
  ig_md.ig_ft.srv6.sid.0-31: {  stage 2..8: DW0 } 
  ig_md.ig_ft.srv6.sid.32-63: {  stage 2..8: DW4 } 
  ig_md.ig_ft.srv6.sid.64-95: {  stage 2..8: DW5 } 
  ig_md.ig_ft.srv6.sid.96-127: {  stage 2..8: DW8 } 
  ig_md.ig_ft.srv6.g_sid.0-15: {  stage 2..7: DH3 } 
  ig_md.ig_ft.srv6.g_sid.16-31: {  stage 2..7: DH12 } 
  ig_md.ig_ft.srv6.g_sid.32-63: {  stage 2..7: DW3 } 
  ig_md.ig_ft.srv6.g_sid.64-95: {  stage 2..7: DW2 } 
  ig_md.ig_ft.srv6.g_sid.96-127: {  stage 2..7: DW1 } 
  ig_md.ig_ft.srv6.args.0-31: {  stage 11..12: W5 } 
  ig_md.ig_ft.srv6.args.32-63: {  stage 11..12: W14 } 
  ig_md.ig_ft.srv6.c_sid: {  stage 8: W0 } 
  ig_md.ig_ft.srv6.prefixlen: {  stage 7..8: H8(6..13) } 
  ig_md.ig_ft.srv6.si: {  stage 7..9: W6(0..1) } 
  ig_md.ig_ft.srv6.srh_terminate: {  stage 9..14: B13(6) } 
  ig_md.ig_ft.srv6.next_hdr: {  stage 2..14: MB1 } 
  ig_md.ig_ft.srv6.end_type: {  stage 5..14: W30(0..4) } 
  ig_md.ig_ft.srv6.tmp_info: {  stage 10..15: H16(0..14) } 
  ig_md.ig_ft.srv6.end_flag: {  stage 10..14: H43(3) } 
  ig_md.ig_ft.srv6.sl_flag: {  stage 9..14: B35(7) } 
  ig_md.ig_ft.srv6.tmp_no_frr: {  stage 0..13: B34(1) } 
  ig_md.ig_ft.srv6.sl_minus_flag: {  stage 1..8: H16(15) } 
  ig_md.ig_ft.srv6.global_pf_mode: {  stage 6..8: W28(0..1) } 
  ig_md.ig_ft.srv6.pf_bypass: {  stage 1..7: B10(6) } 
  ig_md.ig_ft.srv6.pf_downgrade: {  stage 0..8: MB8(0) } 
  ig_md.ig_ft.srv6.ext_flag: {  stage 7..16: H8(3) } 
  ig_md.ig_ft.srv6.lif_type: {  stage 10..14: H57(0) } 
  ig_md.ig_ft.srv6.is_end_as: {  stage 10..14: H30(7) } 
  hdr.fabric_base.pkt_type: B37(2..7)
  hdr.fabric_base.is_mirror: B37(1)
  hdr.fabric_base.is_mcast: B37(0)
  hdr.fabric_qos.tc: {  stage 0..6: H69(5..7) } 
  hdr.fabric_qos.color: {  stage 0..6: H69(3..4) } 
  hdr.fabric_qos.track: {  stage 0: H69(0) } 
  hdr.fabric_data_template_plus.flags: B15
  hdr.fabric_data_template_plus.vb: B36
  hdr.fabric_data_template_plus.vh0: H53
  hdr.fabric_data_template_plus.vh1: H19
  hdr.fabric_data_template_plus.vh2: H1
  hdr.fabric_data_template_plus.vh3: H17
  hdr.fabric_data_template_plus.one: H13(15)
  hdr.fabric_data_template_plus.iif: H13(0..14)
  hdr.ig_ft.ipv6.version: B41(4..7)
  hdr.ig_ft.ipv6.traffic_class.0-3: B40(4..7)
  hdr.ig_ft.ipv6.traffic_class.4-7: B41(0..3)
  hdr.ig_ft.ipv6.flow_label.0-15: H3
  hdr.ig_ft.ipv6.flow_label.16-19: B40(0..3)
  hdr.ig_ft.ipv6.payload_len: H0
  hdr.ig_ft.ipv6.next_hdr: MB6
  hdr.ig_ft.ipv6.src_addr.0-15: H2
  hdr.ig_ft.ipv6.src_addr.16-31: MH12
  hdr.ig_ft.ipv6.src_addr.32-63: MW2
  hdr.ig_ft.ipv6.src_addr.64-95: MW1
  hdr.ig_ft.ipv6.src_addr.96-127: MW0
  hdr.ig_ft.ipv6.dst_addr.0-31: MW3
  hdr.ig_ft.ipv6.dst_addr.32-63: MW6
  hdr.ig_ft.ipv6.dst_addr.64-95: MW7
  hdr.ig_ft.ipv6.dst_addr.96-127: MW8
  ig_md.ig_ft.lkp.vid: {  stage 0..11: H67(0..11) } 
  ig_md.ig_ft.lkp.mac_dst_addr.0-31: {  stage 0..15: W16 } 
  ig_md.ig_ft.lkp.mac_dst_addr.32-47: {  stage 0..15: H64 } 
  ig_md.ig_ft.lkp.mac_src_addr.0-15: {  stage 0..2: W30(0..15) } 
  ig_md.ig_ft.lkp.mac_src_addr.16-23: {  stage 0..2: H22(0..7) } 
  ig_md.ig_ft.lkp.mac_src_addr.24-47: {  stage 0..2: W17(0..23) } 
  ig_md.ig_ft.lkp.l4_port_label_32.0-15: {  stage 1..8: H43 } 
  ig_md.ig_ft.lkp.l4_port_label_32.16-31: {  stage 1..8: H57 } 
  ig_md.ig_ft.lkp.l4_src_port: {  stage 0..11: H66 } 
  ig_md.ig_ft.lkp.l4_dst_port: {  stage 0..11: W31(0..15) } 
  ig_md.ig_ft.lkp.ip_frag: {  stage 3..8: H22(0..1) } 
  ig_md.ig_ft.lkp.ip_tos.0-1: {  stage 1..8: B44(0..1) } 
  ig_md.ig_ft.lkp.ip_tos.2-3: {  stage 1..8: B45(0..1) } 
  ig_md.ig_ft.lkp.ip_tos.4-7: {  stage 1..8: B46(0..3) } 
  ig_md.ig_ft.lkp.ip_proto: {  stage 0..11: B18 } 
  ig_md.ig_ft.lkp.srv6_ip_proto: {  stage 0..1: MB0 } 
  ig_md.ig_ft.lkp.ip_src_addr.0-15: {  stage 0..11: H10 } 
  ig_md.ig_ft.lkp.ip_src_addr.16-31: {  stage 0..11: MH13 } 
  ig_md.ig_ft.lkp.ip_src_addr.32-63: {  stage 0..11: W3 } 
  ig_md.ig_ft.lkp.ip_src_addr.64-95: {  stage 0..11: W2 } 
  ig_md.ig_ft.lkp.ip_src_addr.96-127: {  stage 0..11: W1 } 
  ig_md.ig_ft.lkp.ip_dst_addr.0-31: {  stage 0..13: W4 } 
  ig_md.ig_ft.lkp.ip_dst_addr.32-63: {  stage 0..13: W13 } 
  ig_md.ig_ft.lkp.ip_dst_addr.64-95: {  stage 0..13: W15 } 
  ig_md.ig_ft.lkp.ip_dst_addr.96-127: {  stage 0..13: W24 } 
  ig_md.ig_ft.lkp.tcp_flags: {  stage 0..8: H29(0..7) } 
  ig_md.ig_ft.lkp.ip_ttl: {  stage 0..11: MH0(0..7) } 
  ig_md.ig_ft.lkp.flow_label: {  stage 0..3: W28(0..19) } 
  ig_md.ig_ft.lkp.tmp_ipv4_checksum: {  stage 0: H20 } 
  hdr.ig_ft.vxlan.vni.0-15: H4
  hdr.ig_ft.vxlan.vni.16-23: B47
  ig_md.ig_ft.flags.ipv4_checksum_err: {  stage 0..15: H8(1) } 
  ig_md.ig_ft.flags.inner_ipv4_checksum_err: {  stage 0..10: H8(2) } 
  ig_md.ig_ft.flags.tunnel_info: {  stage 13..20: H12(14) } 
  ig_md.ig_ft.flags.drop: {  stage 16..18: H37(0) } 
  hdr.ig_ft.srv6_srh.next_hdr: MB4
  hdr.ig_ft.srv6_srh.seg_left: B14
  hdr.ig_ft.srv6_srh.last_entry: B47
  hdr.ig_ft.doh_e2e.next_hdr: {  stage 0: B45, stage 1..8: DB13, stage 9..19: B45 } 
  hdr.ig_ft.doh_e2e.hdr_ext_len: {  stage 0: B46, stage 1..8: DB12, stage 9..19: B46 } 
  hdr.ig_ft.doh_e2e.option_type: {  stage 0: H28(8..15), stage 1..16: DH8(8..15), stage 17..19: H28(8..15) } 
  hdr.ig_ft.doh_e2e.option_len: {  stage 0: H28(0..7), stage 1..16: DH8(0..7), stage 17..19: H28(0..7) } 
  ig_md.ig_ft.ifit.loss_label: {  stage 0..15: MB12(3) } 
  ig_md.ig_ft.ifit.delay_label: {  stage 0..15: MB14(2) } 
  ig_md.ig_ft.ifit.ifit_enable: {  stage 10..15: W38(0) } 
  ig_md.ig_ft.ifit.dyna_learn_flag: {  stage 10..15: H69(0) } 
  ig_md.ig_ft.ifit.ifit_decap_enable: {  stage 10..15: H69(3) } 
  ig_md.ig_ft.ifit.endpoint_enable: {  stage 6..17: B35(6) } 
  ig_md.ig_ft.ifit.hti: {  stage 0..15: MB10(6..7) } 
  ig_md.ig_ft.ifit.index: {  stage 9..17: H22(0..11) } 
  ig_md.ig_ft.ifit.var_h1: {  stage 11..20: H54 } 
  ig_md.ig_ft.ifit.flow_id: {  stage 0..11: MW5(4..23) } 
  ig_md.ig_ft.ifit.flow_node_id: {  stage 0..11: MW10(4..23) } 
  hdr.ig_ft.doh.next_hdr: MB5
  hdr.ig_ft.srv6_h2h_ifit.reserved3.0-15: H4
  hdr.ig_ft.srv6_h2h_ifit.reserved3.16-23: {  stage 0: B31, stage 1..15: DB8, stage 16..19: B31 } 
  hdr.ext_tunnel_decap.ext_type: B38(5..7)
  hdr.ext_tunnel_decap.extend: B38(4)
  hdr.ext_tunnel_decap.sub_type: B38(0..3)
  hdr.ext_tunnel_decap.vb: B39
  hdr.ext_tunnel_decap.vh: H18
  hdr.ig_ft.ethernet.dst_addr.0-31: MW15
  hdr.ig_ft.ethernet.dst_addr.32-47: H23
  hdr.ig_ft.ethernet.src_addr.0-31: MW14
  hdr.ig_ft.ethernet.src_addr.32-47: H55
  hdr.ig_ft.ethernet.ether_type: MH14
  hdr.ig_ft.vlan_tag$0.pcp: W10(29..31)
  hdr.ig_ft.vlan_tag$0.cfi: W10(28)
  hdr.ig_ft.vlan_tag$0.vid: W10(16..27)
  hdr.ig_ft.vlan_tag$0.ether_type: W10(0..15)
  hdr.ig_ft.vlan_tag$1.pcp: W11(29..31)
  hdr.ig_ft.vlan_tag$1.cfi: W11(28)
  hdr.ig_ft.vlan_tag$1.vid: W11(16..27)
  hdr.ig_ft.vlan_tag$1.ether_type: W11(0..15)
  ig_md.ig_ft.common.mac_type: {  stage 1..16: H71(10..11) } 
  ig_md.ig_ft.common.pkt_type: B37(2..7)
  ig_md.ig_ft.common.pipeline_location: {  stage 19..20: MB15 } 
  ig_md.ig_ft.common.eport.0-7: {  stage 1..2: H16(0..7) } 
  ig_md.ig_ft.common.eport.8-15: {  stage 1..2: MH6(8..15) } 
  ig_md.ig_ft.common.src_port: {  stage 1..20: MB13 } 
  ig_md.ig_ft.common.from_cpu: {  stage 1..18: B13(4) } 
  ig_md.ig_ft.common.hash_mode: {  stage 1..4: W38(0..3) } 
  ig_md.ig_ft.common.mirror_dst_eport: {  stage 6..20: H56 } 
  ig_md.ig_ft.common.ether_type: {  stage 0..15: MH11 } 
  ig_md.ig_ft.common.iif: {  stage 1..20: H15(0..14) } 
  ig_md.ig_ft.common.ul_iif: {  stage 1..20: H14(0..14) } 
  ig_md.ig_ft.common.iif_type: {  stage 1..18: W37(0) } 
  ig_md.ig_ft.common.bridge_type: {  stage 1..18: B35(0..4) } 
  ig_md.ig_ft.common.usi: {  stage 3..4: H20(4..13) } 
  ig_md.ig_ft.common.trace_vh3: {  stage 16..20: H57 } 
  ig_md.ig_ft.common.redirect_recirc: {  stage 14..17: B34(1) } 
  ig_md.ig_ft.common.vpntovpn_flag: {  stage 14..16: H16(15) } 
  ig_md.ig_ft.common.drop_reason: {  stage 6..20: B30 } 
  ig_md.ig_ft.common.tstamp_flag: {  stage 6..18: W17(17) } 
  ig_md.ig_ft.common.extend: {  stage 1..18: B13(7) } 
  ig_md.ig_ft.common.diag: {  stage 1..18: B13(3) } 
  ig_md.ig_ft.common.track: {  stage 1..18: H70(0) } 
  ig_md.ig_ft.common.decap_len: {  stage 10..17: H29 } 
  hdr.ig_ft.ipv4.diffserv: B40
  hdr.ig_ft.ipv4.flags: B14(5..7)
  hdr.ig_ft.ipv4.frag_offset.0-7: MB5
  hdr.ig_ft.ipv4.frag_offset.8-12: B14(0..4)
  hdr.ig_ft.ipv4.protocol: MB4
  hdr.ig_ft.ipv4.src_addr.0-15: H0
  hdr.ig_ft.ipv4.src_addr.16-31: MH12
  hdr.ig_ft.ipv4.dst_addr: MW0
  hdr.ig_ft.ipv4_option.type: MB6
  hdr.ig_ft.ipv4_option.length: H2(8..15)
  hdr.ig_ft.ipv4_option.value.8-15: H2(0..7)
  hdr.ig_ft.mpls_ig$0.label.0-3: H5(12..15)
  hdr.ig_ft.mpls_ig$0.label.4-19: H40
  hdr.ig_ft.mpls_ig$0.exp: H5(9..11)
  hdr.ig_ft.mpls_ig$0.bos: H5(8)
  hdr.ig_ft.mpls_ig$0.ttl: H5(0..7)
  hdr.ig_ft.mpls_ig$1.label.0-3: H4(12..15)
  hdr.ig_ft.mpls_ig$1.label.4-19: H39
  hdr.ig_ft.mpls_ig$1.exp: H4(9..11)
  hdr.ig_ft.mpls_ig$1.bos: H4(8)
  hdr.ig_ft.mpls_ig$1.ttl: H4(0..7)
  hdr.ig_ft.mpls_ig$2.label.0-3: H3(12..15)
  hdr.ig_ft.mpls_ig$2.label.4-19: H38
  hdr.ig_ft.mpls_ig$2.exp: H3(9..11)
  hdr.ig_ft.mpls_ig$2.bos: H3(8)
  hdr.ig_ft.mpls_ig$2.ttl: H3(0..7)
  hdr.ig_ft.mpls_ig$3.label.0-3: H2(12..15)
  hdr.ig_ft.mpls_ig$3.label.4-19: {  stage 0..15: H37, stage 16..18: DH14, stage 19: H37 } 
  hdr.ig_ft.mpls_ig$3.exp: H2(9..11)
  hdr.ig_ft.mpls_ig$3.bos: H2(8)
  hdr.ig_ft.mpls_ig$3.ttl: H2(0..7)
  hdr.ig_ft.mpls_ig$4.label.0-3: H0(12..15)
  hdr.ig_ft.mpls_ig$4.label.4-19: {  stage 0..11: H36, stage 12..18: DH13, stage 19: H36 } 
  hdr.ig_ft.mpls_ig$4.exp: H0(9..11)
  hdr.ig_ft.mpls_ig$4.bos: H0(8)
  hdr.ig_ft.mpls_ig$4.ttl: H0(0..7)
  hdr.ig_ft.br_tag.ecid: {  stage 0: H1(0..11) } 
  hdr.fabric_from_cpu_eth_ccm.dev_port: {  stage 0..12: MW8(0..8) } 
  ig_md.ig_ft.route.vrf: {  stage 4..20: H12(0..12) } 
  ig_md.ig_ft.route.rmac_hit: {  stage 1..18: B12(7) } 
  ig_md.ig_ft.route.ipv4_unicast_enable: {  stage 4..6: H22(8) } 
  ig_md.ig_ft.route.ipv6_unicast_enable: {  stage 4..11: H8(5) } 
  ig_md.ig_ft.tunnel.mpls_enable: {  stage 1..15: H8(4) } 
  ig_md.ig_ft.tunnel.type: {  stage 1..15: B31(0..2) } 
  ig_md.ig_ft.tunnel.sub_type: {  stage 3..15: W6(17..20) } 
  ig_md.ig_ft.tunnel.is_ttl_copy: {  stage 1..18: H8(0) } 
  ig_md.ig_ft.tunnel.is_ttl_copy_1: {  stage 6..8: W0(1) } 
  ig_md.ig_ft.tunnel.is_ttl_copy_2: {  stage 7..8: W0(0) } 
  ig_md.ig_ft.tunnel.is_ttl_copy_3: {  stage 8: W0(2) } 
  ig_md.ig_ft.tunnel.ttl_2: {  stage 6..8: DH0(0..7) } 
  ig_md.ig_ft.tunnel.ttl_3: {  stage 7..8: DH1(0..7) } 
  ig_md.ig_ft.tunnel.ttl_4: {  stage 8: DH2(0..7) } 
  ig_md.ig_ft.tunnel.urpf_type: {  stage 2..15: W38(4..7) } 
  ig_md.ig_ft.tunnel.decap_pre_len: {  stage 1..16: H28 } 
  ig_md.ig_ft.tunnel.is_pre_len_add: {  stage 14..16: H30(8) } 
  ig_md.ig_ft.tunnel.is_terminate: {  stage 6..18: MH5(13) } 
  ig_md.ig_ft.tunnel.is_ilm_continue: {  stage 6..7: MH4(0) } 
  ig_md.ig_ft.tunnel.is_vpn_terminate: {  stage 5..15: W28(2) } 
  ig_md.ig_ft.tunnel.ipv4_true: {  stage 11..20: H12(15) } 
  ig_md.ig_ft.tunnel.evpn_end_type: {  stage 10..15: H57(1) } 
  ig_md.ig_ft.tunnel.inner_pkt_parsed: {  stage 3..14: H6(12..14) } 
  ig_md.ig_ft.tunnel.src_netport_group: {  stage 10..15: H43(0..2) } 
  ig_md.ig_ft.tunnel.source_id: {  stage 10..15: H31(1..10) } 
  ig_md.ig_ft.tunnel.tmp_oif: {  stage 7: MH4(0..14) } 
  ig_md.ig_ft.tunnel.srv6_flavors: {  stage 5..8: W28(3..6) } 
  ig_md.ig_ft.tunnel.bypass_pw: {  stage 6..15: W17(18) } 
  ig_md.ig_ft.tunnel.is_cw: {  stage 8..14: H6(15) } 
  ig_md.ig_ft.tunnel.decap_num: {  stage 9: MB2(0..1) } 
  ig_md.ig_ft.ipfix.flow_id: {  stage 3..9: H70(8..15) } 
  ig_md.ig_ft.ipfix.sample_gap: {  stage 3..6: MH9 } 
  ig_md.ig_ft.ipfix.random_num: {  stage 1..9: H30 } 
  ig_md.ig_ft.ipfix.count: {  stage 6..9: W17(1..16) } 
  ig_md.ig_ft.ipfix.delta: {  stage 5: H31 } 
  ig_md.ig_ft.ipfix.random_flag: {  stage 9: H52(0) } 
  ig_md.ig_ft.mirror.session_id: {  stage 3..20: MB7 } 
  ig_md.ig_ft.mirror.meter_id: {  stage 6: H16(0..9) } 
  ig_md.ig_ft.mirror.sample_flag: {  stage 9..18: W17(0) } 
  ig_md.ig_ft.mirror.span_flag: {  stage 6..18: B5(0) } 
  ig_md.ig_ft.mirror.flags: {  stage 17..20: MB2 } 
  ig_md.ig_ft.mirror.ifit_flag: {  stage 14..18: B6(0) } 
  ig_md.ig_ft.mirror.src: {  stage 17..20: MB0(5..7) } 
  ig_md.ig_ft.mirror.type: {  stage 17..20: MB0(0..4) } 
  ig_md.ig_ft.ebridge.evlan: {  stage 5..18: H20(0..13) } 
  ig_md.ig_ft.ebridge.is_iif_block: {  stage 4..18: B13(5) } 
  ul_lif_properties_check_usi_states_0: {  stage 5: H22(9) } 
  ig_md.ig_ft.qos.meter_mode: {  stage 5..9: H70(7) } 
  ig_md.ig_ft.qos.acl_meter_index.0-7: {  stage 5..10: B6 } 
  ig_md.ig_ft.qos.acl_meter_index.8-13: {  stage 5..10: H70(1..6) } 
  ig_md.ig_ft.qos.acl_meter_color: {  stage 11..15: B5(3..4) } 
  ig_md.ig_ft.qos.lif_trust_mode: {  stage 4..5: B5(5..7) } 
  ig_md.ig_ft.qos.lif_ds: {  stage 4..5: H71(5..9) } 
  ig_md.ig_ft.qos.lif_meter_index: {  stage 4..13: W37(1..14) } 
  ig_md.ig_ft.qos.is_auto_trust: {  stage 4..15: B35(5) } 
  ig_md.ig_ft.qos.color: {  stage 4..18: H71(0..1) } 
  ig_md.ig_ft.qos.tc: {  stage 4..18: H71(2..4) } 
  ig_md.ig_ft.qos.BA: {  stage 4..18: H6(11) } 
  ig_md.ig_ft.qos.set_dscp: {  stage 12: B6(1) } 
  ig_md.ig_ft.qos.dscp: {  stage 12: B44(2..7) } 
  ig_md.ig_ft.qos.chgDSCP_disable: {  stage 12..18: H36(0) } 
  ig_md.ig_ft.qos.lif_meter_color: {  stage 13..15: B5(1..2) } 
  ig_md.ig_ft.policer.slice1.vag_classid.0-7: {  stage 3: H29(8..15) } 
  ig_md.ig_ft.policer.slice1.vag_classid.8-15: {  stage 3: H69(8..15) } 
  ig_md.ig_ft.policer.slice2.vag_classid: {  stage 3..8: W30(16..31) } 
  ig_md.ig_ft.policer.slice3.vag_classid: {  stage 3..4: W31(16..31) } 
  ig_intr_md_for_dprsr.drop_ctl: {  stage 4..20: W6(2..4) } 
  ig_intr_md_for_dprsr.mirror_type: {  stage 17..20: B1(0..3) } 
  ig_intr_md_for_dprsr.mirror_io_select: {  stage 16..20: H31(0) } 
  ig_intr_md_for_dprsr.drop_ctl.$valid: {  stage 4..20: B10(3) } 
  ig_md.ig_ft.policer.mac_drop: {  stage 5..15: B10(7) } 
  ig_md.ig_ft.policer.behavior_id: {  stage 5..11: W6(5..16) } 
  hdr.ext_srv6.ext_type: {  stage 17..20: B11(5..7) } 
  hdr.ext_srv6.extend: {  stage 18..20: B11(4) } 
  hdr.ext_srv6.bypass_L3: {  stage 7..20: B11(3) } 
  hdr.ext_srv6.level: {  stage 7..20: B11(1..2) } 
  hdr.ext_srv6.is_ecmp: {  stage 7..20: B11(0) } 
  hdr.ext_srv6.priority: {  stage 7..20: W7(24..31) } 
  hdr.ext_srv6.nexthop: {  stage 7..20: W7(8..23) } 
  hdr.ext_srv6.no_frr: {  stage 14..20: W7(7) } 
  hdr.ext_srv6.nexthop_ext: {  stage 7..20: W7(6) } 
  hdr.ext_srv6.is_pf: {  stage 10..20: W7(5) } 
  hdr.ext_srv6.is_endx_pf: {  stage 10..20: W7(4) } 
  hdr.ext_srv6.oam_flag: {  stage 9..20: W7(0..3) } 
  hdr.fabric_qos_encap.data: {  stage 19..20: B29 } 
  ig_intr_md_for_tm.ucast_egress_port: {  stage 1..20: MW9(0..8) } 
  ig_intr_md_for_tm.bypass_egress: {  stage 7..20: B12(6) } 
  ig_intr_md_for_tm.deflect_on_drop: {  stage 16..20: H31(1) } 
  ig_intr_md_for_tm.qid: {  stage 16..20: H30(0..6) } 
  ig_intr_md_for_tm.bypass_egress.$valid: {  stage 7..20: H7(1) } 
  hdr.ext_ifit_encap.ext_type: {  stage 16..20: H22(13..15) } 
  hdr.ext_ifit_encap.extend: {  stage 16..20: H22(12) } 
  hdr.ext_ifit_encap.index: {  stage 9..17: H22(0..11) } 
  hdr.ext_ifit_encap.var_h1: {  stage 16..20: H21 } 
  cpu_egress_port_mapping_fabric_lag_flag: {  stage 9..10: H65(0..6) } 
  ig_intr_md_for_tm.ucast_egress_port.$valid: {  stage 1..20: B10(2) } 
  ig_intr_md_for_tm.qid.$valid: {  stage 16..20: B9(5) } 
  ig_intr_md_for_tm.deflect_on_drop.$valid: {  stage 19..20: H7(2) } 
  ig_intr_md_for_dprsr.mirror_io_select.$valid: {  stage 19..20: H7(3) } 
  hdr.bridged_md_12_encap.decap_len: {  stage 18..20: H24 } 
  hdr.switch_bridged_src.src: {  stage 19..20: B28(5..7) } 
  hdr.switch_bridged_src.bridge_type: {  stage 19..20: B28(0..4) } 
  $tmp11: {  stage 20: B0 } 
  $pad14: {  stage 20: H15(15) } 
  $pad15: {  stage 20: H14(15) } 
  $pad18: {  stage 20: H12(13) } 
  hdr.fabric_trace.$valid: {  stage 7..20: H7(4) } 
  hdr.fabric_base.$valid: B10(4)
  hdr.fabric_data_template_plus.$valid: B13(1)
  hdr.ig_ft.ipv6.$valid: H7(5)
  hdr.ig_ft.udp.$valid: H7(6)
  hdr.ig_ft.vxlan.$valid: H7(7)
  hdr.ig_ft.inner_ethernet.$valid: H7(8)
  hdr.ig_ft.inner_ipv4.$valid: H7(9)
  hdr.ig_ft.inner_ipv6.$valid: H7(10)
  hdr.ig_ft.inner_vlan_tag.$valid: H7(11)
  hdr.ig_ft.srv6_srh.$valid: H7(12)
  hdr.ig_ft.doh_e2e.$valid: H7(13)
  hdr.ig_ft.srv6_e2e_ifit.$valid: H7(14)
  hdr.ig_ft.doh.$valid: H7(15)
  hdr.ig_ft.srv6_h2h_ifit.$valid: B12(0)
  hdr.ext_tunnel_decap.$valid: B13(0)
  hdr.ig_ft.ethernet.$valid: B12(1)
  hdr.ig_ft.ipv4.$valid: B12(2)
  hdr.ig_ft.ipv4_option.$valid: B12(3)
  hdr.ig_ft.br_tag.$valid: {  stage 0..13: B12(4) } 
  hdr.ext_srv6.$valid: {  stage 17..20: B13(2) } 
  hdr.fabric_qos_encap.$valid: {  stage 7..20: B9(6) } 
  hdr.ext_ifit_encap.$valid: {  stage 16..20: B12(5) } 
  hdr.bridged_md_12_encap.$valid: {  stage 19..20: B9(7) } 
  hdr.switch_bridged_src.$valid: {  stage 19..20: B10(5) } 
  hdr.ig_ft.srv6_list.$stkvalid: H6(0..10)
  hdr.ig_ft.srv6_list$0.$valid: {  stage 4..20: H6(10) } 
  hdr.ig_ft.srv6_list$1.$valid: {  stage 4..20: H6(9) } 
  hdr.ig_ft.srv6_list$2.$valid: {  stage 4..20: H6(8) } 
  hdr.ig_ft.srv6_list$3.$valid: {  stage 4..20: H6(7) } 
  hdr.ig_ft.srv6_list$4.$valid: {  stage 4..20: H6(6) } 
  hdr.ig_ft.srv6_list$5.$valid: {  stage 4..20: H6(5) } 
  hdr.ig_ft.srv6_list$6.$valid: {  stage 4..20: H6(4) } 
  hdr.ig_ft.srv6_list$7.$valid: {  stage 4..20: H6(3) } 
  hdr.ig_ft.srv6_list$8.$valid: {  stage 4..20: H6(2) } 
  hdr.ig_ft.srv6_list$9.$valid: {  stage 4..20: H6(1) } 
  hdr.ig_ft.srv6_list$10.$valid: H6(0)
  hdr.ig_ft.vlan_tag.$stkvalid: B10(0..1)
  hdr.ig_ft.vlan_tag$0.$valid: B10(1)
  hdr.ig_ft.vlan_tag$1.$valid: {  stage 1..20: B10(0) } 
  hdr.ig_ft.mpls_ig.$stkvalid: B8
  hdr.ig_ft.mpls_ig$0.$valid: B8(7)
  hdr.ig_ft.mpls_ig$1.$valid: {  stage 5..20: B8(6) } 
  hdr.ig_ft.mpls_ig$2.$valid: {  stage 5..20: B8(5) } 
  hdr.ig_ft.mpls_ig$3.$valid: {  stage 5..20: B8(4) } 
  hdr.ig_ft.mpls_ig$4.$valid: B8(3)
  hdr.ig_ft.mpls2_ig.$stkvalid: B9(0..4)
  hdr.ig_ft.mpls2_ig$0.$valid: {  stage 15..20: B9(4) } 
  hdr.ig_ft.mpls2_ig$1.$valid: {  stage 20: B9(3) } 
  hdr.ig_ft.mpls2_ig$2.$valid: {  stage 20: B9(2) } 
  hdr.ig_ft.mpls2_ig$3.$valid: {  stage 20: B9(1) } 
  hdr.ig_ft.mpls2_ig$4.$valid: B9(0)
  context_json:
    DB8:
    - { name : hdr.ig_ft.srv6_h2h_ifit.reserved3, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    DB12:
    - { name : hdr.ig_ft.doh_e2e.hdr_ext_len, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    DB13:
    - { name : hdr.ig_ft.doh_e2e.next_hdr, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    DH0:
    - { name : ig_md.ig_ft.tunnel.ttl_2, live_start : 6, live_end : 8, mutually_exclusive_with: [  ] }
    DH1:
    - { name : ig_md.ig_ft.tunnel.ttl_3, live_start : 7, live_end : 8, mutually_exclusive_with: [  ] }
    DH2:
    - { name : ig_md.ig_ft.tunnel.ttl_4, live_start : 8, live_end : 8, mutually_exclusive_with: [  ] }
    DH3:
    - { name : ig_md.ig_ft.srv6.g_sid, live_start : 2, live_end : 7, mutually_exclusive_with: [  ] }
    DH8:
    - { name : hdr.ig_ft.doh_e2e.option_type, live_start : 1, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.option_len, live_start : 1, live_end : 16, mutually_exclusive_with: [  ] }
    DH12:
    - { name : ig_md.ig_ft.srv6.g_sid, live_start : 2, live_end : 7, mutually_exclusive_with: [  ] }
    DH13:
    - { name : hdr.ig_ft.mpls_ig$4.label, live_start : 12, live_end : 18, mutually_exclusive_with: [  ] }
    DH14:
    - { name : hdr.ig_ft.mpls_ig$3.label, live_start : 16, live_end : 18, mutually_exclusive_with: [  ] }
    DH16:
    - { name : hdr.fabric_trace.timestamp, live_start : 9, live_end : 9, mutually_exclusive_with: [  ] }
    DH20:
    - { name : ig_intr_md.ingress_port, live_start : 9, live_end : 13, mutually_exclusive_with: [  ] }
    DW0:
    - { name : ig_md.ig_ft.srv6.sid, live_start : 2, live_end : 8, mutually_exclusive_with: [  ] }
    DW1:
    - { name : ig_md.ig_ft.srv6.g_sid, live_start : 2, live_end : 7, mutually_exclusive_with: [  ] }
    DW2:
    - { name : ig_md.ig_ft.srv6.g_sid, live_start : 2, live_end : 7, mutually_exclusive_with: [  ] }
    DW3:
    - { name : ig_md.ig_ft.srv6.g_sid, live_start : 2, live_end : 7, mutually_exclusive_with: [  ] }
    DW4:
    - { name : ig_md.ig_ft.srv6.sid, live_start : 2, live_end : 8, mutually_exclusive_with: [  ] }
    DW5:
    - { name : ig_md.ig_ft.srv6.sid, live_start : 2, live_end : 8, mutually_exclusive_with: [  ] }
    DW8:
    - { name : ig_md.ig_ft.srv6.sid, live_start : 2, live_end : 8, mutually_exclusive_with: [  ] }
    MB0:
    - { name : ig_md.ig_ft.lkp.srv6_ip_proto, live_start : 0, live_end : 1, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.mirror.src, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.mirror.type, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    MB1:
    - { name : ig_md.ig_ft.srv6.next_hdr, live_start : 2, live_end : 14, mutually_exclusive_with: [  ] }
    MB2:
    - { name : ig_md.ig_ft.tunnel.decap_num, live_start : 9, live_end : 9, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.mirror.flags, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    MB4:
    - { name : hdr.ig_ft.srv6_srh.next_hdr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.protocol ] }
    - { name : hdr.ig_ft.ipv4.protocol, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.srv6_srh.next_hdr ] }
    MB5:
    - { name : hdr.ig_ft.doh.next_hdr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.frag_offset ] }
    - { name : hdr.ig_ft.ipv4.frag_offset, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.doh.next_hdr ] }
    MB6:
    - { name : hdr.ig_ft.ipv6.next_hdr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4_option.type ] }
    - { name : hdr.ig_ft.ipv4_option.type, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.next_hdr ] }
    MB7:
    - { name : ig_md.ig_ft.mirror.session_id, live_start : 3, live_end : deparser, mutually_exclusive_with: [  ] }
    MB8:
    - { name : ig_md.ig_ft.srv6.pf_downgrade, live_start : parser, live_end : 8, mutually_exclusive_with: [  ] }
    MB10:
    - { name : ig_md.ig_ft.ifit.hti, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    MB12:
    - { name : ig_md.ig_ft.ifit.loss_label, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    MB13:
    - { name : ig_md.ig_ft.common.src_port, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    MB14:
    - { name : ig_md.ig_ft.ifit.delay_label, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    MB15:
    - { name : ig_md.ig_ft.common.pipeline_location, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    MH0:
    - { name : ig_md.ig_ft.lkp.ip_ttl, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    MH4:
    - { name : ig_md.ig_ft.tunnel.is_ilm_continue, live_start : 6, live_end : 7, mutually_exclusive_with: [ ig_md.ig_ft.tunnel.tmp_oif ] }
    - { name : ig_md.ig_ft.tunnel.tmp_oif, live_start : 7, live_end : 7, mutually_exclusive_with: [ ig_md.ig_ft.tunnel.is_ilm_continue ] }
    MH5:
    - { name : ig_md.ig_ft.tunnel.is_terminate, live_start : 6, live_end : 18, mutually_exclusive_with: [  ] }
    MH6:
    - { name : ig_md.ig_ft.common.eport, live_start : 1, live_end : 2, mutually_exclusive_with: [  ] }
    MH9:
    - { name : ig_md.ig_ft.ipfix.sample_gap, live_start : 3, live_end : 6, mutually_exclusive_with: [  ] }
    MH11:
    - { name : ig_md.ig_ft.common.ether_type, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    MH12:
    - { name : hdr.ig_ft.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.src_addr ] }
    - { name : hdr.ig_ft.ipv4.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr ] }
    MH13:
    - { name : ig_md.ig_ft.lkp.ip_src_addr, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    MH14:
    - { name : hdr.ig_ft.ethernet.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW0:
    - { name : hdr.ig_ft.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.dst_addr ] }
    - { name : hdr.ig_ft.ipv4.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr ] }
    MW1:
    - { name : hdr.ig_ft.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW2:
    - { name : hdr.ig_ft.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW3:
    - { name : hdr.ig_ft.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW5:
    - { name : ig_md.ig_ft.ifit.flow_id, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    MW6:
    - { name : hdr.ig_ft.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW7:
    - { name : hdr.ig_ft.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW8:
    - { name : hdr.ig_ft.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.fabric_from_cpu_eth_ccm.dev_port ] }
    - { name : hdr.fabric_from_cpu_eth_ccm.dev_port, live_start : parser, live_end : 12, mutually_exclusive_with: [ hdr.ig_ft.ipv6.dst_addr ] }
    MW9:
    - { name : ig_intr_md_for_tm.ucast_egress_port, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    MW10:
    - { name : ig_md.ig_ft.ifit.flow_node_id, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    MW11:
    - { name : hdr.fabric_trace.timestamp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW14:
    - { name : hdr.ig_ft.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW15:
    - { name : hdr.ig_ft.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B0:
    - { name : $tmp11, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B1:
    - { name : ig_intr_md_for_dprsr.mirror_type, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    B5:
    - { name : ig_md.ig_ft.mirror.span_flag, live_start : 6, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.acl_meter_color, live_start : 11, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.lif_trust_mode, live_start : 4, live_end : 5, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.lif_meter_color, live_start : 13, live_end : 15, mutually_exclusive_with: [  ] }
    B6:
    - { name : ig_md.ig_ft.mirror.ifit_flag, live_start : 14, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.acl_meter_index, live_start : 5, live_end : 10, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.set_dscp, live_start : 12, live_end : 12, mutually_exclusive_with: [  ] }
    B8:
    - { name : hdr.ig_ft.mpls_ig$4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$0.$valid, live_start : 0, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$1.$valid, live_start : 5, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$2.$valid, live_start : 5, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$3.$valid, live_start : 5, live_end : deparser, mutually_exclusive_with: [  ] }
    B9:
    - { name : ig_intr_md_for_tm.qid.$valid, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos_encap.$valid, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.bridged_md_12_encap.$valid, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls2_ig$4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls2_ig.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls2_ig$0.$valid, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls2_ig$1.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls2_ig$2.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls2_ig$3.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B10:
    - { name : ig_md.ig_ft.srv6.pf_bypass, live_start : 1, live_end : 7, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_dprsr.drop_ctl.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.policer.mac_drop, live_start : 5, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.ucast_egress_port.$valid, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.switch_bridged_src.$valid, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$0.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$1.$valid, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    B11:
    - { name : hdr.ext_srv6.ext_type, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.extend, live_start : 18, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.bypass_L3, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.level, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.is_ecmp, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    B12:
    - { name : ig_md.ig_ft.route.rmac_hit, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.bypass_egress, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_h2h_ifit.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.ipv4_option.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.br_tag.$valid, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_ifit_encap.$valid, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    B13:
    - { name : ig_md.ig_ft.srv6.srh_terminate, live_start : 9, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.from_cpu, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.extend, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.diag, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ebridge.is_iif_block, live_start : 4, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_data_template_plus.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_tunnel_decap.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.$valid, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    B14:
    - { name : hdr.ig_ft.srv6_srh.seg_left, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.flags, hdr.ig_ft.ipv4.frag_offset ] }
    - { name : hdr.ig_ft.ipv4.flags, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.srv6_srh.seg_left ] }
    - { name : hdr.ig_ft.ipv4.frag_offset, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.srv6_srh.seg_left ] }
    B15:
    - { name : hdr.fabric_data_template_plus.flags, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B18:
    - { name : ig_md.ig_ft.lkp.ip_proto, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    B28:
    - { name : hdr.switch_bridged_src.src, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.switch_bridged_src.bridge_type, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    B29:
    - { name : hdr.fabric_qos_encap.data, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    B30:
    - { name : ig_md.ig_ft.common.drop_reason, live_start : 6, live_end : deparser, mutually_exclusive_with: [  ] }
    B31:
    - { name : hdr.ig_ft.srv6_h2h_ifit.reserved3, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_h2h_ifit.reserved3, live_start : 16, live_end : 19, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.type, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    B34:
    - { name : ig_md.ig_ft.srv6.tmp_no_frr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.redirect_recirc, live_start : 14, live_end : 17, mutually_exclusive_with: [  ] }
    B35:
    - { name : ig_md.ig_ft.srv6.sl_flag, live_start : 9, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ifit.endpoint_enable, live_start : 6, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.bridge_type, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.is_auto_trust, live_start : 4, live_end : 15, mutually_exclusive_with: [  ] }
    B36:
    - { name : hdr.fabric_data_template_plus.vb, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B37:
    - { name : ig_md.ig_ft.common.pkt_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.pkt_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.is_mirror, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.is_mcast, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B38:
    - { name : hdr.ext_tunnel_decap.ext_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_tunnel_decap.extend, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_tunnel_decap.sub_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B39:
    - { name : hdr.ext_tunnel_decap.vb, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B40:
    - { name : hdr.ig_ft.ipv6.traffic_class, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.diffserv ] }
    - { name : hdr.ig_ft.ipv6.flow_label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.diffserv ] }
    - { name : hdr.ig_ft.ipv4.diffserv, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.traffic_class, hdr.ig_ft.ipv6.flow_label ] }
    B41:
    - { name : hdr.ig_ft.ipv6.version, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.ipv6.traffic_class, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B44:
    - { name : ig_md.ig_ft.lkp.ip_tos, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.dscp, live_start : 12, live_end : 12, mutually_exclusive_with: [  ] }
    B45:
    - { name : ig_md.ig_ft.lkp.ip_tos, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.next_hdr, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.next_hdr, live_start : 9, live_end : 19, mutually_exclusive_with: [  ] }
    B46:
    - { name : ig_md.ig_ft.lkp.ip_tos, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.hdr_ext_len, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.hdr_ext_len, live_start : 9, live_end : 19, mutually_exclusive_with: [  ] }
    B47:
    - { name : hdr.ig_ft.vxlan.vni, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.srv6_srh.last_entry ] }
    - { name : hdr.ig_ft.srv6_srh.last_entry, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.vxlan.vni ] }
    H0:
    - { name : hdr.ig_ft.ipv6.payload_len, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4.src_addr, hdr.ig_ft.mpls_ig$4.label, hdr.ig_ft.mpls_ig$4.exp, hdr.ig_ft.mpls_ig$4.bos, hdr.ig_ft.mpls_ig$4.ttl ] }
    - { name : hdr.ig_ft.ipv4.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.payload_len, hdr.ig_ft.mpls_ig$4.label, hdr.ig_ft.mpls_ig$4.exp, hdr.ig_ft.mpls_ig$4.bos, hdr.ig_ft.mpls_ig$4.ttl ] }
    - { name : hdr.ig_ft.mpls_ig$4.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.payload_len, hdr.ig_ft.ipv4.src_addr ] }
    - { name : hdr.ig_ft.mpls_ig$4.exp, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.payload_len, hdr.ig_ft.ipv4.src_addr ] }
    - { name : hdr.ig_ft.mpls_ig$4.bos, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.payload_len, hdr.ig_ft.ipv4.src_addr ] }
    - { name : hdr.ig_ft.mpls_ig$4.ttl, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.payload_len, hdr.ig_ft.ipv4.src_addr ] }
    H1:
    - { name : hdr.fabric_data_template_plus.vh2, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.br_tag.ecid ] }
    - { name : hdr.ig_ft.br_tag.ecid, live_start : parser, live_end : 0, mutually_exclusive_with: [ hdr.fabric_data_template_plus.vh2 ] }
    H2:
    - { name : hdr.ig_ft.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv4_option.length, hdr.ig_ft.ipv4_option.value, hdr.ig_ft.mpls_ig$3.label, hdr.ig_ft.mpls_ig$3.exp, hdr.ig_ft.mpls_ig$3.bos, hdr.ig_ft.mpls_ig$3.ttl ] }
    - { name : hdr.ig_ft.ipv4_option.length, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr, hdr.ig_ft.mpls_ig$3.label, hdr.ig_ft.mpls_ig$3.exp, hdr.ig_ft.mpls_ig$3.bos, hdr.ig_ft.mpls_ig$3.ttl ] }
    - { name : hdr.ig_ft.ipv4_option.value, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr, hdr.ig_ft.mpls_ig$3.label, hdr.ig_ft.mpls_ig$3.exp, hdr.ig_ft.mpls_ig$3.bos, hdr.ig_ft.mpls_ig$3.ttl ] }
    - { name : hdr.ig_ft.mpls_ig$3.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr, hdr.ig_ft.ipv4_option.length, hdr.ig_ft.ipv4_option.value ] }
    - { name : hdr.ig_ft.mpls_ig$3.exp, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr, hdr.ig_ft.ipv4_option.length, hdr.ig_ft.ipv4_option.value ] }
    - { name : hdr.ig_ft.mpls_ig$3.bos, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr, hdr.ig_ft.ipv4_option.length, hdr.ig_ft.ipv4_option.value ] }
    - { name : hdr.ig_ft.mpls_ig$3.ttl, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.src_addr, hdr.ig_ft.ipv4_option.length, hdr.ig_ft.ipv4_option.value ] }
    H3:
    - { name : hdr.ig_ft.ipv6.flow_label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.mpls_ig$2.label, hdr.ig_ft.mpls_ig$2.exp, hdr.ig_ft.mpls_ig$2.bos, hdr.ig_ft.mpls_ig$2.ttl ] }
    - { name : hdr.ig_ft.mpls_ig$2.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.flow_label ] }
    - { name : hdr.ig_ft.mpls_ig$2.exp, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.flow_label ] }
    - { name : hdr.ig_ft.mpls_ig$2.bos, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.flow_label ] }
    - { name : hdr.ig_ft.mpls_ig$2.ttl, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.ipv6.flow_label ] }
    H4:
    - { name : hdr.ig_ft.vxlan.vni, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.srv6_h2h_ifit.reserved3, hdr.ig_ft.mpls_ig$1.label, hdr.ig_ft.mpls_ig$1.exp, hdr.ig_ft.mpls_ig$1.bos, hdr.ig_ft.mpls_ig$1.ttl ] }
    - { name : hdr.ig_ft.srv6_h2h_ifit.reserved3, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.vxlan.vni, hdr.ig_ft.mpls_ig$1.label, hdr.ig_ft.mpls_ig$1.exp, hdr.ig_ft.mpls_ig$1.bos, hdr.ig_ft.mpls_ig$1.ttl ] }
    - { name : hdr.ig_ft.mpls_ig$1.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.vxlan.vni, hdr.ig_ft.srv6_h2h_ifit.reserved3 ] }
    - { name : hdr.ig_ft.mpls_ig$1.exp, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.vxlan.vni, hdr.ig_ft.srv6_h2h_ifit.reserved3 ] }
    - { name : hdr.ig_ft.mpls_ig$1.bos, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.vxlan.vni, hdr.ig_ft.srv6_h2h_ifit.reserved3 ] }
    - { name : hdr.ig_ft.mpls_ig$1.ttl, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ig_ft.vxlan.vni, hdr.ig_ft.srv6_h2h_ifit.reserved3 ] }
    H5:
    - { name : hdr.ig_ft.mpls_ig$0.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$0.exp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$0.bos, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$0.ttl, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H6:
    - { name : ig_md.ig_ft.tunnel.inner_pkt_parsed, live_start : 3, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.is_cw, live_start : 8, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.BA, live_start : 4, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$10.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$0.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$1.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$2.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$3.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$4.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$5.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$6.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$7.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$8.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_list$9.$valid, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    H7:
    - { name : ig_intr_md_for_dprsr.mirror_type.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.bypass_egress.$valid, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.deflect_on_drop.$valid, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_dprsr.mirror_io_select.$valid, live_start : 19, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_trace.$valid, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vxlan.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.inner_ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.inner_ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.inner_ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.inner_vlan_tag.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_srh.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.srv6_e2e_ifit.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H8:
    - { name : ig_md.ig_ft.srv6.prefixlen, live_start : 7, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.srv6.ext_flag, live_start : 7, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.flags.ipv4_checksum_err, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.flags.inner_ipv4_checksum_err, live_start : parser, live_end : 10, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.route.ipv6_unicast_enable, live_start : 4, live_end : 11, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.mpls_enable, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.is_ttl_copy, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    H10:
    - { name : ig_md.ig_ft.lkp.ip_src_addr, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    H12:
    - { name : ig_md.ig_ft.flags.tunnel_info, live_start : 13, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.route.vrf, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.ipv4_true, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $pad18, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H13:
    - { name : hdr.fabric_data_template_plus.one, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_data_template_plus.iif, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H14:
    - { name : ig_md.ig_ft.common.ul_iif, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $pad15, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H15:
    - { name : ig_md.ig_ft.common.iif, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $pad14, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H16:
    - { name : ig_md.ig_ft.srv6.tmp_info, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.srv6.sl_minus_flag, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.eport, live_start : 1, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.vpntovpn_flag, live_start : 14, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.mirror.meter_id, live_start : 6, live_end : 6, mutually_exclusive_with: [  ] }
    H17:
    - { name : hdr.fabric_data_template_plus.vh3, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H18:
    - { name : hdr.ext_tunnel_decap.vh, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H19:
    - { name : hdr.fabric_data_template_plus.vh1, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H20:
    - { name : ig_md.ig_ft.lkp.tmp_ipv4_checksum, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.usi, live_start : 3, live_end : 4, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ebridge.evlan, live_start : 5, live_end : 18, mutually_exclusive_with: [  ] }
    H21:
    - { name : hdr.ext_ifit_encap.var_h1, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    H22:
    - { name : ig_md.ig_ft.lkp.mac_src_addr, live_start : 0, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.lkp.ip_frag, live_start : 3, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ifit.index, live_start : 9, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.route.ipv4_unicast_enable, live_start : 4, live_end : 6, mutually_exclusive_with: [  ] }
    - { name : ul_lif_properties_check_usi_states_0, live_start : 5, live_end : 5, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_ifit_encap.ext_type, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_ifit_encap.extend, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_ifit_encap.index, live_start : 9, live_end : 17, mutually_exclusive_with: [  ] }
    H23:
    - { name : hdr.ig_ft.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H24:
    - { name : hdr.bridged_md_12_encap.decap_len, live_start : 18, live_end : deparser, mutually_exclusive_with: [  ] }
    H28:
    - { name : hdr.ig_ft.doh_e2e.option_type, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.option_type, live_start : 17, live_end : 19, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.option_len, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.doh_e2e.option_len, live_start : 17, live_end : 19, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.decap_pre_len, live_start : 1, live_end : 16, mutually_exclusive_with: [  ] }
    H29:
    - { name : ig_md.ig_ft.lkp.tcp_flags, live_start : 0, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.decap_len, live_start : 10, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.policer.slice1.vag_classid, live_start : 3, live_end : 3, mutually_exclusive_with: [  ] }
    H30:
    - { name : ig_md.ig_ft.srv6.is_end_as, live_start : 10, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.is_pre_len_add, live_start : 14, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ipfix.random_num, live_start : 1, live_end : 9, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.qid, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    H31:
    - { name : ig_md.ig_ft.tunnel.source_id, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ipfix.delta, live_start : 5, live_end : 5, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_dprsr.mirror_io_select, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.deflect_on_drop, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    H36:
    - { name : hdr.ig_ft.mpls_ig$4.label, live_start : 0, live_end : 11, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$4.label, live_start : 19, live_end : 19, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.chgDSCP_disable, live_start : 12, live_end : 18, mutually_exclusive_with: [  ] }
    H37:
    - { name : ig_md.ig_ft.flags.drop, live_start : 16, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$3.label, live_start : 0, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.mpls_ig$3.label, live_start : 19, live_end : 19, mutually_exclusive_with: [  ] }
    H38:
    - { name : hdr.ig_ft.mpls_ig$2.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H39:
    - { name : hdr.ig_ft.mpls_ig$1.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H40:
    - { name : hdr.ig_ft.mpls_ig$0.label, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H43:
    - { name : hdr.fabric_trace.trace_counter, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.srv6.end_flag, live_start : 10, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.lkp.l4_port_label_32, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.src_netport_group, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    H52:
    - { name : hdr.fabric_trace.timestamp, live_start : 0, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_trace.timestamp, live_start : 10, live_end : 19, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ipfix.random_flag, live_start : 9, live_end : 9, mutually_exclusive_with: [  ] }
    H53:
    - { name : hdr.fabric_data_template_plus.vh0, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H54:
    - { name : ig_md.ig_ft.ifit.var_h1, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    H55:
    - { name : hdr.ig_ft.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H56:
    - { name : ig_md.ig_ft.common.mirror_dst_eport, live_start : 6, live_end : deparser, mutually_exclusive_with: [  ] }
    H57:
    - { name : ig_md.ig_ft.srv6.lif_type, live_start : 10, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.lkp.l4_port_label_32, live_start : 1, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.trace_vh3, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.evpn_end_type, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    H64:
    - { name : ig_md.ig_ft.lkp.mac_dst_addr, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    H65:
    - { name : ig_intr_md.ingress_port, live_start : 0, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md.ingress_port, live_start : 14, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : cpu_egress_port_mapping_fabric_lag_flag, live_start : 9, live_end : 10, mutually_exclusive_with: [  ] }
    H66:
    - { name : ig_md.ig_ft.lkp.l4_src_port, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    H67:
    - { name : ig_md.ig_ft.lkp.vid, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    H69:
    - { name : hdr.fabric_qos.tc, live_start : parser, live_end : 6, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.color, live_start : parser, live_end : 6, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.track, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ifit.dyna_learn_flag, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ifit.ifit_decap_enable, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.policer.slice1.vag_classid, live_start : 3, live_end : 3, mutually_exclusive_with: [  ] }
    H70:
    - { name : ig_md.ig_ft.common.track, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ipfix.flow_id, live_start : 3, live_end : 9, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.meter_mode, live_start : 5, live_end : 9, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.acl_meter_index, live_start : 5, live_end : 10, mutually_exclusive_with: [  ] }
    H71:
    - { name : ig_md.ig_ft.common.mac_type, live_start : 1, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.lif_ds, live_start : 4, live_end : 5, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.color, live_start : 4, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.tc, live_start : 4, live_end : 18, mutually_exclusive_with: [  ] }
    W0:
    - { name : ig_md.ig_ft.srv6.c_sid, live_start : 8, live_end : 8, mutually_exclusive_with: [ ig_md.ig_ft.tunnel.is_ttl_copy_1, ig_md.ig_ft.tunnel.is_ttl_copy_2, ig_md.ig_ft.tunnel.is_ttl_copy_3 ] }
    - { name : ig_md.ig_ft.tunnel.is_ttl_copy_1, live_start : 6, live_end : 8, mutually_exclusive_with: [ ig_md.ig_ft.srv6.c_sid ] }
    - { name : ig_md.ig_ft.tunnel.is_ttl_copy_2, live_start : 7, live_end : 8, mutually_exclusive_with: [ ig_md.ig_ft.srv6.c_sid ] }
    - { name : ig_md.ig_ft.tunnel.is_ttl_copy_3, live_start : 8, live_end : 8, mutually_exclusive_with: [ ig_md.ig_ft.srv6.c_sid ] }
    W1:
    - { name : ig_md.ig_ft.lkp.ip_src_addr, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    W2:
    - { name : ig_md.ig_ft.lkp.ip_src_addr, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    W3:
    - { name : ig_md.ig_ft.lkp.ip_src_addr, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    W4:
    - { name : ig_md.ig_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W5:
    - { name : ig_md.ig_ft.srv6.args, live_start : 11, live_end : 12, mutually_exclusive_with: [  ] }
    W6:
    - { name : ig_md.ig_ft.srv6.si, live_start : 7, live_end : 9, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.sub_type, live_start : 3, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_dprsr.drop_ctl, live_start : 4, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.policer.behavior_id, live_start : 5, live_end : 11, mutually_exclusive_with: [  ] }
    W7:
    - { name : hdr.ext_srv6.priority, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.nexthop, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.no_frr, live_start : 14, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.nexthop_ext, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.is_pf, live_start : 10, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.is_endx_pf, live_start : 10, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_srv6.oam_flag, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    W10:
    - { name : hdr.ig_ft.vlan_tag$0.pcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$0.cfi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$0.vid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$0.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W11:
    - { name : hdr.ig_ft.vlan_tag$1.pcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$1.cfi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$1.vid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ig_ft.vlan_tag$1.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W13:
    - { name : ig_md.ig_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W14:
    - { name : ig_md.ig_ft.srv6.args, live_start : 11, live_end : 12, mutually_exclusive_with: [  ] }
    W15:
    - { name : ig_md.ig_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W16:
    - { name : ig_md.ig_ft.lkp.mac_dst_addr, live_start : parser, live_end : 15, mutually_exclusive_with: [  ] }
    W17:
    - { name : ig_md.ig_ft.lkp.mac_src_addr, live_start : parser, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.tstamp_flag, live_start : 6, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.bypass_pw, live_start : 6, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.ipfix.count, live_start : 6, live_end : 9, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.mirror.sample_flag, live_start : 9, live_end : 18, mutually_exclusive_with: [  ] }
    W24:
    - { name : ig_md.ig_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W28:
    - { name : ig_md.ig_ft.srv6.global_pf_mode, live_start : 6, live_end : 8, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.lkp.flow_label, live_start : 0, live_end : 3, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.is_vpn_terminate, live_start : 5, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.srv6_flavors, live_start : 5, live_end : 8, mutually_exclusive_with: [  ] }
    W30:
    - { name : ig_md.ig_ft.srv6.end_type, live_start : 5, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.lkp.mac_src_addr, live_start : parser, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.policer.slice2.vag_classid, live_start : 3, live_end : 8, mutually_exclusive_with: [  ] }
    W31:
    - { name : ig_md.ig_ft.lkp.l4_dst_port, live_start : parser, live_end : 11, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.policer.slice3.vag_classid, live_start : 3, live_end : 4, mutually_exclusive_with: [  ] }
    W37:
    - { name : ig_md.ig_ft.common.iif_type, live_start : 1, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.qos.lif_meter_index, live_start : 4, live_end : 13, mutually_exclusive_with: [  ] }
    W38:
    - { name : ig_md.ig_ft.ifit.ifit_enable, live_start : 10, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.common.hash_mode, live_start : 1, live_end : 4, mutually_exclusive_with: [  ] }
    - { name : ig_md.ig_ft.tunnel.urpf_type, live_start : 2, live_end : 15, mutually_exclusive_with: [  ] }
phv egress:
  eg_intr_md_from_prsr.global_tstamp.0-31: {  stage 0..17: MW12 } 
  eg_intr_md_from_prsr.global_tstamp.32-47: {  stage 0..17: H42 } 
  eg_intr_md_for_dprsr.drop_ctl: {  stage 15..20: B16(1..3) } 
  eg_intr_md_for_dprsr.mirror_type: {  stage 16..20: B4(0..3) } 
  eg_intr_md_for_dprsr.mirror_io_select: MH18(0)
  eg_intr_md_for_dprsr.mtu_trunc_len: {  stage 17..20: MH17(0..13) } 
  eg_intr_md_for_dprsr.mirror_io_select.$valid: H9(0)
  eg_intr_md.egress_port: MH16(0..8)
  eg_intr_md.deflection_flag: {  stage 0..17: W36(24) } 
  eg_intr_md.egress_port.$valid: H9(1)
  eg_md.eg_ft.common.mac_type: {  stage 16..17: B2(2..3) } 
  eg_md.eg_ft.common.pkt_length: {  stage 0..16: H25 } 
  eg_md.eg_ft.common.pkt_type: B25(2..7)
  eg_md.eg_ft.common.cpu_eth_encap_id: {  stage 0..16: B42 } 
  eg_md.eg_ft.common.decap_len: {  stage 0: MH8 } 
  eg_md.eg_ft.common.dst_port: B20
  eg_md.eg_ft.common.backpush_dst_port: B21
  eg_md.eg_ft.common.mirror_dst_eport: {  stage 11..20: H51 } 
  eg_md.eg_ft.common.hash: {  stage 0..13: H61, stage 14..17: DH21, stage 18: H61 } 
  eg_md.eg_ft.common.iif: H49(0..14)
  eg_md.eg_ft.common.oif: H50(0..14)
  eg_md.eg_ft.common.from_cpu: {  stage 0..17: W34(6) } 
  eg_md.eg_ft.common.diag: {  stage 0..16: W34(5) } 
  eg_md.eg_ft.common.is_mirror: B25(1)
  eg_md.eg_ft.common.is_mcast: B25(0)
  eg_md.eg_ft.common.track: B24(0)
  eg_md.eg_ft.common.deq_timedelta: MW4
  eg_md.eg_ft.common.ether_type: {  stage 0..14: MH15 } 
  eg_md.eg_ft.common.drop_reason: {  stage 15..20: MB11 } 
  eg_md.eg_ft.common.pipeline_location: {  stage 18..20: B26 } 
  eg_md.eg_ft.common.trace_counter: {  stage 17..20: H62 } 
  eg_md.eg_ft.common.cpu_color: {  stage 15..16: B3(2..3) } 
  eg_md.eg_ft.common.ve_map_miss: {  stage 5..14: H41(13) } 
  eg_md.eg_ft.common.timestamp_delta: {  stage 1: W12 } 
  eg_md.eg_ft.qos.acl_meter_color: {  stage 3..14: B3(0..1) } 
  eg_md.eg_ft.qos.set_dscp: {  stage 13: W19(0) } 
  eg_md.eg_ft.qos.dscp: {  stage 1..13: H35(0..5) } 
  eg_md.eg_ft.qos.qdepth: {  stage 0..5: W29(0..18) } 
  eg_md.eg_ft.qos.tc: B24(5..7)
  eg_md.eg_ft.qos.color: B24(3..4)
  eg_md.eg_ft.qos.q_hi_flag: {  stage 1..13: W33(0) } 
  eg_md.eg_ft.qos.q_lo_flag: {  stage 6..13: B3(6) } 
  eg_md.eg_ft.qos.etm_flag: {  stage 4..13: B3(4) } 
  eg_md.eg_ft.flags.bypass_acl: {  stage 1..13: B43(0) } 
  eg_md.eg_ft.flags.bypass_sec_acl: {  stage 0..13: W34(0) } 
  eg_md.eg_ft.flags.drop: {  stage 0..17: W34(4) } 
  eg_md.eg_ft.lkp.vid: {  stage 4..15: H41(0..11) } 
  eg_md.eg_ft.lkp.ip_src_addr.0-15: {  stage 0..13: H63 } 
  eg_md.eg_ft.lkp.ip_src_addr.16-31: {  stage 0..13: H58 } 
  eg_md.eg_ft.lkp.ip_src_addr.32-63: {  stage 0..12: W18 } 
  eg_md.eg_ft.lkp.ip_src_addr.64-95: {  stage 0..12: W19 } 
  eg_md.eg_ft.lkp.ip_src_addr.96-127: {  stage 0..13: W20 } 
  eg_md.eg_ft.lkp.ip_dst_addr.0-31: {  stage 0..13: W21 } 
  eg_md.eg_ft.lkp.ip_dst_addr.32-63: {  stage 0..13: W22 } 
  eg_md.eg_ft.lkp.ip_dst_addr.64-95: {  stage 0..13: W23 } 
  eg_md.eg_ft.lkp.ip_dst_addr.96-127: {  stage 0..13: W25 } 
  eg_md.eg_ft.lkp.ip_proto: {  stage 0..13: MB3 } 
  eg_md.eg_ft.lkp.l4_src_port: {  stage 0..13: H59 } 
  eg_md.eg_ft.lkp.l4_dst_port: {  stage 0..13: W32(0..15) } 
  eg_md.eg_ft.lkp.l4_port_label_64.0-31: {  stage 0..13: W26 } 
  eg_md.eg_ft.lkp.l4_port_label_64.32-63: {  stage 0..13: W27 } 
  eg_md.eg_ft.lkp.tcp_flags: {  stage 0..13: W35(0..7) } 
  eg_md.eg_ft.lkp.ip_frag: {  stage 0..13: W34(2..3) } 
  eg_md.eg_ft.lkp.tmp_ipv4_checksum: MH7
  eg_md.eg_ft.ebridge.evlan: {  stage 0: W33(0..13), stage 1..15: DW9(0..13), stage 16: W33(0..13) } 
  eg_md.eg_ft.ebridge.encap_vlan_action: {  stage 4..15: W40(8..11) } 
  eg_md.eg_ft.ifit.dyna_learn_flag: {  stage 1..14: B2(1) } 
  eg_md.eg_ft.ifit.ifit_decap_enable: {  stage 0..14: B43(4) } 
  eg_md.eg_ft.ifit.loss_label: {  stage 0..14: B43(3) } 
  eg_md.eg_ft.ifit.delay_stats_flag: {  stage 0..14: B43(2) } 
  eg_md.eg_ft.ifit.index: {  stage 0..14: H68(0..11) } 
  eg_md.eg_ft.ifit.var_h1: {  stage 14..20: H63 } 
  eg_md.eg_ft.ifit.counter_index.0-7: {  stage 1..15: W39(0..7) } 
  eg_md.eg_ft.ifit.counter_index.8-12: {  stage 1..15: B17(2..6) } 
  hdr.eg_ft.ethernet.dst_addr.0-31: W9
  hdr.eg_ft.ethernet.dst_addr.32-47: H48
  hdr.eg_ft.ethernet.src_addr.0-15: H32
  hdr.eg_ft.ethernet.src_addr.16-31: H33
  hdr.eg_ft.ethernet.src_addr.32-47: H60
  hdr.eg_ft.ethernet.ether_type: MH1
  hdr.eg_ft.ipv4.version: H34(12..15)
  hdr.eg_ft.ipv4.ihl: H34(8..11)
  hdr.eg_ft.ipv4.diffserv: H34(0..7)
  hdr.eg_ft.ipv4.hdr_checksum: MH2
  hdr.eg_ft.ipv6.version: H34(12..15)
  hdr.eg_ft.ipv6.traffic_class: H34(4..11)
  hdr.eg_ft.ipv6.flow_label.0-15: {  stage 0: H35, stage 1..13: DH9, stage 14..18: H35 } 
  hdr.eg_ft.ipv6.flow_label.16-19: H34(0..3)
  hdr.eg_ft.vlan_tag$0.pcp: H45(13..15)
  hdr.eg_ft.vlan_tag$0.cfi: H45(12)
  hdr.eg_ft.vlan_tag$0.vid: H45(0..11)
  hdr.eg_ft.vlan_tag$0.ether_type: MH22
  hdr.eg_ft.vlan_tag$1.pcp: H44(13..15)
  hdr.eg_ft.vlan_tag$1.cfi: H44(12)
  hdr.eg_ft.vlan_tag$1.vid: H44(0..11)
  hdr.eg_ft.vlan_tag$1.ether_type: MH21
  hdr.fabric_base.pkt_type: B23(2..7)
  hdr.fabric_base.is_mirror: B23(1)
  hdr.fabric_base.is_mcast: B23(0)
  hdr.fabric_qos.tc: B22(5..7)
  hdr.fabric_qos.color: B22(3..4)
  hdr.fabric_qos.chgDSCP_disable: B22(2)
  hdr.fabric_qos.BA: B22(1)
  hdr.fabric_qos.track: B22(0)
  hdr.fabric_data_template_plus.vh1: MH20
  hdr.fabric_data_template_plus.vh3.0-7: {  stage 0: B33, stage 1..12: DB11, stage 13..18: B33 } 
  hdr.fabric_data_template_plus.one: H11(15)
  hdr.fabric_data_template_plus.iif: H11(0..14)
  hdr.ext_tunnel_decap.vb: {  stage 0: B32, stage 1..12: DB10, stage 13..18: B32 } 
  hdr.ext_tunnel_decap.vh: MH19
  hdr.eg_ft.br_tag.epcp: H47(13..15)
  hdr.eg_ft.br_tag.edei: H47(12)
  hdr.eg_ft.br_tag.ingress_ecid: H47(0..11)
  hdr.eg_ft.br_tag.reserved: W8(30..31)
  hdr.eg_ft.br_tag.grp: W8(28..29)
  hdr.eg_ft.br_tag.ecid: W8(16..27)
  hdr.eg_ft.br_tag.ingress_ecid_ext: W8(8..15)
  hdr.eg_ft.br_tag.ecid_ext: W8(0..7)
  hdr.eg_ft.br_tag.ether_type: MH2
  hdr.eg_ft.ethernet_evpn.ether_type: MH23
  eg_md.eg_ft.policer.slice1.vag_classid: {  stage 1..13: W34(7..22) } 
  eg_md.eg_ft.policer.slice2.vag_classid: {  stage 1..9: W35(8..23) } 
  eg_md.eg_ft.policer.slice3.vag_classid: {  stage 1..2: W32(16..31) } 
  eg_md.eg_ft.mirror.session_id: {  stage 1..20: MB9 } 
  eg_md.eg_ft.mirror.meter_id: {  stage 11: W39(8..17) } 
  eg_md.eg_ft.mirror.sample_flag: {  stage 3..17: B17(1) } 
  eg_md.eg_ft.mirror.span_flag: {  stage 11..17: B2(0) } 
  eg_md.eg_ft.mirror.backpush_flag: {  stage 14..15: W18(0..2) } 
  eg_md.eg_ft.mirror.flags: {  stage 16..20: B27 } 
  eg_md.eg_ft.mirror.src: {  stage 16..20: B19(5..7) } 
  eg_md.eg_ft.mirror.type: {  stage 16..20: B19(0..4) } 
  eg_md.eg_ft.mirror.ifit_flag: {  stage 14..17: H61(0) } 
  eg_md.eg_ft.ipfix.flow_id: {  stage 3..12: W39(18..25) } 
  eg_md.eg_ft.ipfix.sample_gap: {  stage 3..10: MH10 } 
  eg_md.eg_ft.ipfix.random_num: {  stage 1..12: H26 } 
  eg_md.eg_ft.ipfix.count.0-7: {  stage 1..12: B32 } 
  eg_md.eg_ft.ipfix.count.8-15: {  stage 1..12: B33 } 
  eg_md.eg_ft.ipfix.delta: {  stage 11: H27 } 
  eg_md.eg_ft.ipfix.random_flag: {  stage 12: B7(6) } 
  eg_intr_md_for_dprsr.mirror_type.$valid: {  stage 16..20: H9(2) } 
  eg_md.eg_ft.policer.mac_drop: {  stage 3..14: H41(12) } 
  eg_md.eg_ft.policer.behavior_id.0-7: {  stage 3..12: W40(0..7) } 
  eg_md.eg_ft.policer.behavior_id.8-11: {  stage 3..12: B16(4..7) } 
  trace_latency_latency_track: {  stage 1: B3(5) } 
  hdr.fabric_eth_etype.ether_type: {  stage 15..20: MH3 } 
  hdr.fabric_timestamp.timestamp.0-31: {  stage 15..20: MW13 } 
  hdr.fabric_timestamp.timestamp.32-47: {  stage 15..20: H46 } 
  eg_md.eg_ft.tunnel.ptag_igmod: {  stage 1..15: B7(7) } 
  eg_intr_md_for_dprsr.drop_ctl.$valid: {  stage 15..20: B16(0) } 
  eg_intr_md_for_dprsr.mtu_trunc_len.$valid: {  stage 17..20: B7(4) } 
  $pad20: {  stage 20: H50(15) } 
  $pad21: {  stage 20: H49(15) } 
  $pad22: {  stage 20: B24(1..2) } 
  hdr.ext_ifit.$valid: {  stage 0: H9(3) } 
  hdr.eg_ft.ethernet.$valid: H9(4)
  hdr.eg_ft.ipv4.$valid: H9(5)
  hdr.pad.$valid: B7(5)
  hdr.eg_ft.ipv6.$valid: H9(6)
  hdr.eg_ft.ipv6_frag.$valid: H9(7)
  hdr.eg_ft.mpls_vc_eg.$valid: H9(8)
  hdr.fabric_base.$valid: H9(9)
  hdr.fabric_qos.$valid: H9(10)
  hdr.fabric_data_template_plus.$valid: H9(11)
  hdr.ext_tunnel_decap.$valid: H9(12)
  hdr.eg_ft.br_tag.$valid: B17(0)
  hdr.eg_ft.ethernet_evpn.$valid: H9(13)
  hdr.fabric_eth_etype.$valid: {  stage 15..20: H9(14) } 
  hdr.fabric_timestamp.$valid: {  stage 15..20: H9(15) } 
  hdr.eg_ft.vlan_tag.$stkvalid: B7(0..3)
  hdr.eg_ft.vlan_tag$0.$valid: {  stage 2..20: B7(2) } 
  hdr.eg_ft.vlan_tag$1.$valid: B7(1)
  Eg_front.backpush_mirror.hi_check_reg$ena: {  stage 20..0: H41(14) } 
  Eg_front.backpush_mirror.hi_check_reg$index: {  stage 20..0: W40(12..21) } 
  context_json:
    DB10:
    - { name : hdr.ext_tunnel_decap.vb, live_start : 1, live_end : 12, mutually_exclusive_with: [  ] }
    DB11:
    - { name : hdr.fabric_data_template_plus.vh3, live_start : 1, live_end : 12, mutually_exclusive_with: [  ] }
    DH9:
    - { name : hdr.eg_ft.ipv6.flow_label, live_start : 1, live_end : 13, mutually_exclusive_with: [  ] }
    DH21:
    - { name : eg_md.eg_ft.common.hash, live_start : 14, live_end : 17, mutually_exclusive_with: [  ] }
    DW9:
    - { name : eg_md.eg_ft.ebridge.evlan, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    MB3:
    - { name : eg_md.eg_ft.lkp.ip_proto, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    MB9:
    - { name : eg_md.eg_ft.mirror.session_id, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    MB11:
    - { name : eg_md.eg_ft.common.drop_reason, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    MH1:
    - { name : hdr.eg_ft.ethernet.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH2:
    - { name : hdr.eg_ft.ipv4.hdr_checksum, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.br_tag.ether_type ] }
    - { name : hdr.eg_ft.br_tag.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv4.hdr_checksum ] }
    MH3:
    - { name : hdr.fabric_eth_etype.ether_type, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    MH7:
    - { name : eg_md.eg_ft.lkp.tmp_ipv4_checksum, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH8:
    - { name : eg_md.eg_ft.common.decap_len, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    MH10:
    - { name : eg_md.eg_ft.ipfix.sample_gap, live_start : 3, live_end : 10, mutually_exclusive_with: [  ] }
    MH15:
    - { name : eg_md.eg_ft.common.ether_type, live_start : parser, live_end : 14, mutually_exclusive_with: [  ] }
    MH16:
    - { name : eg_intr_md.egress_port, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH17:
    - { name : eg_intr_md_for_dprsr.mtu_trunc_len, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    MH18:
    - { name : eg_intr_md_for_dprsr.mirror_io_select, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH19:
    - { name : hdr.ext_tunnel_decap.vh, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH20:
    - { name : hdr.fabric_data_template_plus.vh1, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH21:
    - { name : hdr.eg_ft.vlan_tag$1.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH22:
    - { name : hdr.eg_ft.vlan_tag$0.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MH23:
    - { name : hdr.eg_ft.ethernet_evpn.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW4:
    - { name : eg_md.eg_ft.common.deq_timedelta, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    MW12:
    - { name : eg_intr_md_from_prsr.global_tstamp, live_start : parser, live_end : 17, mutually_exclusive_with: [  ] }
    MW13:
    - { name : hdr.fabric_timestamp.timestamp, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    B2:
    - { name : eg_md.eg_ft.common.mac_type, live_start : 16, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ifit.dyna_learn_flag, live_start : 1, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.mirror.span_flag, live_start : 11, live_end : 17, mutually_exclusive_with: [  ] }
    B3:
    - { name : eg_md.eg_ft.common.cpu_color, live_start : 15, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.qos.acl_meter_color, live_start : 3, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.qos.q_lo_flag, live_start : 6, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.qos.etm_flag, live_start : 4, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : trace_latency_latency_track, live_start : 1, live_end : 1, mutually_exclusive_with: [  ] }
    B4:
    - { name : eg_intr_md_for_dprsr.mirror_type, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    B7:
    - { name : eg_md.eg_ft.ipfix.random_flag, live_start : 12, live_end : 12, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.tunnel.ptag_igmod, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : eg_intr_md_for_dprsr.mtu_trunc_len.$valid, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.pad.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag$1.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag$0.$valid, live_start : 2, live_end : deparser, mutually_exclusive_with: [  ] }
    B16:
    - { name : eg_intr_md_for_dprsr.drop_ctl, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.policer.behavior_id, live_start : 3, live_end : 12, mutually_exclusive_with: [  ] }
    - { name : eg_intr_md_for_dprsr.drop_ctl.$valid, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    B17:
    - { name : eg_md.eg_ft.ifit.counter_index, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.mirror.sample_flag, live_start : 3, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B19:
    - { name : eg_md.eg_ft.mirror.src, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.mirror.type, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    B20:
    - { name : eg_md.eg_ft.common.dst_port, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B21:
    - { name : eg_md.eg_ft.common.backpush_dst_port, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B22:
    - { name : hdr.fabric_qos.tc, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.color, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.chgDSCP_disable, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.BA, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.track, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B23:
    - { name : hdr.fabric_base.pkt_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.is_mirror, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.is_mcast, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B24:
    - { name : eg_md.eg_ft.common.track, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.qos.tc, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.qos.color, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $pad22, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B25:
    - { name : eg_md.eg_ft.common.pkt_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.common.is_mirror, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.common.is_mcast, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B26:
    - { name : eg_md.eg_ft.common.pipeline_location, live_start : 18, live_end : deparser, mutually_exclusive_with: [  ] }
    B27:
    - { name : eg_md.eg_ft.mirror.flags, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    B32:
    - { name : hdr.ext_tunnel_decap.vb, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_tunnel_decap.vb, live_start : 13, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ipfix.count, live_start : 1, live_end : 12, mutually_exclusive_with: [  ] }
    B33:
    - { name : hdr.fabric_data_template_plus.vh3, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_data_template_plus.vh3, live_start : 13, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ipfix.count, live_start : 1, live_end : 12, mutually_exclusive_with: [  ] }
    B42:
    - { name : eg_md.eg_ft.common.cpu_eth_encap_id, live_start : parser, live_end : 16, mutually_exclusive_with: [  ] }
    B43:
    - { name : eg_md.eg_ft.flags.bypass_acl, live_start : 1, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ifit.ifit_decap_enable, live_start : parser, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ifit.loss_label, live_start : parser, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ifit.delay_stats_flag, live_start : parser, live_end : 14, mutually_exclusive_with: [  ] }
    H9:
    - { name : eg_intr_md_for_dprsr.mirror_io_select.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_intr_md.egress_port.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_intr_md_for_dprsr.mirror_type.$valid, live_start : 16, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_ifit.$valid, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ipv6_frag.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.mpls_vc_eg.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_base.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_qos.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_data_template_plus.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ext_tunnel_decap.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ethernet_evpn.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_eth_etype.$valid, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_timestamp.$valid, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    H11:
    - { name : hdr.fabric_data_template_plus.one, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_data_template_plus.iif, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H25:
    - { name : eg_md.eg_ft.common.pkt_length, live_start : parser, live_end : 16, mutually_exclusive_with: [  ] }
    H26:
    - { name : eg_md.eg_ft.ipfix.random_num, live_start : 1, live_end : 12, mutually_exclusive_with: [  ] }
    H27:
    - { name : eg_md.eg_ft.ipfix.delta, live_start : 11, live_end : 11, mutually_exclusive_with: [  ] }
    H32:
    - { name : hdr.eg_ft.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H33:
    - { name : hdr.eg_ft.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H34:
    - { name : hdr.eg_ft.ipv4.version, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv6.version, hdr.eg_ft.ipv6.traffic_class, hdr.eg_ft.ipv6.flow_label ] }
    - { name : hdr.eg_ft.ipv4.ihl, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv6.version, hdr.eg_ft.ipv6.traffic_class, hdr.eg_ft.ipv6.flow_label ] }
    - { name : hdr.eg_ft.ipv4.diffserv, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv6.version, hdr.eg_ft.ipv6.traffic_class, hdr.eg_ft.ipv6.flow_label ] }
    - { name : hdr.eg_ft.ipv6.version, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv4.version, hdr.eg_ft.ipv4.ihl, hdr.eg_ft.ipv4.diffserv ] }
    - { name : hdr.eg_ft.ipv6.traffic_class, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv4.version, hdr.eg_ft.ipv4.ihl, hdr.eg_ft.ipv4.diffserv ] }
    - { name : hdr.eg_ft.ipv6.flow_label, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.eg_ft.ipv4.version, hdr.eg_ft.ipv4.ihl, hdr.eg_ft.ipv4.diffserv ] }
    H35:
    - { name : eg_md.eg_ft.qos.dscp, live_start : 1, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ipv6.flow_label, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.ipv6.flow_label, live_start : 14, live_end : 18, mutually_exclusive_with: [  ] }
    H41:
    - { name : eg_md.eg_ft.common.ve_map_miss, live_start : 5, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.lkp.vid, live_start : 4, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.policer.mac_drop, live_start : 3, live_end : 14, mutually_exclusive_with: [  ] }
    - { name : Eg_front.backpush_mirror.hi_check_reg$ena, live_start : deparser, live_end : parser, mutually_exclusive_with: [  ] }
    H42:
    - { name : eg_intr_md_from_prsr.global_tstamp, live_start : parser, live_end : 17, mutually_exclusive_with: [  ] }
    H44:
    - { name : hdr.eg_ft.vlan_tag$1.pcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag$1.cfi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag$1.vid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H45:
    - { name : hdr.eg_ft.vlan_tag$0.pcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag$0.cfi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.vlan_tag$0.vid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H46:
    - { name : hdr.fabric_timestamp.timestamp, live_start : 15, live_end : deparser, mutually_exclusive_with: [  ] }
    H47:
    - { name : hdr.eg_ft.br_tag.epcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.edei, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.ingress_ecid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H48:
    - { name : hdr.eg_ft.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H49:
    - { name : eg_md.eg_ft.common.iif, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $pad21, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H50:
    - { name : eg_md.eg_ft.common.oif, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $pad20, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H51:
    - { name : eg_md.eg_ft.common.mirror_dst_eport, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    H58:
    - { name : eg_md.eg_ft.lkp.ip_src_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    H59:
    - { name : eg_md.eg_ft.lkp.l4_src_port, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    H60:
    - { name : hdr.eg_ft.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H61:
    - { name : eg_md.eg_ft.common.hash, live_start : 0, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.common.hash, live_start : 18, live_end : 18, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.mirror.ifit_flag, live_start : 14, live_end : 17, mutually_exclusive_with: [  ] }
    H62:
    - { name : eg_md.eg_ft.common.trace_counter, live_start : 17, live_end : deparser, mutually_exclusive_with: [  ] }
    H63:
    - { name : eg_md.eg_ft.lkp.ip_src_addr, live_start : 0, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ifit.var_h1, live_start : 14, live_end : deparser, mutually_exclusive_with: [  ] }
    H68:
    - { name : eg_md.eg_ft.ifit.index, live_start : parser, live_end : 14, mutually_exclusive_with: [  ] }
    W8:
    - { name : hdr.eg_ft.br_tag.reserved, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.grp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.ecid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.ingress_ecid_ext, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.eg_ft.br_tag.ecid_ext, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W9:
    - { name : hdr.eg_ft.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W12:
    - { name : eg_md.eg_ft.common.timestamp_delta, live_start : 1, live_end : 1, mutually_exclusive_with: [  ] }
    W18:
    - { name : eg_md.eg_ft.lkp.ip_src_addr, live_start : 0, live_end : 12, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.mirror.backpush_flag, live_start : 14, live_end : 15, mutually_exclusive_with: [  ] }
    W19:
    - { name : eg_md.eg_ft.qos.set_dscp, live_start : 13, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.lkp.ip_src_addr, live_start : 0, live_end : 12, mutually_exclusive_with: [  ] }
    W20:
    - { name : eg_md.eg_ft.lkp.ip_src_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W21:
    - { name : eg_md.eg_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W22:
    - { name : eg_md.eg_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W23:
    - { name : eg_md.eg_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W25:
    - { name : eg_md.eg_ft.lkp.ip_dst_addr, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W26:
    - { name : eg_md.eg_ft.lkp.l4_port_label_64, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W27:
    - { name : eg_md.eg_ft.lkp.l4_port_label_64, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    W29:
    - { name : eg_md.eg_ft.qos.qdepth, live_start : parser, live_end : 5, mutually_exclusive_with: [  ] }
    W32:
    - { name : eg_md.eg_ft.lkp.l4_dst_port, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.policer.slice3.vag_classid, live_start : 1, live_end : 2, mutually_exclusive_with: [  ] }
    W33:
    - { name : eg_md.eg_ft.qos.q_hi_flag, live_start : 1, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ebridge.evlan, live_start : 0, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ebridge.evlan, live_start : 16, live_end : 16, mutually_exclusive_with: [  ] }
    W34:
    - { name : eg_md.eg_ft.common.from_cpu, live_start : parser, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.common.diag, live_start : parser, live_end : 16, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.flags.bypass_sec_acl, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.flags.drop, live_start : parser, live_end : 17, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.lkp.ip_frag, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.policer.slice1.vag_classid, live_start : 1, live_end : 13, mutually_exclusive_with: [  ] }
    W35:
    - { name : eg_md.eg_ft.lkp.tcp_flags, live_start : parser, live_end : 13, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.policer.slice2.vag_classid, live_start : 1, live_end : 9, mutually_exclusive_with: [  ] }
    W36:
    - { name : eg_intr_md.deflection_flag, live_start : parser, live_end : 17, mutually_exclusive_with: [  ] }
    W39:
    - { name : eg_md.eg_ft.ifit.counter_index, live_start : 1, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.mirror.meter_id, live_start : 11, live_end : 11, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.ipfix.flow_id, live_start : 3, live_end : 12, mutually_exclusive_with: [  ] }
    W40:
    - { name : eg_md.eg_ft.ebridge.encap_vlan_action, live_start : 4, live_end : 15, mutually_exclusive_with: [  ] }
    - { name : eg_md.eg_ft.policer.behavior_id, live_start : 3, live_end : 12, mutually_exclusive_with: [  ] }
    - { name : Eg_front.backpush_mirror.hi_check_reg$index, live_start : deparser, live_end : parser, mutually_exclusive_with: [  ] }
parser ingress:
  start: $entry_point
  bitwise_or: [ MB4, MB5, B8, B9, B10, B12, B13, B14, B15, B36, B37, B38, B39, B40, B41, B46, B47, H6, H7 ]
  clear_on_write: [ MB0, MB8, MB10, MB12, MB14, MH11, MH13, MH14, MW5, MW10, B18, H10, W1, W2, W3, W4, W13, W15, W24 ]
  hdr_len_adj: 32
  states:
    $entry_point:
      *:
        H7: 1  # value 1 -> H7 bit[0]: ingress::ig_intr_md_for_dprsr.mirror_type.$valid
        load: { byte0 : 8 }
        buf_req: 9
        next: start
    start:
      match: [ byte0 ]
      0x*a:
        0..1: H65  # bit[7..15] -> H65 bit[8..0]: ingress::ig_intr_md.ingress_port
        2..3: H52  # ingress::hdr.fabric_trace.timestamp[47:32].32-47
        4..7: MW11  # ingress::hdr.fabric_trace.timestamp[31:0].0-31
        9: MB8  # bit[79] -> MB8 bit[0]: ingress::ig_md.ig_ft.srv6.pf_downgrade
        shift: 32
        buf_req: 32
        next: parse_signal
      0x*7:
        0..1: H65  # bit[7..15] -> H65 bit[8..0]: ingress::ig_intr_md.ingress_port
        2..3: H52  # ingress::hdr.fabric_trace.timestamp[47:32].32-47
        4..7: MW11  # ingress::hdr.fabric_trace.timestamp[31:0].0-31
        9: MB8  # bit[79] -> MB8 bit[0]: ingress::ig_md.ig_ft.srv6.pf_downgrade
        load: { byte1 : 9 }
        shift: 32
        buf_req: 32
        next: start.$oob_stall_0
      0x**:
        0..1: H65  # bit[7..15] -> H65 bit[8..0]: ingress::ig_intr_md.ingress_port
        2..3: H52  # ingress::hdr.fabric_trace.timestamp[47:32].32-47
        4..7: MW11  # ingress::hdr.fabric_trace.timestamp[31:0].0-31
        9: MB8  # bit[79] -> MB8 bit[0]: ingress::ig_md.ig_ft.srv6.pf_downgrade
        load: { byte1 : 9 }
        shift: 32
        buf_req: 32
        next: start.$oob_stall_1
    parse_signal:
      *:
        priority: 7
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        shift: 14
        buf_req: 14
        next: end
    start.$oob_stall_0:
      *:
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_fabric_recirc
    parse_fabric_recirc:
      match: [ byte0 ]
      0b011100**:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        2: MB8  # bit[23] -> MB8 bit[0]: ingress::ig_md.ig_ft.srv6.pf_downgrade
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        load: { byte1 : 2 }
        shift: 14
        buf_req: 14
        next: parse_ipv6
      0b011111**:
        load: { byte0 : 2 }
        buf_req: 3
        next: parse_fabric_evpn_110
      0b010011**:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        14..15: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        16..19: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        20..21: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        22..25: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        26..27: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        load: { byte0 : 26, byte1 : 27 }
        shift: 28
        buf_req: 28
        next: parse_fabric_2544_pktgen.$split_0
      0x**:
        buf_req: 0
        next: end
    parse_ipv6:
      *:
        0: B41
            # - bit[0..3] -> B41 bit[7..4]: ingress::hdr.ig_ft.ipv6.version
            # - bit[4..7] -> B41 bit[3..0]: ingress::hdr.ig_ft.ipv6.traffic_class[7:4].4-7
        1: B40
            # - bit[8..11] -> B40 bit[7..4]: ingress::hdr.ig_ft.ipv6.traffic_class[3:0].0-3
            # - bit[12..15] -> B40 bit[3..0]: ingress::hdr.ig_ft.ipv6.flow_label[19:16].16-19
        2..3: H3  # ingress::hdr.ig_ft.ipv6.flow_label[15:0].0-15
        4..5: H0  # ingress::hdr.ig_ft.ipv6.payload_len
        6: MB6  # ingress::hdr.ig_ft.ipv6.next_hdr
        6: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        6: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        6..7: MH0  # bit[56..63] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        8..11: MW0  # ingress::hdr.ig_ft.ipv6.src_addr[127:96].96-127
        12..15: MW1  # ingress::hdr.ig_ft.ipv6.src_addr[95:64].64-95
        16..19: MW2  # ingress::hdr.ig_ft.ipv6.src_addr[63:32].32-63
        20..21: MH12  # ingress::hdr.ig_ft.ipv6.src_addr[31:16].16-31
        22..23: H2  # ingress::hdr.ig_ft.ipv6.src_addr[15:0].0-15
        24..27: MW8  # ingress::hdr.ig_ft.ipv6.dst_addr[127:96].96-127
        28..31: MW7  # ingress::hdr.ig_ft.ipv6.dst_addr[95:64].64-95
        clot 27 :
          start: 7
          length: 17
        load: { byte0 : 6 }
        shift: 32
        buf_req: 32
        next: parse_ipv6.$split_0
    parse_ipv6.$split_0:
      match: [ byte0 ]
      0x3a:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        shift: 8
        buf_req: 8
        next: parse_icmp
      0x06:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        shift: 8
        buf_req: 8
        next: parse_tcp
      0x11:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        load: { byte0 : 10, byte1 : 11 }
        shift: 8
        buf_req: 12
        next: parse_udp
      0x8f:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        load: { byte0 : 20, byte1 : 21 }
        shift: 8
        buf_req: 22
        next: parse_inner_ethernet
      0x04:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        load: { byte0 : 8, byte1 : 14, byte2 : 15, byte3 : 17 }
        shift: 8
        buf_req: 18
        next: parse_inner_ipv4
      0x29:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_ipv6
      0x2b:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        shift: 8
        buf_req: 8
        next: parse_srh_check
      0x3c:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        load: { byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_doh
      0x**:
        0..3: MW6  # ingress::hdr.ig_ft.ipv6.dst_addr[63:32].32-63
        4..7: MW3  # ingress::hdr.ig_ft.ipv6.dst_addr[31:0].0-31
        H7: 32  # value 1 -> H7 bit[5]: ingress::hdr.ig_ft.ipv6.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_icmp:
      *:
        0..1: H66  # ingress::ig_md.ig_ft.lkp.l4_src_port
        buf_req: 2
        next: end
    parse_tcp:
      *:
        0..1: H66  # ingress::ig_md.ig_ft.lkp.l4_src_port
        0..3: W31  # bit[16..31] -> W31 bit[15..0]: ingress::ig_md.ig_ft.lkp.l4_dst_port
        12..13: H29  # bit[104..111] -> H29 bit[7..0]: ingress::ig_md.ig_ft.lkp.tcp_flags
        buf_req: 14
        next: end
    parse_udp:
      match: [ byte0, byte1 ]
      value_set IgParser_front.udp_port_vxlan 1:
        handle: 511
        field_mapping:
          hdr.ig_ft.udp.dst_port(0..7) : byte1(0..7)
          hdr.ig_ft.udp.dst_port(8..15) : byte0(0..7)
        0..1: H66  # ingress::ig_md.ig_ft.lkp.l4_src_port
        0..3: W31  # bit[16..31] -> W31 bit[15..0]: ingress::ig_md.ig_ft.lkp.l4_dst_port
        H7: 64  # value 1 -> H7 bit[6]: ingress::hdr.ig_ft.udp.$valid
        clot 17 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: parse_vxlan
      0x****:
        0..1: H66  # ingress::ig_md.ig_ft.lkp.l4_src_port
        0..3: W31  # bit[16..31] -> W31 bit[15..0]: ingress::ig_md.ig_ft.lkp.l4_dst_port
        H7: 64  # value 1 -> H7 bit[6]: ingress::hdr.ig_ft.udp.$valid
        clot 17 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: end
    parse_vxlan:
      *:
        4: B47  # ingress::hdr.ig_ft.vxlan.vni[23:16].16-23
        5..6: H4  # ingress::hdr.ig_ft.vxlan.vni[15:0].0-15
        H7: 128  # value 1 -> H7 bit[7]: ingress::hdr.ig_ft.vxlan.$valid
        clot 18 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: end
    parse_inner_ethernet:
      match: [ byte0, byte1 ]
      0x0800:
        0..1: H64  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[47:32].32-47
        2..5: W16  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[31:0].0-31
        5..8: W17  # bit[48..71] -> W17 bit[23..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[47:24].24-47
        8..9: H22  # bit[72..79] -> H22 bit[7..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[23:16].16-23
        8..11: W30  # bit[80..95] -> W30 bit[15..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[15:0].0-15
        H7: 256  # value 1 -> H7 bit[8]: ingress::hdr.ig_ft.inner_ethernet.$valid
        clot 13 :
          start: 0
          length: 14
        load: { byte0 : 14, byte1 : 20, byte2 : 21, byte3 : 23 }
        shift: 14
        buf_req: 24
        next: parse_inner_ipv4
      0x86dd:
        0..1: H64  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[47:32].32-47
        2..5: W16  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[31:0].0-31
        5..8: W17  # bit[48..71] -> W17 bit[23..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[47:24].24-47
        8..9: H22  # bit[72..79] -> H22 bit[7..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[23:16].16-23
        8..11: W30  # bit[80..95] -> W30 bit[15..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[15:0].0-15
        H7: 256  # value 1 -> H7 bit[8]: ingress::hdr.ig_ft.inner_ethernet.$valid
        clot 13 :
          start: 0
          length: 14
        shift: 14
        buf_req: 14
        next: parse_inner_ipv6
      0x8100:
        0..1: H64  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[47:32].32-47
        2..5: W16  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[31:0].0-31
        5..8: W17  # bit[48..71] -> W17 bit[23..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[47:24].24-47
        8..9: H22  # bit[72..79] -> H22 bit[7..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[23:16].16-23
        8..11: W30  # bit[80..95] -> W30 bit[15..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[15:0].0-15
        H7: 256  # value 1 -> H7 bit[8]: ingress::hdr.ig_ft.inner_ethernet.$valid
        clot 13 :
          start: 0
          length: 14
        load: { byte0 : 16, byte1 : 17 }
        shift: 14
        buf_req: 18
        next: parse_inner_vlan
      0x****:
        0..1: H64  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[47:32].32-47
        2..5: W16  # ingress::ig_md.ig_ft.lkp.mac_dst_addr[31:0].0-31
        5..8: W17  # bit[48..71] -> W17 bit[23..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[47:24].24-47
        8..9: H22  # bit[72..79] -> H22 bit[7..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[23:16].16-23
        8..11: W30  # bit[80..95] -> W30 bit[15..0]: ingress::ig_md.ig_ft.lkp.mac_src_addr[15:0].0-15
        H7: 256  # value 1 -> H7 bit[8]: ingress::hdr.ig_ft.inner_ethernet.$valid
        clot 13 :
          start: 0
          length: 14
        shift: 14
        buf_req: 14
        next: end
    parse_inner_ipv4:
      match: [ byte3, byte0, byte1, byte2 ]
      0b00010001****0101**00000000000000:
        checksum 0:
          type: VERIFY
          mask: [ 0, 1, 2..3, 4..5, 6, 6..7, 8, 9, 10..11, 12..15, 16..19 ]
          swap: 0
          start: 1
          end: 1
          dest: H8(2)
        9: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H7: 512  # value 1 -> H7 bit[9]: ingress::hdr.ig_ft.inner_ipv4.$valid
        clot 1 :
          start: 0
          length: 20
        shift: 20
        buf_req: 20
        next: parse_inner_udp
      0b00000110****0101**00000000000000:
        checksum 0:
          type: VERIFY
          mask: [ 0, 1, 2..3, 4..5, 6, 6..7, 8, 9, 10..11, 12..15, 16..19 ]
          swap: 0
          start: 1
          end: 1
          dest: H8(2)
        9: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H7: 512  # value 1 -> H7 bit[9]: ingress::hdr.ig_ft.inner_ipv4.$valid
        clot 1 :
          start: 0
          length: 20
        shift: 20
        buf_req: 20
        next: parse_inner_tcp
      0x********:
        checksum 0:
          type: VERIFY
          mask: [ 0, 1, 2..3, 4..5, 6, 6..7, 8, 9, 10..11, 12..15, 16..19 ]
          swap: 0
          start: 1
          end: 1
          dest: H8(2)
        9: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H7: 512  # value 1 -> H7 bit[9]: ingress::hdr.ig_ft.inner_ipv4.$valid
        clot 1 :
          start: 0
          length: 20
        shift: 20
        buf_req: 20
        next: end
    parse_inner_udp:
      *:
        0..1: H66  # ingress::ig_md.ig_ft.lkp.l4_src_port
        0..3: W31  # bit[16..31] -> W31 bit[15..0]: ingress::ig_md.ig_ft.lkp.l4_dst_port
        buf_req: 4
        next: end
    parse_inner_tcp:
      *:
        0..1: H66  # ingress::ig_md.ig_ft.lkp.l4_src_port
        0..3: W31  # bit[16..31] -> W31 bit[15..0]: ingress::ig_md.ig_ft.lkp.l4_dst_port
        buf_req: 4
        next: end
    parse_inner_ipv6:
      *:
        0..3: W28  # bit[12..31] -> W28 bit[19..0]: ingress::ig_md.ig_ft.lkp.flow_label
        6: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        8..11: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        12..15: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        16..19: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        20..21: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        22..23: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        24..27: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        28..31: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        H7: 1024  # value 1 -> H7 bit[10]: ingress::hdr.ig_ft.inner_ipv6.$valid
        clot 0 :
          start: 0
          length: 40
        load: { byte0 : 6 }
        shift: 32
        buf_req: 32
        next: parse_inner_ipv6.$split_0
    parse_inner_ipv6.$split_0:
      match: [ byte0 ]
      0x06:
        0..3: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 0 (spilled)
        shift: 8
        buf_req: 8
        next: parse_inner_tcp
      0x11:
        0..3: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 0 (spilled)
        shift: 8
        buf_req: 8
        next: parse_inner_udp
      0x**:
        0..3: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 0 (spilled)
        shift: 8
        buf_req: 8
        next: end
    parse_inner_vlan:
      match: [ byte0, byte1 ]
      0x0800:
        H7: 2048  # value 1 -> H7 bit[11]: ingress::hdr.ig_ft.inner_vlan_tag.$valid
        clot 20 :
          start: 0
          length: 4
        load: { byte0 : 4, byte1 : 10, byte2 : 11, byte3 : 13 }
        shift: 4
        buf_req: 14
        next: parse_inner_ipv4
      0x86dd:
        H7: 2048  # value 1 -> H7 bit[11]: ingress::hdr.ig_ft.inner_vlan_tag.$valid
        clot 20 :
          start: 0
          length: 4
        shift: 4
        buf_req: 4
        next: parse_inner_ipv6
      0x****:
        H7: 2048  # value 1 -> H7 bit[11]: ingress::hdr.ig_ft.inner_vlan_tag.$valid
        clot 20 :
          start: 0
          length: 4
        shift: 4
        buf_req: 4
        next: end
    parse_srh_check:
      match: [ byte1 ]
      0b*******1:
        load: { byte0 : 4 }
        buf_req: 5
        next: parse_srh_downgrade
      0x**:
        0: MB4  # ingress::hdr.ig_ft.srv6_srh.next_hdr
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3: B14  # ingress::hdr.ig_ft.srv6_srh.seg_left
        4: B47  # ingress::hdr.ig_ft.srv6_srh.last_entry
        5: B34  # bit[46] -> B34 bit[1]: ingress::ig_md.ig_ft.srv6.tmp_no_frr
        H7: 4096  # value 1 -> H7 bit[12]: ingress::hdr.ig_ft.srv6_srh.$valid
        clot 19 :
          start: 0
          length: 8
        load: { byte0 : 0, byte1 : 3, byte2 : 4 }
        shift: 8
        buf_req: 8
        next: parse_srh_segment_0
    parse_srh_downgrade:
      match: [ byte0 ]
      0x00:
        0: MB4  # ingress::hdr.ig_ft.srv6_srh.next_hdr
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3: B14  # ingress::hdr.ig_ft.srv6_srh.seg_left
        4: B47  # ingress::hdr.ig_ft.srv6_srh.last_entry
        5: B34  # bit[46] -> B34 bit[1]: ingress::ig_md.ig_ft.srv6.tmp_no_frr
        H7: 4096  # value 1 -> H7 bit[12]: ingress::hdr.ig_ft.srv6_srh.$valid
        clot 19 :
          start: 0
          length: 8
        load: { byte0 : 0 }
        shift: 8
        buf_req: 8
        next: set_active_gsid_dg_and_parse_srh_next_0
      0x**:
        0: MB4  # ingress::hdr.ig_ft.srv6_srh.next_hdr
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3: B14  # ingress::hdr.ig_ft.srv6_srh.seg_left
        4: B47  # ingress::hdr.ig_ft.srv6_srh.last_entry
        5: B34  # bit[46] -> B34 bit[1]: ingress::ig_md.ig_ft.srv6.tmp_no_frr
        H7: 4096  # value 1 -> H7 bit[12]: ingress::hdr.ig_ft.srv6_srh.$valid
        clot 19 :
          start: 0
          length: 8
        load: { byte0 : 0, byte1 : 4 }
        shift: 8
        buf_req: 8
        next: set_active_gsid_dg_0
    set_active_gsid_dg_and_parse_srh_next_0:
      *:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_next_header:
      match: [ byte0 ]
      0x3c:
        load: { byte0 : 2 }
        buf_req: 3
        next: parse_doh_e2e
      0x**:
        buf_req: 0
        next: end
    parse_doh_e2e:
      match: [ byte0 ]
      0x12:
        0: B45  # ingress::hdr.ig_ft.doh_e2e.next_hdr
        1: B46  # ingress::hdr.ig_ft.doh_e2e.hdr_ext_len
        2..3: H28
            # - bit[16..23] -> H28 bit[15..8]: ingress::hdr.ig_ft.doh_e2e.option_type
            # - bit[24..31] -> H28 bit[7..0]: ingress::hdr.ig_ft.doh_e2e.option_len
        H7: 8192  # value 1 -> H7 bit[13]: ingress::hdr.ig_ft.doh_e2e.$valid
        buf_req: 4
        next: parse_srv6_e2e_ifit
      0x**:
        0: B45  # ingress::hdr.ig_ft.doh_e2e.next_hdr
        1: B46  # ingress::hdr.ig_ft.doh_e2e.hdr_ext_len
        2..3: H28
            # - bit[16..23] -> H28 bit[15..8]: ingress::hdr.ig_ft.doh_e2e.option_type
            # - bit[24..31] -> H28 bit[7..0]: ingress::hdr.ig_ft.doh_e2e.option_len
        H7: 8192  # value 1 -> H7 bit[13]: ingress::hdr.ig_ft.doh_e2e.$valid
        buf_req: 4
        next: end
    parse_srv6_e2e_ifit:
      *:
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3..6: MW5  # bit[32..51] -> MW5 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_id
        6: MB12  # bit[52] -> MB12 bit[3]: ingress::ig_md.ig_ft.ifit.loss_label
        6: MB14  # bit[53] -> MB14 bit[2]: ingress::ig_md.ig_ft.ifit.delay_label
        7..10: MW10  # bit[64..83] -> MW10 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_node_id
        11: MB10  # bit[88..89] -> MB10 bit[7..6]: ingress::ig_md.ig_ft.ifit.hti
        H7: 16384  # value 1 -> H7 bit[14]: ingress::hdr.ig_ft.srv6_e2e_ifit.$valid
        clot 14 :
          start: 4
          length: 12
        shift: 16
        buf_req: 16
        next: end
    set_active_gsid_dg_0:
      match: [ byte1 ]
      0x01:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_1
      0x**:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b1
    parse_srh_next_header_dg_1:
      *:
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b1:
      match: [ byte1 ]
      0x02:
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_2
      0x**:
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b2
    parse_srh_next_header_dg_2:
      *:
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b2:
      match: [ byte1 ]
      0x03:
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_3
      0x**:
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b3
    parse_srh_next_header_dg_3:
      *:
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b3:
      match: [ byte1 ]
      0x04:
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_4
      0x**:
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b4
    parse_srh_next_header_dg_4:
      *:
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b4:
      match: [ byte1 ]
      0x05:
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_5
      0x**:
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b5
    parse_srh_next_header_dg_5:
      *:
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b5:
      match: [ byte1 ]
      0x06:
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_6
      0x**:
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b6
    parse_srh_next_header_dg_6:
      *:
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b6:
      match: [ byte1 ]
      0x07:
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_7
      0x**:
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b7
    parse_srh_next_header_dg_7:
      *:
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b7:
      match: [ byte1 ]
      0x08:
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_8
      0x**:
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b8
    parse_srh_next_header_dg_8:
      *:
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b8:
      match: [ byte1 ]
      0x09:
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_dg_9
      0x**:
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_dg_b9
    parse_srh_next_header_dg_9:
      *:
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_dg_b9:
      *:
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header_10
    parse_srh_next_header_10:
      *:
        H6: 1  # value 1 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 2 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_srh_segment_0:
      match: [ byte2, byte1 ]
      0x0001:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0000:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x00**:
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**01:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_1
      0x**00:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_1
      0x****:
        H6: 1024  # value 1024 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 12 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_1
    parse_srh_segment_1:
      match: [ byte2, byte1 ]
      0x0102:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0101:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x01**:
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**02:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_2
      0x**01:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_2
      0x****:
        H6: 512  # value 512 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 11 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_2
    parse_srh_segment_2:
      match: [ byte2, byte1 ]
      0x0203:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0202:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x02**:
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**03:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_3
      0x**02:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_3
      0x****:
        H6: 256  # value 256 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 10 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_3
    parse_srh_segment_3:
      match: [ byte2, byte1 ]
      0x0304:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0303:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x03**:
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**04:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_4
      0x**03:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_4
      0x****:
        H6: 128  # value 128 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 9 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_4
    parse_srh_segment_4:
      match: [ byte2, byte1 ]
      0x0405:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0404:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x04**:
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**05:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_5
      0x**04:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_5
      0x****:
        H6: 64  # value 64 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 8 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_5
    parse_srh_segment_5:
      match: [ byte2, byte1 ]
      0x0506:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0505:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x05**:
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**06:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_6
      0x**05:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_6
      0x****:
        H6: 32  # value 32 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 7 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_6
    parse_srh_segment_6:
      match: [ byte2, byte1 ]
      0x0607:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0606:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x06**:
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**07:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_7
      0x**06:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_7
      0x****:
        H6: 16  # value 16 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 6 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_7
    parse_srh_segment_7:
      match: [ byte2, byte1 ]
      0x0708:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0707:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x07**:
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**08:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_8
      0x**07:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_8
      0x****:
        H6: 8  # value 8 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 5 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_8
    parse_srh_segment_8:
      match: [ byte2, byte1 ]
      0x0809:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0808:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x08**:
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**09:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_9
      0x**08:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_9
      0x****:
        H6: 4  # value 4 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 4 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_9
    parse_srh_segment_9:
      match: [ byte2, byte1 ]
      0x090a:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x0909:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x09**:
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**0a:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_10
      0x**09:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_10
      0x****:
        H6: 2  # value 2 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 3 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_segment_10
    parse_srh_segment_10:
      match: [ byte2, byte1 ]
      0x0a0b:
        0..3: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        4..7: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        8..11: W13  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[63:32].32-63
        12..15: W4  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[31:0].0-31
        H6: 1  # value 1 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 2 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x**0a:
        0..3: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        4..7: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        8..11: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        12..13: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        H6: 1  # value 1 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 2 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
      0x****:
        H6: 1  # value 1 -> H6 bit[10..0]: ingress::hdr.ig_ft.srv6_list.$stkvalid
        clot 2 :
          start: 0
          length: 16
        shift: 16
        buf_req: 16
        next: parse_srh_next_header
    parse_doh:
      match: [ byte0 ]
      0x12:
        0: MB5  # ingress::hdr.ig_ft.doh.next_hdr
        H7: 32768  # value 1 -> H7 bit[15]: ingress::hdr.ig_ft.doh.$valid
        clot 26 :
          start: 1
          length: 3
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_h2h_ifit
      0x**:
        0: MB5  # ingress::hdr.ig_ft.doh.next_hdr
        H7: 32768  # value 1 -> H7 bit[15]: ingress::hdr.ig_ft.doh.$valid
        clot 26 :
          start: 1
          length: 3
        buf_req: 1
        next: end
    parse_h2h_ifit:
      match: [ byte0 ]
      0x2b:
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3..6: MW5  # bit[32..51] -> MW5 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_id
        6: MB12  # bit[52] -> MB12 bit[3]: ingress::ig_md.ig_ft.ifit.loss_label
        6: MB14  # bit[53] -> MB14 bit[2]: ingress::ig_md.ig_ft.ifit.delay_label
        7..10: MW10  # bit[64..83] -> MW10 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_node_id
        11: MB10  # bit[88..89] -> MB10 bit[7..6]: ingress::ig_md.ig_ft.ifit.hti
        13: B31  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:16].16-23
        14..15: H4  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[15:0].0-15
        B12: 1  # value 1 -> B12 bit[0]: ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
        clot 15 :
          start: 4
          length: 9
        shift: 16
        buf_req: 16
        next: parse_srh_check
      0x8f:
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3..6: MW5  # bit[32..51] -> MW5 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_id
        6: MB12  # bit[52] -> MB12 bit[3]: ingress::ig_md.ig_ft.ifit.loss_label
        6: MB14  # bit[53] -> MB14 bit[2]: ingress::ig_md.ig_ft.ifit.delay_label
        7..10: MW10  # bit[64..83] -> MW10 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_node_id
        11: MB10  # bit[88..89] -> MB10 bit[7..6]: ingress::ig_md.ig_ft.ifit.hti
        13: B31  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:16].16-23
        14..15: H4  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[15:0].0-15
        B12: 1  # value 1 -> B12 bit[0]: ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
        clot 15 :
          start: 4
          length: 9
        load: { byte0 : 28, byte1 : 29 }
        shift: 16
        buf_req: 30
        next: parse_inner_ethernet
      0x04:
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3..6: MW5  # bit[32..51] -> MW5 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_id
        6: MB12  # bit[52] -> MB12 bit[3]: ingress::ig_md.ig_ft.ifit.loss_label
        6: MB14  # bit[53] -> MB14 bit[2]: ingress::ig_md.ig_ft.ifit.delay_label
        7..10: MW10  # bit[64..83] -> MW10 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_node_id
        11: MB10  # bit[88..89] -> MB10 bit[7..6]: ingress::ig_md.ig_ft.ifit.hti
        13: B31  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:16].16-23
        14..15: H4  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[15:0].0-15
        B12: 1  # value 1 -> B12 bit[0]: ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
        clot 15 :
          start: 4
          length: 9
        load: { byte0 : 16, byte1 : 22, byte2 : 23, byte3 : 25 }
        shift: 16
        buf_req: 26
        next: parse_inner_ipv4
      0x29:
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3..6: MW5  # bit[32..51] -> MW5 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_id
        6: MB12  # bit[52] -> MB12 bit[3]: ingress::ig_md.ig_ft.ifit.loss_label
        6: MB14  # bit[53] -> MB14 bit[2]: ingress::ig_md.ig_ft.ifit.delay_label
        7..10: MW10  # bit[64..83] -> MW10 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_node_id
        11: MB10  # bit[88..89] -> MB10 bit[7..6]: ingress::ig_md.ig_ft.ifit.hti
        13: B31  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:16].16-23
        14..15: H4  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[15:0].0-15
        B12: 1  # value 1 -> B12 bit[0]: ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
        clot 15 :
          start: 4
          length: 9
        shift: 16
        buf_req: 16
        next: parse_inner_ipv6
      0x**:
        0: MB0  # ingress::ig_md.ig_ft.lkp.srv6_ip_proto
        3..6: MW5  # bit[32..51] -> MW5 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_id
        6: MB12  # bit[52] -> MB12 bit[3]: ingress::ig_md.ig_ft.ifit.loss_label
        6: MB14  # bit[53] -> MB14 bit[2]: ingress::ig_md.ig_ft.ifit.delay_label
        7..10: MW10  # bit[64..83] -> MW10 bit[23..4]: ingress::ig_md.ig_ft.ifit.flow_node_id
        11: MB10  # bit[88..89] -> MB10 bit[7..6]: ingress::ig_md.ig_ft.ifit.hti
        13: B31  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:16].16-23
        14..15: H4  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[15:0].0-15
        B12: 1  # value 1 -> B12 bit[0]: ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
        clot 15 :
          start: 4
          length: 9
        shift: 16
        buf_req: 16
        next: end
    parse_fabric_evpn_110:
      match: [ byte0 ]
      0b1*******:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        shift: 14
        buf_req: 14
        next: parse_extension_tunnel_decap
      0x**:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        load: { byte0 : 26, byte1 : 27 }
        shift: 14
        buf_req: 28
        next: parse_ethernet_evpn110
    parse_extension_tunnel_decap:
      *:
        0: B38
            # - bit[0..2] -> B38 bit[7..5]: ingress::hdr.ext_tunnel_decap.ext_type
            # - bit[3] -> B38 bit[4]: ingress::hdr.ext_tunnel_decap.extend
            # - bit[4..7] -> B38 bit[3..0]: ingress::hdr.ext_tunnel_decap.sub_type
        1: B39  # ingress::hdr.ext_tunnel_decap.vb
        2..3: H18  # ingress::hdr.ext_tunnel_decap.vh
        B13: 1  # value 1 -> B13 bit[0]: ingress::hdr.ext_tunnel_decap.$valid
        load: { byte0 : 16, byte1 : 17 }
        shift: 4
        buf_req: 18
        next: parse_ethernet_evpn110
    parse_ethernet_evpn110:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 16, byte1 : 17 }
        shift: 14
        buf_req: 18
        next: parse_vlan_evpn110
      0x****:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: end
    parse_vlan_evpn110:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_vlan1_evpn110
      0x****:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan1_evpn110:
      *:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_fabric_2544_pktgen.$split_0:
      match: [ byte0, byte1 ]
      0x8100:
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 2, byte1 : 3 }
        buf_req: 4
        next: parse_vlan_2544
      0x****:
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        buf_req: 0
        next: end
    parse_vlan_2544:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_vlan1_2544
      0x****:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan1_2544:
      *:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    start.$oob_stall_1:
      *:
        load: { byte0 : 12, byte2 : 13 }
        buf_req: 14
        next: parse_ethernet
    parse_ethernet:
      match: [ byte0, byte2 ]
      0x0800:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 14 }
        shift: 14
        buf_req: 15
        next: parse_ipv4
      0x86dd:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: parse_ipv6
      0x8100:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 16, byte2 : 17 }
        shift: 14
        buf_req: 18
        next: parse_vlan
      0x8847:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 16, byte1 : 20, byte2 : 24 }
        shift: 14
        buf_req: 25
        next: parse_mpls
      0x893f:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 20, byte2 : 21 }
        shift: 14
        buf_req: 22
        next: parse_1br
      0x9000:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 14 }
        shift: 14
        buf_req: 15
        next: parse_fabric_eth_cpu
      0x88a8:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 16, byte2 : 17 }
        shift: 14
        buf_req: 18
        next: parse_qinq
      0x9100:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 16, byte2 : 17 }
        shift: 14
        buf_req: 18
        next: parse_qinq
      value_set IgParser_front.qinq_tpid 1:
        handle: 510
        field_mapping:
          hdr.ig_ft.ethernet.ether_type(0..7) : byte2(0..7)
          hdr.ig_ft.ethernet.ether_type(8..15) : byte0(0..7)
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        load: { byte0 : 16, byte2 : 17 }
        shift: 14
        buf_req: 18
        next: parse_qinq
      0x****:
        0..1: H23  # ingress::hdr.ig_ft.ethernet.dst_addr[47:32].32-47
        2..5: MW15  # ingress::hdr.ig_ft.ethernet.dst_addr[31:0].0-31
        6..7: H55  # ingress::hdr.ig_ft.ethernet.src_addr[47:32].32-47
        8..11: MW14  # ingress::hdr.ig_ft.ethernet.src_addr[31:0].0-31
        12..13: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        12..13: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B12: 2  # value 1 -> B12 bit[1]: ingress::hdr.ig_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: end
    parse_ipv4:
      match: [ byte0 ]
      0x*5:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: H20
          end_pos: 19
        checksum 1:
          type: VERIFY
          mask: [ 0, 1, 2..3, 4..5, 6, 6..7, 8, 9, 10..11, 12..15, 16..19 ]
          swap: 0
          start: 1
          end: 0
        1: B40  # ingress::hdr.ig_ft.ipv4.diffserv
        6: B14
            # - bit[48..50] -> B14 bit[7..5]: ingress::hdr.ig_ft.ipv4.flags
            # - bit[51..55] -> B14 bit[4..0]: ingress::hdr.ig_ft.ipv4.frag_offset[12:8].8-12
        7: MB5  # ingress::hdr.ig_ft.ipv4.frag_offset[7:0].0-7
        7..8: MH0  # bit[64..71] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        9: MB4  # ingress::hdr.ig_ft.ipv4.protocol
        9: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        12..13: MH12  # ingress::hdr.ig_ft.ipv4.src_addr[31:16].16-31
        14..15: H0  # ingress::hdr.ig_ft.ipv4.src_addr[15:0].0-15
        16..19: MW0  # ingress::hdr.ig_ft.ipv4.dst_addr
        B12: 4  # value 1 -> B12 bit[2]: ingress::hdr.ig_ft.ipv4.$valid
        clot 16 :
          start: 0
          length: 20
        load: { byte0 : 6, byte1 : 7, byte2 : 9 }
        shift: 20
        buf_req: 20
        next: parse_ipv4_no_options
      0x*6:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: H20
          end_pos: 19
        checksum 1:
          type: VERIFY
          mask: [ 0, 1, 2..3, 4..5, 6, 6..7, 8, 9, 10..11, 12..15, 16..19 ]
          swap: 0
          start: 1
          end: 0
        1: B40  # ingress::hdr.ig_ft.ipv4.diffserv
        6: B14
            # - bit[48..50] -> B14 bit[7..5]: ingress::hdr.ig_ft.ipv4.flags
            # - bit[51..55] -> B14 bit[4..0]: ingress::hdr.ig_ft.ipv4.frag_offset[12:8].8-12
        7: MB5  # ingress::hdr.ig_ft.ipv4.frag_offset[7:0].0-7
        7..8: MH0  # bit[64..71] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        9: MB4  # ingress::hdr.ig_ft.ipv4.protocol
        9: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        12..13: MH12  # ingress::hdr.ig_ft.ipv4.src_addr[31:16].16-31
        14..15: H0  # ingress::hdr.ig_ft.ipv4.src_addr[15:0].0-15
        16..19: MW0  # ingress::hdr.ig_ft.ipv4.dst_addr
        B12: 4  # value 1 -> B12 bit[2]: ingress::hdr.ig_ft.ipv4.$valid
        clot 16 :
          start: 0
          length: 20
        load: { byte0 : 6, byte1 : 7, byte2 : 9 }
        shift: 20
        buf_req: 20
        next: parse_ipv4_options
      0x**:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: H20
          end_pos: 19
        checksum 1:
          type: VERIFY
          mask: [ 0, 1, 2..3, 4..5, 6, 6..7, 8, 9, 10..11, 12..15, 16..19 ]
          swap: 0
          start: 1
          end: 0
        1: B40  # ingress::hdr.ig_ft.ipv4.diffserv
        6: B14
            # - bit[48..50] -> B14 bit[7..5]: ingress::hdr.ig_ft.ipv4.flags
            # - bit[51..55] -> B14 bit[4..0]: ingress::hdr.ig_ft.ipv4.frag_offset[12:8].8-12
        7: MB5  # ingress::hdr.ig_ft.ipv4.frag_offset[7:0].0-7
        7..8: MH0  # bit[64..71] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        9: MB4  # ingress::hdr.ig_ft.ipv4.protocol
        9: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        12..13: MH12  # ingress::hdr.ig_ft.ipv4.src_addr[31:16].16-31
        14..15: H0  # ingress::hdr.ig_ft.ipv4.src_addr[15:0].0-15
        16..19: MW0  # ingress::hdr.ig_ft.ipv4.dst_addr
        B12: 4  # value 1 -> B12 bit[2]: ingress::hdr.ig_ft.ipv4.$valid
        clot 16 :
          start: 0
          length: 20
        shift: 20
        buf_req: 20
        next: end
    parse_ipv4_no_options:
      match: [ byte2, byte0, byte1 ]
      0b00000001***0000000000000:
        checksum 1:
          type: VERIFY
          mask: [  ]
          swap: 0
          start: 0
          end: 1
          dest: H8(1)
        buf_req: 0
        next: parse_icmp
      0b00000110***0000000000000:
        checksum 1:
          type: VERIFY
          mask: [  ]
          swap: 0
          start: 0
          end: 1
          dest: H8(1)
        buf_req: 0
        next: parse_tcp
      0b00010001***0000000000000:
        checksum 1:
          type: VERIFY
          mask: [  ]
          swap: 0
          start: 0
          end: 1
          dest: H8(1)
        load: { byte0 : 2, byte1 : 3 }
        buf_req: 4
        next: parse_udp
      0x******:
        checksum 1:
          type: VERIFY
          mask: [  ]
          swap: 0
          start: 0
          end: 1
          dest: H8(1)
        buf_req: 0
        next: end
    parse_ipv4_options:
      *:
        checksum 1:
          type: VERIFY
          mask: [ 0, 1, 2..3 ]
          swap: 0
          start: 0
          end: 0
        0: MB6  # ingress::hdr.ig_ft.ipv4_option.type
        1..2: H2
            # - bit[8..15] -> H2 bit[15..8]: ingress::hdr.ig_ft.ipv4_option.length
            # - bit[16..23] -> H2 bit[7..0]: ingress::hdr.ig_ft.ipv4_option.value[15:8].8-15
        B12: 8  # value 1 -> B12 bit[3]: ingress::hdr.ig_ft.ipv4_option.$valid
        clot 28 :
          start: 3
          length: 1
        shift: 4
        buf_req: 4
        next: parse_ipv4_no_options
    parse_vlan:
      match: [ byte0, byte2 ]
      0x0800:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_ipv4
      0x8100:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        load: { byte0 : 6, byte2 : 7 }
        shift: 4
        buf_req: 8
        next: parse_vlan_1
      0x86dd:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8847:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        load: { byte0 : 6, byte1 : 10, byte2 : 14 }
        shift: 4
        buf_req: 15
        next: parse_mpls
      0x****:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan_1:
      match: [ byte0, byte2 ]
      0x0800:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_ipv4
      0x86dd:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8847:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        load: { byte0 : 6, byte1 : 10, byte2 : 14 }
        shift: 4
        buf_req: 15
        next: parse_mpls
      0x8100:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
      0x****:
        0..3: W11
            # - bit[0..2] -> W11 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp
            # - bit[3] -> W11 bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi
            # - bit[4..15] -> W11 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid
            # - bit[16..31] -> W11 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type
        2..3: MH11  # ingress::ig_md.ig_ft.common.ether_type
        B10: 1  # value 1 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls:
      match: [ byte0, byte1, byte2 ]
      0b*******0*******0*******0:
        0..1: H40  # ingress::hdr.ig_ft.mpls_ig[0].label[19:4].4-19
        2..3: H5
            # - bit[16..19] -> H5 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[0].label[3:0].0-3
            # - bit[20..22] -> H5 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[0].exp
            # - bit[23] -> H5 bit[8]: ingress::hdr.ig_ft.mpls_ig[0].bos
            # - bit[24..31] -> H5 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[0].ttl
        2..3: MH0  # bit[24..31] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        B8: 128  # value 128 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 14, byte1 : 18, byte2 : 22 }
        shift: 4
        buf_req: 23
        next: parse_mpls3_or_more
      0b*******0*******0*******1:
        0..1: H40  # ingress::hdr.ig_ft.mpls_ig[0].label[19:4].4-19
        2..3: H5
            # - bit[16..19] -> H5 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[0].label[3:0].0-3
            # - bit[20..22] -> H5 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[0].exp
            # - bit[23] -> H5 bit[8]: ingress::hdr.ig_ft.mpls_ig[0].bos
            # - bit[24..31] -> H5 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[0].ttl
        2..3: MH0  # bit[24..31] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        B8: 128  # value 128 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_mpls2
      0b*******0*******1********:
        0..1: H40  # ingress::hdr.ig_ft.mpls_ig[0].label[19:4].4-19
        2..3: H5
            # - bit[16..19] -> H5 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[0].label[3:0].0-3
            # - bit[20..22] -> H5 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[0].exp
            # - bit[23] -> H5 bit[8]: ingress::hdr.ig_ft.mpls_ig[0].bos
            # - bit[24..31] -> H5 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[0].ttl
        2..3: MH0  # bit[24..31] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        B8: 128  # value 128 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_mpls1
      0x******:
        0..1: H40  # ingress::hdr.ig_ft.mpls_ig[0].label[19:4].4-19
        2..3: H5
            # - bit[16..19] -> H5 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[0].label[3:0].0-3
            # - bit[20..22] -> H5 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[0].exp
            # - bit[23] -> H5 bit[8]: ingress::hdr.ig_ft.mpls_ig[0].bos
            # - bit[24..31] -> H5 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[0].ttl
        2..3: MH0  # bit[24..31] -> MH0 bit[7..0]: ingress::ig_md.ig_ft.lkp.ip_ttl
        B8: 128  # value 128 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
    parse_mpls3_or_more:
      match: [ byte0, byte1, byte2 ]
      0b*******0*******0*******0:
        0..1: H39  # ingress::hdr.ig_ft.mpls_ig[1].label[19:4].4-19
        2..3: H4
            # - bit[16..19] -> H4 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label[3:0].0-3
            # - bit[20..22] -> H4 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp
            # - bit[23] -> H4 bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos
            # - bit[24..31] -> H4 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl
        4..5: H38  # ingress::hdr.ig_ft.mpls_ig[2].label[19:4].4-19
        6..7: H3
            # - bit[48..51] -> H3 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[2].label[3:0].0-3
            # - bit[52..54] -> H3 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[2].exp
            # - bit[55] -> H3 bit[8]: ingress::hdr.ig_ft.mpls_ig[2].bos
            # - bit[56..63] -> H3 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[2].ttl
        8..9: H37  # ingress::hdr.ig_ft.mpls_ig[3].label[19:4].4-19
        10..11: H2
            # - bit[80..83] -> H2 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[3].label[3:0].0-3
            # - bit[84..86] -> H2 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[3].exp
            # - bit[87] -> H2 bit[8]: ingress::hdr.ig_ft.mpls_ig[3].bos
            # - bit[88..95] -> H2 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[3].ttl
        B8: 112
            # - value 64 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 32 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 16 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 22, byte1 : 26, byte2 : 30 }
        shift: 12
        buf_req: 31
        next: parse_mpls6_or_more
      0b*******0*******0*******1:
        0..1: H39  # ingress::hdr.ig_ft.mpls_ig[1].label[19:4].4-19
        2..3: H4
            # - bit[16..19] -> H4 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label[3:0].0-3
            # - bit[20..22] -> H4 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp
            # - bit[23] -> H4 bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos
            # - bit[24..31] -> H4 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl
        4..5: H38  # ingress::hdr.ig_ft.mpls_ig[2].label[19:4].4-19
        6..7: H3
            # - bit[48..51] -> H3 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[2].label[3:0].0-3
            # - bit[52..54] -> H3 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[2].exp
            # - bit[55] -> H3 bit[8]: ingress::hdr.ig_ft.mpls_ig[2].bos
            # - bit[56..63] -> H3 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[2].ttl
        8..9: H37  # ingress::hdr.ig_ft.mpls_ig[3].label[19:4].4-19
        10..11: H2
            # - bit[80..83] -> H2 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[3].label[3:0].0-3
            # - bit[84..86] -> H2 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[3].exp
            # - bit[87] -> H2 bit[8]: ingress::hdr.ig_ft.mpls_ig[3].bos
            # - bit[88..95] -> H2 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[3].ttl
        B8: 112
            # - value 64 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 32 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 16 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        shift: 12
        buf_req: 12
        next: parse_mpls5
      0b*******0*******1********:
        0..1: H39  # ingress::hdr.ig_ft.mpls_ig[1].label[19:4].4-19
        2..3: H4
            # - bit[16..19] -> H4 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label[3:0].0-3
            # - bit[20..22] -> H4 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp
            # - bit[23] -> H4 bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos
            # - bit[24..31] -> H4 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl
        4..5: H38  # ingress::hdr.ig_ft.mpls_ig[2].label[19:4].4-19
        6..7: H3
            # - bit[48..51] -> H3 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[2].label[3:0].0-3
            # - bit[52..54] -> H3 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[2].exp
            # - bit[55] -> H3 bit[8]: ingress::hdr.ig_ft.mpls_ig[2].bos
            # - bit[56..63] -> H3 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[2].ttl
        8..9: H37  # ingress::hdr.ig_ft.mpls_ig[3].label[19:4].4-19
        10..11: H2
            # - bit[80..83] -> H2 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[3].label[3:0].0-3
            # - bit[84..86] -> H2 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[3].exp
            # - bit[87] -> H2 bit[8]: ingress::hdr.ig_ft.mpls_ig[3].bos
            # - bit[88..95] -> H2 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[3].ttl
        B8: 112
            # - value 64 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 32 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 16 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        shift: 12
        buf_req: 12
        next: parse_mpls4
      0x******:
        0..1: H39  # ingress::hdr.ig_ft.mpls_ig[1].label[19:4].4-19
        2..3: H4
            # - bit[16..19] -> H4 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label[3:0].0-3
            # - bit[20..22] -> H4 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp
            # - bit[23] -> H4 bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos
            # - bit[24..31] -> H4 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl
        4..5: H38  # ingress::hdr.ig_ft.mpls_ig[2].label[19:4].4-19
        6..7: H3
            # - bit[48..51] -> H3 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[2].label[3:0].0-3
            # - bit[52..54] -> H3 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[2].exp
            # - bit[55] -> H3 bit[8]: ingress::hdr.ig_ft.mpls_ig[2].bos
            # - bit[56..63] -> H3 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[2].ttl
        8..9: H37  # ingress::hdr.ig_ft.mpls_ig[3].label[19:4].4-19
        10..11: H2
            # - bit[80..83] -> H2 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[3].label[3:0].0-3
            # - bit[84..86] -> H2 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[3].exp
            # - bit[87] -> H2 bit[8]: ingress::hdr.ig_ft.mpls_ig[3].bos
            # - bit[88..95] -> H2 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[3].ttl
        B8: 112
            # - value 64 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 32 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 16 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 12 }
        shift: 12
        buf_req: 13
        next: parse_mpls_bos
    parse_mpls6_or_more:
      match: [ byte0, byte1, byte2 ]
      0b*******0*******0*******0:
        0..1: H36  # ingress::hdr.ig_ft.mpls_ig[4].label[19:4].4-19
        2..3: H0
            # - bit[16..19] -> H0 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label[3:0].0-3
            # - bit[20..22] -> H0 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp
            # - bit[23] -> H0 bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos
            # - bit[24..31] -> H0 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl
        B8: 8  # value 8 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        B9: 24
            # - value 16 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 8 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 25 :
          start: 4
          length: 4
        clot 24 :
          start: 8
          length: 4
        shift: 12
        buf_req: 12
        next: parse_mpls10_or_more
      0b*******0*******0*******1:
        0..1: H36  # ingress::hdr.ig_ft.mpls_ig[4].label[19:4].4-19
        2..3: H0
            # - bit[16..19] -> H0 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label[3:0].0-3
            # - bit[20..22] -> H0 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp
            # - bit[23] -> H0 bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos
            # - bit[24..31] -> H0 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl
        B8: 8  # value 8 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        B9: 24
            # - value 16 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 8 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 25 :
          start: 4
          length: 4
        clot 24 :
          start: 8
          length: 4
        shift: 12
        buf_req: 12
        next: parse_mpls9
      0b*******0*******1********:
        0..1: H36  # ingress::hdr.ig_ft.mpls_ig[4].label[19:4].4-19
        2..3: H0
            # - bit[16..19] -> H0 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label[3:0].0-3
            # - bit[20..22] -> H0 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp
            # - bit[23] -> H0 bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos
            # - bit[24..31] -> H0 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl
        B8: 8  # value 8 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        B9: 24
            # - value 16 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 8 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 25 :
          start: 4
          length: 4
        clot 24 :
          start: 8
          length: 4
        shift: 12
        buf_req: 12
        next: parse_mpls8
      0x******:
        0..1: H36  # ingress::hdr.ig_ft.mpls_ig[4].label[19:4].4-19
        2..3: H0
            # - bit[16..19] -> H0 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label[3:0].0-3
            # - bit[20..22] -> H0 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp
            # - bit[23] -> H0 bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos
            # - bit[24..31] -> H0 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl
        B8: 8  # value 8 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        B9: 24
            # - value 16 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 8 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 25 :
          start: 4
          length: 4
        clot 24 :
          start: 8
          length: 4
        load: { byte0 : 12 }
        shift: 12
        buf_req: 13
        next: parse_mpls_bos
    parse_mpls10_or_more:
      *:
        B9: 7
            # - value 4 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 2 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 1 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 23 :
          start: 0
          length: 4
        clot 22 :
          start: 4
          length: 4
        load: { byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_mpls10_or_more.$split_0
    parse_mpls10_or_more.$split_0:
      match: [ byte0 ]
      0b*******1:
        clot 21 :
          start: 0
          length: 4
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        clot 21 :
          start: 0
          length: 4
        shift: 4
        buf_req: 4
        next: end
    parse_mpls_bos:
      match: [ byte0 ]
      0x4*:
        load: { byte0 : 0, byte1 : 6, byte2 : 7, byte3 : 9 }
        buf_req: 10
        next: parse_inner_ipv4
      0x6*:
        0..3: W28  # bit[12..31] -> W28 bit[19..0]: ingress::ig_md.ig_ft.lkp.flow_label
        6: B18  # ingress::ig_md.ig_ft.lkp.ip_proto
        8..11: W1  # ingress::ig_md.ig_ft.lkp.ip_src_addr[127:96].96-127
        12..15: W2  # ingress::ig_md.ig_ft.lkp.ip_src_addr[95:64].64-95
        16..19: W3  # ingress::ig_md.ig_ft.lkp.ip_src_addr[63:32].32-63
        20..21: MH13  # ingress::ig_md.ig_ft.lkp.ip_src_addr[31:16].16-31
        22..23: H10  # ingress::ig_md.ig_ft.lkp.ip_src_addr[15:0].0-15
        24..27: W24  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[127:96].96-127
        28..31: W15  # ingress::ig_md.ig_ft.lkp.ip_dst_addr[95:64].64-95
        H7: 1024  # value 1 -> H7 bit[10]: ingress::hdr.ig_ft.inner_ipv6.$valid
        clot 0 :
          start: 0
          length: 40
        load: { byte0 : 6 }
        shift: 32
        buf_req: 32
        next: parse_inner_ipv6.$split_0
      0x**:
        load: { byte0 : 12, byte1 : 13 }
        buf_req: 14
        next: parse_inner_ethernet
    parse_mpls9:
      *:
        B9: 6
            # - value 4 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
            # - value 2 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 23 :
          start: 0
          length: 4
        clot 22 :
          start: 4
          length: 4
        load: { byte0 : 8 }
        shift: 8
        buf_req: 9
        next: parse_mpls_bos
    parse_mpls8:
      *:
        B9: 4  # value 4 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 23 :
          start: 0
          length: 4
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
    parse_mpls5:
      *:
        0..1: H36  # ingress::hdr.ig_ft.mpls_ig[4].label[19:4].4-19
        2..3: H0
            # - bit[16..19] -> H0 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label[3:0].0-3
            # - bit[20..22] -> H0 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp
            # - bit[23] -> H0 bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos
            # - bit[24..31] -> H0 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl
        B8: 8  # value 8 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        B9: 16  # value 16 -> B9 bit[4..0]: ingress::hdr.ig_ft.mpls2_ig.$stkvalid
        clot 25 :
          start: 4
          length: 4
        load: { byte0 : 8 }
        shift: 8
        buf_req: 9
        next: parse_mpls_bos
    parse_mpls4:
      *:
        0..1: H36  # ingress::hdr.ig_ft.mpls_ig[4].label[19:4].4-19
        2..3: H0
            # - bit[16..19] -> H0 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label[3:0].0-3
            # - bit[20..22] -> H0 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp
            # - bit[23] -> H0 bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos
            # - bit[24..31] -> H0 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl
        B8: 8  # value 8 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
    parse_mpls2:
      *:
        0..1: H39  # ingress::hdr.ig_ft.mpls_ig[1].label[19:4].4-19
        2..3: H4
            # - bit[16..19] -> H4 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label[3:0].0-3
            # - bit[20..22] -> H4 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp
            # - bit[23] -> H4 bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos
            # - bit[24..31] -> H4 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl
        4..5: H38  # ingress::hdr.ig_ft.mpls_ig[2].label[19:4].4-19
        6..7: H3
            # - bit[48..51] -> H3 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[2].label[3:0].0-3
            # - bit[52..54] -> H3 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[2].exp
            # - bit[55] -> H3 bit[8]: ingress::hdr.ig_ft.mpls_ig[2].bos
            # - bit[56..63] -> H3 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[2].ttl
        B8: 96
            # - value 64 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
            # - value 32 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 8 }
        shift: 8
        buf_req: 9
        next: parse_mpls_bos
    parse_mpls1:
      *:
        0..1: H39  # ingress::hdr.ig_ft.mpls_ig[1].label[19:4].4-19
        2..3: H4
            # - bit[16..19] -> H4 bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label[3:0].0-3
            # - bit[20..22] -> H4 bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp
            # - bit[23] -> H4 bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos
            # - bit[24..31] -> H4 bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl
        B8: 64  # value 64 -> B8 bit[7..0]: ingress::hdr.ig_ft.mpls_ig.$stkvalid
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
    parse_1br:
      match: [ byte0, byte2 ]
      0x0800:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        load: { byte0 : 8 }
        shift: 8
        buf_req: 9
        next: parse_ipv4
      0x86dd:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        shift: 8
        buf_req: 8
        next: parse_ipv6
      0x8100:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        load: { byte0 : 10, byte2 : 11 }
        shift: 8
        buf_req: 12
        next: parse_vlan
      0x8847:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        load: { byte0 : 10, byte1 : 14, byte2 : 18 }
        shift: 8
        buf_req: 19
        next: parse_mpls
      0x88a8:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        load: { byte0 : 10, byte2 : 11 }
        shift: 8
        buf_req: 12
        next: parse_qinq
      0x9100:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        load: { byte0 : 10, byte2 : 11 }
        shift: 8
        buf_req: 12
        next: parse_qinq
      value_set IgParser_front.qinq_tpid 1:
        handle: 510
        field_mapping:
          hdr.ig_ft.br_tag.ether_type(0..7) : byte2(0..7)
          hdr.ig_ft.br_tag.ether_type(8..15) : byte0(0..7)
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        load: { byte0 : 10, byte2 : 11 }
        shift: 8
        buf_req: 12
        next: parse_qinq
      0x****:
        2..3: H1  # bit[20..31] -> H1 bit[11..0]: ingress::hdr.ig_ft.br_tag.ecid
        6..7: MH11  # ingress::ig_md.ig_ft.common.ether_type
        6..7: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B12: 16  # value 1 -> B12 bit[4]: ingress::hdr.ig_ft.br_tag.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_qinq:
      match: [ byte0, byte2 ]
      0x8100:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        MH14: 33024  # value 33024 -> MH14 bit[15..0]: ingress::hdr.ig_ft.ethernet.ether_type
        load: { byte0 : 6, byte2 : 7 }
        shift: 4
        buf_req: 8
        next: parse_vlan_1
      0x****:
        0..1: H67  # bit[4..15] -> H67 bit[11..0]: ingress::ig_md.ig_ft.lkp.vid
        0..3: W10
            # - bit[0..2] -> W10 bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp
            # - bit[3] -> W10 bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi
            # - bit[4..15] -> W10 bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid
            # - bit[16..31] -> W10 bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type
        B10: 2  # value 2 -> B10 bit[1..0]: ingress::hdr.ig_ft.vlan_tag.$stkvalid
        MH14: 33024  # value 33024 -> MH14 bit[15..0]: ingress::hdr.ig_ft.ethernet.ether_type
        shift: 4
        buf_req: 4
        next: end
    parse_fabric_eth_cpu:
      match: [ byte0 ]
      0b001011**:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        0..3: MW8  # bit[23..31] -> MW8 bit[8..0]: ingress::hdr.fabric_from_cpu_eth_ccm.dev_port
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        shift: 4
        buf_req: 4
        next: end
      0x**:
        load: { byte0 : 14, byte2 : 15 }
        buf_req: 16
        next: parse_fabric_eth_cpu_common
    parse_fabric_eth_cpu_common:
      match: [ byte0, byte2 ]
      0x0800:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        14..15: MH11  # ingress::ig_md.ig_ft.common.ether_type
        14..15: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        load: { byte0 : 16 }
        shift: 16
        buf_req: 17
        next: parse_ipv4
      0x86dd:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        14..15: MH11  # ingress::ig_md.ig_ft.common.ether_type
        14..15: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        shift: 16
        buf_req: 16
        next: parse_ipv6
      0x8847:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        14..15: MH11  # ingress::ig_md.ig_ft.common.ether_type
        14..15: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        load: { byte0 : 18, byte1 : 22, byte2 : 26 }
        shift: 16
        buf_req: 27
        next: parse_mpls
      0x8100:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        14..15: MH11  # ingress::ig_md.ig_ft.common.ether_type
        14..15: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        load: { byte0 : 18, byte2 : 19 }
        shift: 16
        buf_req: 20
        next: parse_vlan
      0x****:
        0: B37
            # - bit[0..5] -> B37 bit[7..2]: ingress::hdr.fabric_base.pkt_type
            # - bit[6] -> B37 bit[1]: ingress::hdr.fabric_base.is_mirror
            # - bit[7] -> B37 bit[0]: ingress::hdr.fabric_base.is_mcast
        0..1: H69
            # - bit[8..10] -> H69 bit[7..5]: ingress::hdr.fabric_qos.tc
            # - bit[11..12] -> H69 bit[4..3]: ingress::hdr.fabric_qos.color
            # - bit[15] -> H69 bit[0]: ingress::hdr.fabric_qos.track
        2: B15  # ingress::hdr.fabric_data_template_plus.flags
        3: B36  # ingress::hdr.fabric_data_template_plus.vb
        4..5: H53  # ingress::hdr.fabric_data_template_plus.vh0
        6..7: H19  # ingress::hdr.fabric_data_template_plus.vh1
        8..9: H1  # ingress::hdr.fabric_data_template_plus.vh2
        10..11: H17  # ingress::hdr.fabric_data_template_plus.vh3
        12..13: H13
            # - bit[96] -> H13 bit[15]: ingress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H13 bit[14..0]: ingress::hdr.fabric_data_template_plus.iif
        14..15: MH11  # ingress::ig_md.ig_ft.common.ether_type
        14..15: MH14  # ingress::hdr.ig_ft.ethernet.ether_type
        B10: 16  # value 1 -> B10 bit[4]: ingress::hdr.fabric_base.$valid
        B13: 2  # value 1 -> B13 bit[1]: ingress::hdr.fabric_data_template_plus.$valid
        shift: 16
        buf_req: 16
        next: end
deparser ingress:
  dictionary:
    B28: B10(5)
        # - bit[7..5]: ingress::hdr.switch_bridged_src.src if ingress::hdr.switch_bridged_src.$valid
        # - bit[4..0]: ingress::hdr.switch_bridged_src.bridge_type if ingress::hdr.switch_bridged_src.$valid
    B37: B10(4)
        # - bit[7..2]: ingress::hdr.fabric_base.pkt_type if ingress::hdr.fabric_base.$valid
        # - bit[1]: ingress::hdr.fabric_base.is_mirror if ingress::hdr.fabric_base.$valid
        # - bit[0]: ingress::hdr.fabric_base.is_mcast if ingress::hdr.fabric_base.$valid
    B29: B9(6)  # ingress::hdr.fabric_qos_encap.data if ingress::hdr.fabric_qos_encap.$valid
    H24: B9(7)  # ingress::hdr.bridged_md_12_encap.decap_len if ingress::hdr.bridged_md_12_encap.$valid
    B15: B13(1)  # ingress::hdr.fabric_data_template_plus.flags if ingress::hdr.fabric_data_template_plus.$valid
    B36: B13(1)  # ingress::hdr.fabric_data_template_plus.vb if ingress::hdr.fabric_data_template_plus.$valid
    H53: B13(1)  # ingress::hdr.fabric_data_template_plus.vh0 if ingress::hdr.fabric_data_template_plus.$valid
    H19: B13(1)  # ingress::hdr.fabric_data_template_plus.vh1 if ingress::hdr.fabric_data_template_plus.$valid
    H1: B13(1)  # ingress::hdr.fabric_data_template_plus.vh2 if ingress::hdr.fabric_data_template_plus.$valid
    H17: B13(1)  # ingress::hdr.fabric_data_template_plus.vh3 if ingress::hdr.fabric_data_template_plus.$valid
    H13: B13(1)
        # - bit[15]: ingress::hdr.fabric_data_template_plus.one if ingress::hdr.fabric_data_template_plus.$valid
        # - bit[14..0]: ingress::hdr.fabric_data_template_plus.iif if ingress::hdr.fabric_data_template_plus.$valid
    B11: B13(2)
        # - bit[7..5]: ingress::hdr.ext_srv6.ext_type if ingress::hdr.ext_srv6.$valid
        # - bit[4]: ingress::hdr.ext_srv6.extend if ingress::hdr.ext_srv6.$valid
        # - bit[3]: ingress::hdr.ext_srv6.bypass_L3 if ingress::hdr.ext_srv6.$valid
        # - bit[2..1]: ingress::hdr.ext_srv6.level if ingress::hdr.ext_srv6.$valid
        # - bit[0]: ingress::hdr.ext_srv6.is_ecmp if ingress::hdr.ext_srv6.$valid
    W7: B13(2)
        # - bit[31..24]: ingress::hdr.ext_srv6.priority if ingress::hdr.ext_srv6.$valid
        # - bit[23..8]: ingress::hdr.ext_srv6.nexthop if ingress::hdr.ext_srv6.$valid
        # - bit[7]: ingress::hdr.ext_srv6.no_frr if ingress::hdr.ext_srv6.$valid
        # - bit[6]: ingress::hdr.ext_srv6.nexthop_ext if ingress::hdr.ext_srv6.$valid
        # - bit[5]: ingress::hdr.ext_srv6.is_pf if ingress::hdr.ext_srv6.$valid
        # - bit[4]: ingress::hdr.ext_srv6.is_endx_pf if ingress::hdr.ext_srv6.$valid
        # - bit[3..0]: ingress::hdr.ext_srv6.oam_flag if ingress::hdr.ext_srv6.$valid
    B38: B13(0)
        # - bit[7..5]: ingress::hdr.ext_tunnel_decap.ext_type if ingress::hdr.ext_tunnel_decap.$valid
        # - bit[4]: ingress::hdr.ext_tunnel_decap.extend if ingress::hdr.ext_tunnel_decap.$valid
        # - bit[3..0]: ingress::hdr.ext_tunnel_decap.sub_type if ingress::hdr.ext_tunnel_decap.$valid
    B39: B13(0)  # ingress::hdr.ext_tunnel_decap.vb if ingress::hdr.ext_tunnel_decap.$valid
    H18: B13(0)  # ingress::hdr.ext_tunnel_decap.vh if ingress::hdr.ext_tunnel_decap.$valid
    H22: B12(5)
        # - bit[15..13]: ingress::hdr.ext_ifit_encap.ext_type if ingress::hdr.ext_ifit_encap.$valid
        # - bit[12]: ingress::hdr.ext_ifit_encap.extend if ingress::hdr.ext_ifit_encap.$valid
        # - bit[11..0]: ingress::hdr.ext_ifit_encap.index if ingress::hdr.ext_ifit_encap.$valid
    H21: B12(5)  # ingress::hdr.ext_ifit_encap.var_h1 if ingress::hdr.ext_ifit_encap.$valid
    H23: B12(1)  # ingress::hdr.ig_ft.ethernet.dst_addr.32-47 if ingress::hdr.ig_ft.ethernet.$valid
    MW15: B12(1)  # ingress::hdr.ig_ft.ethernet.dst_addr.0-31 if ingress::hdr.ig_ft.ethernet.$valid
    H55: B12(1)  # ingress::hdr.ig_ft.ethernet.src_addr.32-47 if ingress::hdr.ig_ft.ethernet.$valid
    MW14: B12(1)  # ingress::hdr.ig_ft.ethernet.src_addr.0-31 if ingress::hdr.ig_ft.ethernet.$valid
    MH14: B12(1)  # ingress::hdr.ig_ft.ethernet.ether_type if ingress::hdr.ig_ft.ethernet.$valid
    W10: B10(1)
        # - bit[31..29]: ingress::hdr.ig_ft.vlan_tag[0].pcp if ingress::hdr.ig_ft.vlan_tag[0].$valid
        # - bit[28]: ingress::hdr.ig_ft.vlan_tag[0].cfi if ingress::hdr.ig_ft.vlan_tag[0].$valid
        # - bit[27..16]: ingress::hdr.ig_ft.vlan_tag[0].vid if ingress::hdr.ig_ft.vlan_tag[0].$valid
        # - bit[15..0]: ingress::hdr.ig_ft.vlan_tag[0].ether_type if ingress::hdr.ig_ft.vlan_tag[0].$valid
    W11: B10(0)
        # - bit[31..29]: ingress::hdr.ig_ft.vlan_tag[1].pcp if ingress::hdr.ig_ft.vlan_tag[1].$valid
        # - bit[28]: ingress::hdr.ig_ft.vlan_tag[1].cfi if ingress::hdr.ig_ft.vlan_tag[1].$valid
        # - bit[27..16]: ingress::hdr.ig_ft.vlan_tag[1].vid if ingress::hdr.ig_ft.vlan_tag[1].$valid
        # - bit[15..0]: ingress::hdr.ig_ft.vlan_tag[1].ether_type if ingress::hdr.ig_ft.vlan_tag[1].$valid
    H40: B8(7)  # ingress::hdr.ig_ft.mpls_ig[0].label.4-19 if ingress::hdr.ig_ft.mpls_ig[0].$valid
    H5: B8(7)
        # - bit[15..12]: ingress::hdr.ig_ft.mpls_ig[0].label.0-3 if ingress::hdr.ig_ft.mpls_ig[0].$valid
        # - bit[11..9]: ingress::hdr.ig_ft.mpls_ig[0].exp if ingress::hdr.ig_ft.mpls_ig[0].$valid
        # - bit[8]: ingress::hdr.ig_ft.mpls_ig[0].bos if ingress::hdr.ig_ft.mpls_ig[0].$valid
        # - bit[7..0]: ingress::hdr.ig_ft.mpls_ig[0].ttl if ingress::hdr.ig_ft.mpls_ig[0].$valid
    H39: B8(6)  # ingress::hdr.ig_ft.mpls_ig[1].label.4-19 if ingress::hdr.ig_ft.mpls_ig[1].$valid
    H4: B8(6)
        # - bit[15..12]: ingress::hdr.ig_ft.mpls_ig[1].label.0-3 if ingress::hdr.ig_ft.mpls_ig[1].$valid
        # - bit[11..9]: ingress::hdr.ig_ft.mpls_ig[1].exp if ingress::hdr.ig_ft.mpls_ig[1].$valid
        # - bit[8]: ingress::hdr.ig_ft.mpls_ig[1].bos if ingress::hdr.ig_ft.mpls_ig[1].$valid
        # - bit[7..0]: ingress::hdr.ig_ft.mpls_ig[1].ttl if ingress::hdr.ig_ft.mpls_ig[1].$valid
    H38: B8(5)  # ingress::hdr.ig_ft.mpls_ig[2].label.4-19 if ingress::hdr.ig_ft.mpls_ig[2].$valid
    H3: B8(5)
        # - bit[15..12]: ingress::hdr.ig_ft.mpls_ig[2].label.0-3 if ingress::hdr.ig_ft.mpls_ig[2].$valid
        # - bit[11..9]: ingress::hdr.ig_ft.mpls_ig[2].exp if ingress::hdr.ig_ft.mpls_ig[2].$valid
        # - bit[8]: ingress::hdr.ig_ft.mpls_ig[2].bos if ingress::hdr.ig_ft.mpls_ig[2].$valid
        # - bit[7..0]: ingress::hdr.ig_ft.mpls_ig[2].ttl if ingress::hdr.ig_ft.mpls_ig[2].$valid
    H37: B8(4)  # ingress::hdr.ig_ft.mpls_ig[3].label.4-19 if ingress::hdr.ig_ft.mpls_ig[3].$valid
    H2: B8(4)
        # - bit[15..12]: ingress::hdr.ig_ft.mpls_ig[3].label.0-3 if ingress::hdr.ig_ft.mpls_ig[3].$valid
        # - bit[11..9]: ingress::hdr.ig_ft.mpls_ig[3].exp if ingress::hdr.ig_ft.mpls_ig[3].$valid
        # - bit[8]: ingress::hdr.ig_ft.mpls_ig[3].bos if ingress::hdr.ig_ft.mpls_ig[3].$valid
        # - bit[7..0]: ingress::hdr.ig_ft.mpls_ig[3].ttl if ingress::hdr.ig_ft.mpls_ig[3].$valid
    H36: B8(3)  # ingress::hdr.ig_ft.mpls_ig[4].label.4-19 if ingress::hdr.ig_ft.mpls_ig[4].$valid
    H0: B8(3)
        # - bit[15..12]: ingress::hdr.ig_ft.mpls_ig[4].label.0-3 if ingress::hdr.ig_ft.mpls_ig[4].$valid
        # - bit[11..9]: ingress::hdr.ig_ft.mpls_ig[4].exp if ingress::hdr.ig_ft.mpls_ig[4].$valid
        # - bit[8]: ingress::hdr.ig_ft.mpls_ig[4].bos if ingress::hdr.ig_ft.mpls_ig[4].$valid
        # - bit[7..0]: ingress::hdr.ig_ft.mpls_ig[4].ttl if ingress::hdr.ig_ft.mpls_ig[4].$valid
    clot 25:
      pov: hdr.ig_ft.mpls2_ig$0.$valid
    clot 24:
      pov: hdr.ig_ft.mpls2_ig$1.$valid
    clot 23:
      pov: hdr.ig_ft.mpls2_ig$2.$valid
    clot 22:
      pov: hdr.ig_ft.mpls2_ig$3.$valid
    clot 21:
      pov: hdr.ig_ft.mpls2_ig$4.$valid
    clot 16:
      pov: hdr.ig_ft.ipv4.$valid
      1 : B40
    MB6: B12(3)  # ingress::hdr.ig_ft.ipv4_option.type if ingress::hdr.ig_ft.ipv4_option.$valid
    H2: B12(3)
        # - bit[15..8]: ingress::hdr.ig_ft.ipv4_option.length if ingress::hdr.ig_ft.ipv4_option.$valid
        # - bit[7..0]: ingress::hdr.ig_ft.ipv4_option.value[15:8].8-15 if ingress::hdr.ig_ft.ipv4_option.$valid
    clot 28:
      pov: hdr.ig_ft.ipv4_option.$valid
    B41: H7(5)
        # - bit[7..4]: ingress::hdr.ig_ft.ipv6.version if ingress::hdr.ig_ft.ipv6.$valid
        # - bit[3..0]: ingress::hdr.ig_ft.ipv6.traffic_class.4-7 if ingress::hdr.ig_ft.ipv6.$valid
    B40: H7(5)
        # - bit[7..4]: ingress::hdr.ig_ft.ipv6.traffic_class.0-3 if ingress::hdr.ig_ft.ipv6.$valid
        # - bit[3..0]: ingress::hdr.ig_ft.ipv6.flow_label.16-19 if ingress::hdr.ig_ft.ipv6.$valid
    H3: H7(5)  # ingress::hdr.ig_ft.ipv6.flow_label.0-15 if ingress::hdr.ig_ft.ipv6.$valid
    H0: H7(5)  # ingress::hdr.ig_ft.ipv6.payload_len if ingress::hdr.ig_ft.ipv6.$valid
    MB6: H7(5)  # ingress::hdr.ig_ft.ipv6.next_hdr if ingress::hdr.ig_ft.ipv6.$valid
    clot 27:
      pov: hdr.ig_ft.ipv6.$valid
    MW8: H7(5)  # ingress::hdr.ig_ft.ipv6.dst_addr.96-127 if ingress::hdr.ig_ft.ipv6.$valid
    MW7: H7(5)  # ingress::hdr.ig_ft.ipv6.dst_addr.64-95 if ingress::hdr.ig_ft.ipv6.$valid
    MW6: H7(5)  # ingress::hdr.ig_ft.ipv6.dst_addr.32-63 if ingress::hdr.ig_ft.ipv6.$valid
    MW3: H7(5)  # ingress::hdr.ig_ft.ipv6.dst_addr.0-31 if ingress::hdr.ig_ft.ipv6.$valid
    MB5: H7(15)  # ingress::hdr.ig_ft.doh.next_hdr if ingress::hdr.ig_ft.doh.$valid
    clot 26:
      pov: hdr.ig_ft.doh.$valid
    clot 15:
      pov: hdr.ig_ft.srv6_h2h_ifit.$valid
    B31: B12(0)  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:0].16-23 if ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
    H4: B12(0)  # ingress::hdr.ig_ft.srv6_h2h_ifit.reserved3[23:0].0-15 if ingress::hdr.ig_ft.srv6_h2h_ifit.$valid
    clot 19:
      pov: hdr.ig_ft.srv6_srh.$valid
      3 : B14
    clot 12:
      pov: hdr.ig_ft.srv6_list$0.$valid
    clot 11:
      pov: hdr.ig_ft.srv6_list$1.$valid
    clot 10:
      pov: hdr.ig_ft.srv6_list$2.$valid
    clot 9:
      pov: hdr.ig_ft.srv6_list$3.$valid
    clot 8:
      pov: hdr.ig_ft.srv6_list$4.$valid
    clot 7:
      pov: hdr.ig_ft.srv6_list$5.$valid
    clot 6:
      pov: hdr.ig_ft.srv6_list$6.$valid
    clot 5:
      pov: hdr.ig_ft.srv6_list$7.$valid
    clot 4:
      pov: hdr.ig_ft.srv6_list$8.$valid
    clot 3:
      pov: hdr.ig_ft.srv6_list$9.$valid
    clot 2:
      pov: hdr.ig_ft.srv6_list$10.$valid
    B45: H7(13)  # ingress::hdr.ig_ft.doh_e2e.next_hdr if ingress::hdr.ig_ft.doh_e2e.$valid
    B46: H7(13)  # ingress::hdr.ig_ft.doh_e2e.hdr_ext_len if ingress::hdr.ig_ft.doh_e2e.$valid
    H28: H7(13)
        # - bit[15..8]: ingress::hdr.ig_ft.doh_e2e.option_type if ingress::hdr.ig_ft.doh_e2e.$valid
        # - bit[7..0]: ingress::hdr.ig_ft.doh_e2e.option_len if ingress::hdr.ig_ft.doh_e2e.$valid
    clot 14:
      pov: hdr.ig_ft.srv6_e2e_ifit.$valid
    clot 17:
      pov: hdr.ig_ft.udp.$valid
    clot 18:
      pov: hdr.ig_ft.vxlan.$valid
    clot 13:
      pov: hdr.ig_ft.inner_ethernet.$valid
    clot 20:
      pov: hdr.ig_ft.inner_vlan_tag.$valid
    clot 1:
      pov: hdr.ig_ft.inner_ipv4.$valid
    clot 0:
      pov: hdr.ig_ft.inner_ipv6.$valid
    H43: H7(4)  # ingress::hdr.fabric_trace.trace_counter if ingress::hdr.fabric_trace.$valid
    H52: H7(4)  # ingress::hdr.fabric_trace.timestamp.32-47 if ingress::hdr.fabric_trace.$valid
    MW11: H7(4)  # ingress::hdr.fabric_trace.timestamp.0-31 if ingress::hdr.fabric_trace.$valid
  egress_unicast_port: { MW9(0..8): B10(2) }  # bit[8..0]: ingress::ig_intr_md_for_tm.ucast_egress_port if ingress::ig_intr_md_for_tm.ucast_egress_port.$valid
  deflect_on_drop: { H31(1..1): H7(2) }  # bit[1]: ingress::ig_intr_md_for_tm.deflect_on_drop if ingress::ig_intr_md_for_tm.deflect_on_drop.$valid
  qid: { H30(0..6): B9(5) }  # bit[6..0]: ingress::ig_intr_md_for_tm.qid if ingress::ig_intr_md_for_tm.qid.$valid
  bypss_egr: { B12(6..6): H7(1) }  # bit[6]: ingress::ig_intr_md_for_tm.bypass_egress if ingress::ig_intr_md_for_tm.bypass_egress.$valid
  drop_ctl: { W6(2..4): B10(3) }  # bit[4..2]: ingress::ig_intr_md_for_dprsr.drop_ctl if ingress::ig_intr_md_for_dprsr.drop_ctl.$valid
  mirr_io_sel: { H31(0..0): H7(3) }  # bit[0]: ingress::ig_intr_md_for_dprsr.mirror_io_select if ingress::ig_intr_md_for_dprsr.mirror_io_select.$valid
  mirror:
    select: { B1(0..3): H7(0) }  # bit[3..0]: ingress::ig_intr_md_for_dprsr.mirror_type
    0:
      - B0  # ingress::$tmp11
    1:
      - MB7  # ingress::ig_md.ig_ft.mirror.session_id
      - MB0
          # - bit[7..5]: ingress::ig_md.ig_ft.mirror.src
          # - bit[4..0]: ingress::ig_md.ig_ft.mirror.type
      - MB7  # ingress::ig_md.ig_ft.mirror.session_id
      - B37
          # - bit[7..2]: ingress::hdr.fabric_base.pkt_type
          # - bit[1]: ingress::hdr.fabric_base.is_mirror
          # - bit[0]: ingress::hdr.fabric_base.is_mcast
      - B29  # ingress::hdr.fabric_qos_encap.data
      - MB2  # ingress::ig_md.ig_ft.mirror.flags
      - MB13  # ingress::ig_md.ig_ft.common.src_port
      - H53  # ingress::hdr.fabric_data_template_plus.vh0
      - H56  # ingress::ig_md.ig_ft.common.mirror_dst_eport
      - H15(0..14)  # bit[14..0]: ingress::ig_md.ig_ft.common.iif
      - H54  # ingress::ig_md.ig_ft.ifit.var_h1
      - H14(0..14)  # bit[14..0]: ingress::ig_md.ig_ft.common.ul_iif
    7:
      - MB7  # ingress::ig_md.ig_ft.mirror.session_id
      - MB0
          # - bit[7..5]: ingress::ig_md.ig_ft.mirror.src
          # - bit[4..0]: ingress::ig_md.ig_ft.mirror.type
      - MB7  # ingress::ig_md.ig_ft.mirror.session_id
      - H56  # ingress::ig_md.ig_ft.common.mirror_dst_eport
      - B37
          # - bit[7..2]: ingress::hdr.fabric_base.pkt_type
          # - bit[1]: ingress::hdr.fabric_base.is_mirror
          # - bit[0]: ingress::hdr.fabric_base.is_mcast
      - B29  # ingress::hdr.fabric_qos_encap.data
      - MB15  # ingress::ig_md.ig_ft.common.pipeline_location
      - MB15  # ingress::ig_md.ig_ft.common.pipeline_location
      - H43  # ingress::hdr.fabric_trace.trace_counter
      - B30  # ingress::ig_md.ig_ft.common.drop_reason
      - B30  # ingress::ig_md.ig_ft.common.drop_reason
      - H53  # ingress::hdr.fabric_data_template_plus.vh0
      - H57  # ingress::ig_md.ig_ft.common.trace_vh3
      - H14(0..14)  # bit[14..0]: ingress::ig_md.ig_ft.common.ul_iif
      - H52  # ingress::hdr.fabric_trace.timestamp.32-47
      - MW11  # ingress::hdr.fabric_trace.timestamp.0-31
    6:
      - MB7  # ingress::ig_md.ig_ft.mirror.session_id
      - MB0
          # - bit[7..5]: ingress::ig_md.ig_ft.mirror.src
          # - bit[4..0]: ingress::ig_md.ig_ft.mirror.type
      - MB7  # ingress::ig_md.ig_ft.mirror.session_id
      - B37
          # - bit[7..2]: ingress::hdr.fabric_base.pkt_type
          # - bit[1]: ingress::hdr.fabric_base.is_mirror
          # - bit[0]: ingress::hdr.fabric_base.is_mcast
      - B29  # ingress::hdr.fabric_qos_encap.data
      - MB2  # ingress::ig_md.ig_ft.mirror.flags
      - MB13  # ingress::ig_md.ig_ft.common.src_port
      - H53  # ingress::hdr.fabric_data_template_plus.vh0
      - H56  # ingress::ig_md.ig_ft.common.mirror_dst_eport
      - H15(0..14)  # bit[14..0]: ingress::ig_md.ig_ft.common.iif
      - H12
          # - bit[15]: ingress::ig_md.ig_ft.tunnel.ipv4_true
          # - bit[14]: ingress::ig_md.ig_ft.flags.tunnel_info
          # - bit[12..0]: ingress::ig_md.ig_ft.route.vrf
      - H14(0..14)  # bit[14..0]: ingress::ig_md.ig_ft.common.ul_iif
parser egress:
  start: hdr.eg_ft.vlan_tag$shim.$entry_point
  bitwise_or: [ B7, B22, B23, B24, B25, B32, B33, H9 ]
  clear_on_write: [ MB3, MH15 ]
  hdr_len_adj: 28
  meta_opt: 8191
  states:
    hdr.eg_ft.vlan_tag$shim.$entry_point:
      *:
        52..55: MW12  # buffer mapped I/O: bit[416..447] -> MW12 bit[31..0]: egress::eg_intr_md_from_prsr.global_tstamp[31:0].0-31
        50..51: H42  # buffer mapped I/O: bit[400..415] -> H42 bit[15..0]: egress::eg_intr_md_from_prsr.global_tstamp[47:32].32-47
        B7: 8  # value 8 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        intr_md: 48
        load: { byte0 : 28 }
        buf_req: 29
        next: start
    start:
      match: [ byte0 ]
      0x00:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        load: { byte0 : 29, byte1 : 31 }
        shift: 28
        buf_req: 32
        next: parse_bridged_pkt_910
      0x03:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_bridged_pkt_110
      0x05:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        load: { byte0 : 31 }
        shift: 28
        buf_req: 32
        next: parse_bridged_pkt_310
      0x06:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        load: { byte0 : 29 }
        shift: 28
        buf_req: 30
        next: parse_bridged_pkt_recirc
      0x08:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: start.$oob_stall_0
      0x09:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        load: { byte0 : 29 }
        shift: 28
        buf_req: 30
        next: parse_bridged_pkt_710_front
      0x0b:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_bridged_pkt_910_ccm
      0x0c:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        load: { byte0 : 29 }
        shift: 28
        buf_req: 30
        next: parse_bridged_pkt_recirc
      0x0f:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_bridged_pkt_signal
      0x10:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_bridged_pkt_110_recirc
      0x11:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: start.$oob_stall_1
      0x48:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_xon_xoff_mirrored_metadata
      0x49:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_xon_xoff_mirrored_metadata
      0x27:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_common_mirrored_metadata
      0x47:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_common_mirrored_metadata
      0x30:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_common_mirrored_metadata
      0x50:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_common_mirrored_metadata
      0x31:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_common_mirrored_metadata
      0x51:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_common_mirrored_metadata
      0x32:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_ig_uplink_ifit_mirrored_metadata
      0x**:
        0..1: MH16  # bit[7..15] -> MH16 bit[8..0]: egress::eg_intr_md.egress_port
        9..12: W29  # bit[85..103] -> W29 bit[18..0]: egress::eg_md.eg_ft.qos.qdepth
        15..18: MW4  # egress::eg_md.eg_ft.common.deq_timedelta
        24..27: W36  # bit[199] -> W36 bit[24]: egress::eg_intr_md.deflection_flag
        25..26: H25  # egress::eg_md.eg_ft.common.pkt_length
        MH18: 1  # value 1 -> MH18 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select
        H9: 3
            # - value 1 -> H9 bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
            # - value 1 -> H9 bit[1]: egress::eg_intr_md.egress_port.$valid
        intr_md: 10
        shift: 28
        buf_req: 28
        next: parse_ghost
    parse_bridged_pkt_910:
      match: [ byte1, byte0 ]
      0o1*****:
        0..3: W34
            # - bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
            # - bit[26] -> W34 bit[5]: egress::eg_md.eg_ft.common.diag
            # - bit[27] -> W34 bit[4]: egress::eg_md.eg_ft.flags.drop
            # - bit[28..29] -> W34 bit[3..2]: egress::eg_md.eg_ft.lkp.ip_frag
            # - bit[31] -> W34 bit[0]: egress::eg_md.eg_ft.flags.bypass_sec_acl
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        4: B20  # egress::eg_md.eg_ft.common.dst_port
        5..6: H61  # egress::eg_md.eg_ft.common.hash
        9..10: H50  # bit[73..87] -> H50 bit[14..0]: egress::eg_md.eg_ft.common.oif
        9..12: W33  # bit[90..103] -> W33 bit[13..0]: egress::eg_md.eg_ft.ebridge.evlan
        13..14: H49  # bit[105..119] -> H49 bit[14..0]: egress::eg_md.eg_ft.common.iif
        21..24: W27  # egress::eg_md.eg_ft.lkp.l4_port_label_64[63:32].32-63
        25..28: W26  # egress::eg_md.eg_ft.lkp.l4_port_label_64[31:0].0-31
        29..30: MH8  # egress::eg_md.eg_ft.common.decap_len
        shift: 31
        buf_req: 31
        next: parse_ext_ifit
      0x****:
        0..3: W34
            # - bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
            # - bit[26] -> W34 bit[5]: egress::eg_md.eg_ft.common.diag
            # - bit[27] -> W34 bit[4]: egress::eg_md.eg_ft.flags.drop
            # - bit[28..29] -> W34 bit[3..2]: egress::eg_md.eg_ft.lkp.ip_frag
            # - bit[31] -> W34 bit[0]: egress::eg_md.eg_ft.flags.bypass_sec_acl
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        4: B20  # egress::eg_md.eg_ft.common.dst_port
        5..6: H61  # egress::eg_md.eg_ft.common.hash
        9..10: H50  # bit[73..87] -> H50 bit[14..0]: egress::eg_md.eg_ft.common.oif
        9..12: W33  # bit[90..103] -> W33 bit[13..0]: egress::eg_md.eg_ft.ebridge.evlan
        13..14: H49  # bit[105..119] -> H49 bit[14..0]: egress::eg_md.eg_ft.common.iif
        21..24: W27  # egress::eg_md.eg_ft.lkp.l4_port_label_64[63:32].32-63
        25..28: W26  # egress::eg_md.eg_ft.lkp.l4_port_label_64[31:0].0-31
        29..30: MH8  # egress::eg_md.eg_ft.common.decap_len
        shift: 31
        buf_req: 31
        next: parse_bridged_pkt_910.$oob_stall_0
    parse_ext_ifit:
      *:
        0..1: H68  # bit[4..15] -> H68 bit[11..0]: egress::eg_md.eg_ft.ifit.index
        2: B43
            # - bit[19] -> B43 bit[4]: egress::eg_md.eg_ft.ifit.ifit_decap_enable
            # - bit[20] -> B43 bit[3]: egress::eg_md.eg_ft.ifit.loss_label
            # - bit[21] -> B43 bit[2]: egress::eg_md.eg_ft.ifit.delay_stats_flag
        H9: 8  # value 1 -> H9 bit[3]: egress::hdr.ext_ifit.$valid
        load: { byte0 : 16, byte1 : 17 }
        shift: 4
        buf_req: 18
        next: parse_ethernet
    parse_ethernet:
      match: [ byte0, byte1 ]
      0x0800:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        load: { byte0 : 14, byte1 : 20, byte2 : 21, byte3 : 23 }
        shift: 14
        buf_req: 24
        next: parse_ipv4
      0x86dd:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: parse_ipv6
      0x8847:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: parse_mpls
      0x8100:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        load: { byte0 : 16, byte1 : 17 }
        shift: 14
        buf_req: 18
        next: parse_vlan
      0x****:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: parse_pad
    parse_ipv4:
      match: [ byte3, byte0, byte1, byte2 ]
      0b00010001****0101***0000000000000:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        9: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        12..13: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        shift: 20
        buf_req: 20
        next: parse_udp
      0b00000110****0101***0000000000000:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        9: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        12..13: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        shift: 20
        buf_req: 20
        next: parse_tcp
      0b00000001****0101***0000000000000:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        9: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        12..13: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        shift: 20
        buf_req: 20
        next: parse_icmp
      0x***6****:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        9: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        12..13: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        load: { byte0 : 6, byte1 : 7, byte2 : 9 }
        shift: 20
        buf_req: 20
        next: parse_ipv4_options
      0x***5****:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        9: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        12..13: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        shift: 20
        buf_req: 20
        next: parse_pad
      0x********:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        9: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        12..13: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        14..15: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        16..19: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        shift: 20
        buf_req: 20
        next: parse_pad
    parse_udp:
      *:
        0..1: H59  # egress::eg_md.eg_ft.lkp.l4_src_port
        0..3: W32  # bit[16..31] -> W32 bit[15..0]: egress::eg_md.eg_ft.lkp.l4_dst_port
        buf_req: 4
        next: parse_pad
    parse_pad:
      *:
        B7: 32
            # - value 1 -> B7 bit[5]: egress::hdr.pad.$valid
            # - value 1 -> B7 bit[5]: egress::hdr.pad.$valid
        clot 0 :
          start: 0
          length: 64
        buf_req: 0
        next: end
    parse_tcp:
      *:
        0..1: H59  # egress::eg_md.eg_ft.lkp.l4_src_port
        0..3: W32  # bit[16..31] -> W32 bit[15..0]: egress::eg_md.eg_ft.lkp.l4_dst_port
        10..13: W35  # bit[104..111] -> W35 bit[7..0]: egress::eg_md.eg_ft.lkp.tcp_flags
        buf_req: 14
        next: parse_pad
    parse_icmp:
      *:
        0..1: H59  # egress::eg_md.eg_ft.lkp.l4_src_port
        buf_req: 2
        next: parse_pad
    parse_ipv4_options:
      match: [ byte2, byte0, byte1 ]
      0b00010001***0000000000000:
        4..5: H59  # egress::eg_md.eg_ft.lkp.l4_src_port
        4..7: W32  # bit[48..63] -> W32 bit[15..0]: egress::eg_md.eg_ft.lkp.l4_dst_port
        buf_req: 8
        next: parse_pad
      0b00000110***0000000000000:
        4..5: H59  # egress::eg_md.eg_ft.lkp.l4_src_port
        4..7: W32  # bit[48..63] -> W32 bit[15..0]: egress::eg_md.eg_ft.lkp.l4_dst_port
        14..17: W35  # bit[136..143] -> W35 bit[7..0]: egress::eg_md.eg_ft.lkp.tcp_flags
        buf_req: 18
        next: parse_pad
      0b00000001***0000000000000:
        4..5: H59  # egress::eg_md.eg_ft.lkp.l4_src_port
        buf_req: 6
        next: parse_pad
      0x******:
        buf_req: 0
        next: parse_pad
    parse_ipv6:
      *:
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv6.version
            # - bit[4..11] -> H34 bit[11..4]: egress::hdr.eg_ft.ipv6.traffic_class
            # - bit[12..15] -> H34 bit[3..0]: egress::hdr.eg_ft.ipv6.flow_label[19:16].16-19
        2..3: H35  # egress::hdr.eg_ft.ipv6.flow_label[15:0].0-15
        6: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        8..11: W20  # egress::eg_md.eg_ft.lkp.ip_src_addr[127:96].96-127
        12..15: W19  # egress::eg_md.eg_ft.lkp.ip_src_addr[95:64].64-95
        16..19: W18  # egress::eg_md.eg_ft.lkp.ip_src_addr[63:32].32-63
        20..21: H58  # egress::eg_md.eg_ft.lkp.ip_src_addr[31:16].16-31
        22..23: H63  # egress::eg_md.eg_ft.lkp.ip_src_addr[15:0].0-15
        24..27: W25  # egress::eg_md.eg_ft.lkp.ip_dst_addr[127:96].96-127
        28..31: W23  # egress::eg_md.eg_ft.lkp.ip_dst_addr[95:64].64-95
        H9: 64  # value 1 -> H9 bit[6]: egress::hdr.eg_ft.ipv6.$valid
        clot 1 :
          start: 4
          length: 36
        load: { byte0 : 6 }
        shift: 32
        buf_req: 32
        next: parse_ipv6.$split_0
    parse_ipv6.$split_0:
      match: [ byte0 ]
      0x06:
        0..3: W22  # egress::eg_md.eg_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 1 (spilled)
        shift: 8
        buf_req: 8
        next: parse_tcp
      0x11:
        0..3: W22  # egress::eg_md.eg_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 1 (spilled)
        shift: 8
        buf_req: 8
        next: parse_udp
      0x3a:
        0..3: W22  # egress::eg_md.eg_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 1 (spilled)
        shift: 8
        buf_req: 8
        next: parse_icmp
      0x2c:
        0..3: W22  # egress::eg_md.eg_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 1 (spilled)
        load: { byte0 : 8, byte1 : 10, byte2 : 11 }
        shift: 8
        buf_req: 12
        next: parse_ipv6_frag
      0x**:
        0..3: W22  # egress::eg_md.eg_ft.lkp.ip_dst_addr[63:32].32-63
        4..7: W21  # egress::eg_md.eg_ft.lkp.ip_dst_addr[31:0].0-31
        # clot 1 (spilled)
        shift: 8
        buf_req: 8
        next: parse_pad
    parse_ipv6_frag:
      match: [ byte0, byte1, byte2 ]
      0o0140000*:
        0: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        H9: 128  # value 1 -> H9 bit[7]: egress::hdr.eg_ft.ipv6_frag.$valid
        clot 4 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: parse_tcp
      0o0420000*:
        0: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        H9: 128  # value 1 -> H9 bit[7]: egress::hdr.eg_ft.ipv6_frag.$valid
        clot 4 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: parse_udp
      0o1640000*:
        0: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        H9: 128  # value 1 -> H9 bit[7]: egress::hdr.eg_ft.ipv6_frag.$valid
        clot 4 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: parse_icmp
      0x******:
        0: MB3  # egress::eg_md.eg_ft.lkp.ip_proto
        H9: 128  # value 1 -> H9 bit[7]: egress::hdr.eg_ft.ipv6_frag.$valid
        clot 4 :
          start: 0
          length: 8
        shift: 8
        buf_req: 8
        next: parse_pad
    parse_mpls:
      *:
        H9: 256  # value 1 -> H9 bit[8]: egress::hdr.eg_ft.mpls_vc_eg.$valid
        clot 6 :
          start: 0
          length: 4
        shift: 4
        buf_req: 4
        next: parse_pad
    parse_vlan:
      match: [ byte0, byte1 ]
      0x0800:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        load: { byte0 : 4, byte1 : 10, byte2 : 11, byte3 : 13 }
        shift: 4
        buf_req: 14
        next: parse_ipv4
      0x86dd:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8847:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_mpls
      0x8100:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        load: { byte0 : 6, byte1 : 7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it1
      0x****:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_pad
    parse_vlan.$it1:
      match: [ byte0, byte1 ]
      0x0800:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        load: { byte0 : 4, byte1 : 10, byte2 : 11, byte3 : 13 }
        shift: 4
        buf_req: 14
        next: parse_ipv4
      0x86dd:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8847:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_mpls
      0x8100:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
      0x****:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_pad
    parse_bridged_pkt_910.$oob_stall_0:
      *:
        load: { byte0 : 12, byte1 : 13 }
        buf_req: 14
        next: parse_ethernet
    parse_bridged_pkt_110:
      *:
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        3..4: MH8  # egress::eg_md.eg_ft.common.decap_len
        10: B20  # egress::eg_md.eg_ft.common.dst_port
        load: { byte0 : 29, byte1 : 30 }
        shift: 17
        buf_req: 31
        next: parse_ethernet
    parse_bridged_pkt_310:
      match: [ byte0 ]
      0x**:
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        8: B20  # egress::eg_md.eg_ft.common.dst_port
        9..10: H50  # bit[73..87] -> H50 bit[14..0]: egress::eg_md.eg_ft.common.oif
        W34: 64  # value 1 -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        load: { byte0 : 27, byte1 : 28 }
        shift: 15
        buf_req: 29
        next: parse_ethernet_310
    parse_ethernet_310:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        load: { byte0 : 16, byte1 : 17 }
        shift: 14
        buf_req: 18
        next: parse_vlan_310
      0x0800:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: parse_ipv4_310
      0x86dd:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: parse_ipv6_310
      0x****:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        shift: 14
        buf_req: 14
        next: end
    parse_vlan_310:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_vlan1_310
      0x0800:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4_310
      0x86dd:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6_310
      0x****:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan1_310:
      *:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_ipv4_310:
      *:
        checksum 0:
          type: RESIDUAL
          mask: [ 0, 1, 10..11 ]
          swap: 0
          start: 1
          end: 1
          dest: MH7
          end_pos: 19
        checksum 2:
          type: CLOT
          mask: [ 0 ]
          swap: 0
          start: 1
          end: 1
          dest: clot 2
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv4.version
            # - bit[4..7] -> H34 bit[11..8]: egress::hdr.eg_ft.ipv4.ihl
            # - bit[8..15] -> H34 bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv
        10..11: MH2  # egress::hdr.eg_ft.ipv4.hdr_checksum
        H9: 32  # value 1 -> H9 bit[5]: egress::hdr.eg_ft.ipv4.$valid
        clot 2 :
          start: 0
          length: 20
          checksum:  2
        shift: 20
        buf_req: 20
        next: end
    parse_ipv6_310:
      *:
        0..1: H34
            # - bit[0..3] -> H34 bit[15..12]: egress::hdr.eg_ft.ipv6.version
            # - bit[4..11] -> H34 bit[11..4]: egress::hdr.eg_ft.ipv6.traffic_class
            # - bit[12..15] -> H34 bit[3..0]: egress::hdr.eg_ft.ipv6.flow_label[19:16].16-19
        2..3: H35  # egress::hdr.eg_ft.ipv6.flow_label[15:0].0-15
        H9: 64  # value 1 -> H9 bit[6]: egress::hdr.eg_ft.ipv6.$valid
        clot 1 :
          start: 4
          length: 36
        shift: 32
        buf_req: 32
        next: parse_ipv6_310.$split_0
    parse_ipv6_310.$split_0:
      *:
        # clot 1 (spilled)
        shift: 8
        buf_req: 8
        next: end
    parse_bridged_pkt_recirc:
      match: [ byte0 ]
      0b011100**:
        1: B23
            # - bit[0..5] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[6] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[7] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[0..5] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[6] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[7] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[8..10] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[11..12] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[13] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[14] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[15] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[8..10] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[11..12] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[15] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[96] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 22  # value 22 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 3
          length: 9
        shift: 15
        buf_req: 15
        next: parse_pad
      0x**:
        shift: 1
        buf_req: 1
        next: end
    start.$oob_stall_0:
      *:
        load: { byte0 : 3, byte1 : 15 }
        buf_req: 16
        next: parse_bridged_pkt_710_cpu
    parse_bridged_pkt_710_cpu:
      match: [ byte1, byte0 ]
      0b******000*******:
        0..3: W34  # bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        16: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        load: { byte0 : 29, byte1 : 30 }
        shift: 17
        buf_req: 31
        next: parse_ethernet_310
      0b******100*******:
        0..3: W34  # bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        16: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        shift: 17
        buf_req: 17
        next: parse_ipv4_310
      0b******110*******:
        0..3: W34  # bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        16: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        shift: 17
        buf_req: 17
        next: parse_ipv6_310
      0b********1*******:
        0..3: W34  # bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        16: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        load: { byte0 : 15 }
        shift: 17
        buf_req: 17
        next: parse_extension_tunnel_decap
      0x****:
        0..3: W34  # bit[25] -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        16: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        load: { byte0 : 17 }
        shift: 17
        buf_req: 18
        next: parse_depth_pad
    parse_extension_tunnel_decap:
      match: [ byte0 ]
      0b******00:
        1: B32  # egress::hdr.ext_tunnel_decap.vb
        2..3: MH19  # egress::hdr.ext_tunnel_decap.vh
        H9: 4096  # value 1 -> H9 bit[12]: egress::hdr.ext_tunnel_decap.$valid
        clot 7 :
          start: 0
          length: 1
        load: { byte0 : 16, byte1 : 17 }
        shift: 4
        buf_req: 18
        next: parse_ethernet_310
      0b******10:
        1: B32  # egress::hdr.ext_tunnel_decap.vb
        2..3: MH19  # egress::hdr.ext_tunnel_decap.vh
        H9: 4096  # value 1 -> H9 bit[12]: egress::hdr.ext_tunnel_decap.$valid
        clot 7 :
          start: 0
          length: 1
        shift: 4
        buf_req: 4
        next: parse_ipv4_310
      0b******11:
        1: B32  # egress::hdr.ext_tunnel_decap.vb
        2..3: MH19  # egress::hdr.ext_tunnel_decap.vh
        H9: 4096  # value 1 -> H9 bit[12]: egress::hdr.ext_tunnel_decap.$valid
        clot 7 :
          start: 0
          length: 1
        shift: 4
        buf_req: 4
        next: parse_ipv6_310
      0x**:
        1: B32  # egress::hdr.ext_tunnel_decap.vb
        2..3: MH19  # egress::hdr.ext_tunnel_decap.vh
        H9: 4096  # value 1 -> H9 bit[12]: egress::hdr.ext_tunnel_decap.$valid
        clot 7 :
          start: 0
          length: 1
        load: { byte0 : 4 }
        shift: 4
        buf_req: 5
        next: parse_depth_pad
    parse_depth_pad:
      match: [ byte0 ]
      0b1*******:
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad_1
      0x**:
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad_2
    parse_depth_pad_1:
      match: [ byte0 ]
      0b1*******:
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad_2
      0x**:
        load: { byte0 : 0 }
        buf_req: 1
        next: end
    parse_depth_pad_2:
      match: [ byte0 ]
      0b1*******:
        load: { byte0 : 0 }
        buf_req: 1
        next: end
      0x**:
        buf_req: 0
        next: end
    parse_bridged_pkt_710_front:
      match: [ byte0 ]
      0b001101**:
        1: B23
            # - bit[0..5] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[6] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[7] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[0..5] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[6] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[7] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[8..10] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[11..12] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[13] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[14] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[15] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[8..10] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[11..12] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[15] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[96] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        15..16: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        17..20: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        21..22: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        23..24: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        25..26: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        27..28: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        27..28: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 3600
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
            # - value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        W34: 64  # value 1 -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        clot 5 :
          start: 3
          length: 9
        shift: 29
        buf_req: 29
        next: parse_bridged_pkt_spec_cpu_eth.$split_0
      0b001111**:
        1: B23
            # - bit[0..5] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[6] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[7] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[0..5] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[6] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[7] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[8..10] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[11..12] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[13] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[14] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[15] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[8..10] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[11..12] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[15] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[96] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        W34: 64  # value 1 -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        clot 5 :
          start: 3
          length: 9
        shift: 15
        buf_req: 15
        next: parse_bridged_pkt_c2c.$split_0
      0b011101**:
        1: B23
            # - bit[0..5] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[6] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[7] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[0..5] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[7] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[8..10] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[11..12] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[13] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[14] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[15] -> B22 bit[0]: egress::hdr.fabric_qos.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[96] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        shift: 15
        buf_req: 15
        next: parse_bridged_pkt_ipfix_ig.$split_0
      0b011110**:
        1: B23
            # - bit[0..5] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[6] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[7] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[0..5] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[7] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[8..10] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[11..12] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[13] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[14] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[15] -> B22 bit[0]: egress::hdr.fabric_qos.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[96] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        clot 5 :
          start: 3
          length: 9
        shift: 15
        buf_req: 15
        next: parse_bridged_pkt_ipfix_eg.$split_0
      0b000111**:
        4: B20  # egress::eg_md.eg_ft.common.dst_port
        15: B23
            # - bit[112..117] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[118] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[119] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        16: B22
            # - bit[120..122] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[123..124] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[125] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[126] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[127] -> B22 bit[0]: egress::hdr.fabric_qos.track
        21..22: MH20  # egress::hdr.fabric_data_template_plus.vh1
        26: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        27..28: H11
            # - bit[208] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[209..223] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 8  # value 8 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 17
          length: 9
        shift: 29
        buf_req: 29
        next: parse_bridged_pkt_trace.$split_0
      0b010110**:
        15: B23
            # - bit[112..117] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[118] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[119] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        16: B22
            # - bit[120..122] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[123..124] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[125] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[126] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[127] -> B22 bit[0]: egress::hdr.fabric_qos.track
        21..22: MH20  # egress::hdr.fabric_data_template_plus.vh1
        26: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        27..28: H11
            # - bit[208] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[209..223] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 21  # value 21 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 17
          length: 9
        shift: 29
        buf_req: 29
        next: parse_bridged_pkt_ccm_trace.$split_0
      0b010101**:
        2: B24
            # - bit[8..10] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[11..12] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[15] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        4: B20  # egress::eg_md.eg_ft.common.dst_port
        B25: 86
            # - value 21 -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        load: { byte0 : 27, byte1 : 28 }
        shift: 15
        buf_req: 29
        next: parse_mirror_ethernet
      0x**:
        shift: 1
        buf_req: 1
        next: end
    parse_bridged_pkt_spec_cpu_eth.$split_0:
      *:
        B42: 18  # value 18 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad
    parse_bridged_pkt_c2c.$split_0:
      *:
        B42: 17  # value 17 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad
    parse_bridged_pkt_ipfix_ig.$split_0:
      *:
        B42: 4  # value 4 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        load: { byte0 : 12, byte1 : 13 }
        buf_req: 14
        next: parse_mirror_ethernet
    parse_mirror_ethernet:
      match: [ byte0, byte1 ]
      0x893f:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        load: { byte0 : 20, byte1 : 21 }
        shift: 14
        buf_req: 22
        next: parse_mirror_1br
      0x****:
        0..1: H48  # egress::hdr.eg_ft.ethernet.dst_addr[47:32].32-47
        2..5: W9  # egress::hdr.eg_ft.ethernet.dst_addr[31:0].0-31
        6..7: H60  # egress::hdr.eg_ft.ethernet.src_addr[47:32].32-47
        8..9: H33  # egress::hdr.eg_ft.ethernet.src_addr[31:16].16-31
        10..11: H32  # egress::hdr.eg_ft.ethernet.src_addr[15:0].0-15
        12..13: MH1  # egress::hdr.eg_ft.ethernet.ether_type
        12..13: MH15  # egress::eg_md.eg_ft.common.ether_type
        H9: 16  # value 1 -> H9 bit[4]: egress::hdr.eg_ft.ethernet.$valid
        load: { byte0 : 14 }
        shift: 14
        buf_req: 15
        next: parse_depth_pad
    parse_mirror_1br:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H47
            # - bit[0..2] -> H47 bit[15..13]: egress::hdr.eg_ft.br_tag.epcp
            # - bit[3] -> H47 bit[12]: egress::hdr.eg_ft.br_tag.edei
            # - bit[4..15] -> H47 bit[11..0]: egress::hdr.eg_ft.br_tag.ingress_ecid
        2..5: W8
            # - bit[16..17] -> W8 bit[31..30]: egress::hdr.eg_ft.br_tag.reserved
            # - bit[18..19] -> W8 bit[29..28]: egress::hdr.eg_ft.br_tag.grp
            # - bit[20..31] -> W8 bit[27..16]: egress::hdr.eg_ft.br_tag.ecid
            # - bit[32..39] -> W8 bit[15..8]: egress::hdr.eg_ft.br_tag.ingress_ecid_ext
            # - bit[40..47] -> W8 bit[7..0]: egress::hdr.eg_ft.br_tag.ecid_ext
        6..7: MH2  # egress::hdr.eg_ft.br_tag.ether_type
        6..7: MH15  # egress::eg_md.eg_ft.common.ether_type
        B17: 1  # value 1 -> B17 bit[0]: egress::hdr.eg_ft.br_tag.$valid
        shift: 8
        buf_req: 8
        next: parse_mirror_1br_vlan
      0x****:
        0..1: H47
            # - bit[0..2] -> H47 bit[15..13]: egress::hdr.eg_ft.br_tag.epcp
            # - bit[3] -> H47 bit[12]: egress::hdr.eg_ft.br_tag.edei
            # - bit[4..15] -> H47 bit[11..0]: egress::hdr.eg_ft.br_tag.ingress_ecid
        2..5: W8
            # - bit[16..17] -> W8 bit[31..30]: egress::hdr.eg_ft.br_tag.reserved
            # - bit[18..19] -> W8 bit[29..28]: egress::hdr.eg_ft.br_tag.grp
            # - bit[20..31] -> W8 bit[27..16]: egress::hdr.eg_ft.br_tag.ecid
            # - bit[32..39] -> W8 bit[15..8]: egress::hdr.eg_ft.br_tag.ingress_ecid_ext
            # - bit[40..47] -> W8 bit[7..0]: egress::hdr.eg_ft.br_tag.ecid_ext
        6..7: MH2  # egress::hdr.eg_ft.br_tag.ether_type
        6..7: MH15  # egress::eg_md.eg_ft.common.ether_type
        B17: 1  # value 1 -> B17 bit[0]: egress::hdr.eg_ft.br_tag.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_mirror_1br_vlan:
      *:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        2..3: MH15  # egress::eg_md.eg_ft.common.ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_bridged_pkt_ipfix_eg.$split_0:
      *:
        B42: 5  # value 5 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        load: { byte0 : 12, byte1 : 13 }
        buf_req: 14
        next: parse_mirror_ethernet
    parse_bridged_pkt_trace.$split_0:
      *:
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad
    parse_bridged_pkt_ccm_trace.$split_0:
      *:
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad
    parse_bridged_pkt_910_ccm:
      *:
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24  # bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        W34: 64  # value 1 -> W34 bit[6]: egress::eg_md.eg_ft.common.from_cpu
        clot 5 :
          start: 3
          length: 9
        shift: 15
        buf_req: 15
        next: parse_bridged_pkt_910_ccm.$split_0
    parse_bridged_pkt_910_ccm.$split_0:
      *:
        B42: 11  # value 11 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad
    parse_bridged_pkt_signal:
      *:
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        7..8: MH20  # egress::hdr.fabric_data_template_plus.vh1
        12: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        13..14: H11
            # - bit[104] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[105..119] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 19  # value 19 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 3
          length: 9
        load: { byte0 : 23 }
        shift: 23
        buf_req: 24
        next: parse_depth_pad
    parse_bridged_pkt_110_recirc:
      *:
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25
            # - bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - bit[14] -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
            # - bit[15] -> B25 bit[0]: egress::eg_md.eg_ft.common.is_mcast
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24
            # - bit[16..18] -> B24 bit[7..5]: egress::eg_md.eg_ft.qos.tc
            # - bit[19..20] -> B24 bit[4..3]: egress::eg_md.eg_ft.qos.color
            # - bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        3..4: MH8  # egress::eg_md.eg_ft.common.decap_len
        9..10: MH20  # egress::hdr.fabric_data_template_plus.vh1
        14: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        15..16: H11
            # - bit[120] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[121..135] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 24  # value 24 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 5
          length: 9
        shift: 17
        buf_req: 17
        next: parse_pad
    start.$oob_stall_1:
      *:
        load: { byte0 : 5 }
        buf_req: 6
        next: parse_bridged_pkt_110_recirc_evpn
    parse_bridged_pkt_110_recirc_evpn:
      match: [ byte0 ]
      0b1*******:
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25  # bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24  # bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        3..4: MH8  # egress::eg_md.eg_ft.common.decap_len
        9..10: MH20  # egress::hdr.fabric_data_template_plus.vh1
        14: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        15..16: H11
            # - bit[120] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[121..135] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        15..16: H49  # bit[121..135] -> H49 bit[14..0]: egress::eg_md.eg_ft.common.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 25  # value 25 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 5
          length: 9
        load: { byte0 : 18 }
        shift: 17
        buf_req: 19
        next: parse_bridged_pkt_110_evpn_ext
      0x**:
        1: B23
            # - bit[8..13] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[14] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[15] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B25  # bit[8..13] -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
        2: B22
            # - bit[16..18] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[19..20] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[21] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[22] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[23] -> B22 bit[0]: egress::hdr.fabric_qos.track
        2: B24  # bit[23] -> B24 bit[0]: egress::eg_md.eg_ft.common.track
        3..4: MH8  # egress::eg_md.eg_ft.common.decap_len
        9..10: MH20  # egress::hdr.fabric_data_template_plus.vh1
        14: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        15..16: H11
            # - bit[120] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[121..135] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        15..16: H49  # bit[121..135] -> H49 bit[14..0]: egress::eg_md.eg_ft.common.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 25  # value 25 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 5
          length: 9
        load: { byte0 : 29, byte1 : 30 }
        shift: 17
        buf_req: 31
        next: parse_ethernet_evpn110
    parse_bridged_pkt_110_evpn_ext:
      match: [ byte0 ]
      0b****0***:
        1: B32  # egress::hdr.ext_tunnel_decap.vb
        2..3: MH19  # egress::hdr.ext_tunnel_decap.vh
        H9: 4096  # value 1 -> H9 bit[12]: egress::hdr.ext_tunnel_decap.$valid
        clot 7 :
          start: 0
          length: 1
        load: { byte0 : 16, byte1 : 17 }
        shift: 4
        buf_req: 18
        next: parse_ethernet_evpn110
      0b****1***:
        1: B32  # egress::hdr.ext_tunnel_decap.vb
        2..3: MH19  # egress::hdr.ext_tunnel_decap.vh
        H9: 4096  # value 1 -> H9 bit[12]: egress::hdr.ext_tunnel_decap.$valid
        clot 7 :
          start: 0
          length: 1
        shift: 4
        buf_req: 4
        next: parse_pw_cw
    parse_ethernet_evpn110:
      match: [ byte0, byte1 ]
      0x8100:
        12..13: MH23  # egress::hdr.eg_ft.ethernet_evpn.ether_type
        H9: 8192  # value 1 -> H9 bit[13]: egress::hdr.eg_ft.ethernet_evpn.$valid
        clot 3 :
          start: 0
          length: 12
        load: { byte0 : 16, byte1 : 17 }
        shift: 14
        buf_req: 18
        next: parse_vlan_evpn110
      0x****:
        12..13: MH23  # egress::hdr.eg_ft.ethernet_evpn.ether_type
        H9: 8192  # value 1 -> H9 bit[13]: egress::hdr.eg_ft.ethernet_evpn.$valid
        clot 3 :
          start: 0
          length: 12
        shift: 14
        buf_req: 14
        next: end
    parse_vlan_evpn110:
      match: [ byte0, byte1 ]
      0x8100:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_vlan1_evpn110
      0x****:
        0..1: H45
            # - bit[0..2] -> H45 bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp
            # - bit[3] -> H45 bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi
            # - bit[4..15] -> H45 bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid
        2..3: MH22  # egress::hdr.eg_ft.vlan_tag[0].ether_type
        B7: 4  # value 4 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan1_evpn110:
      *:
        0..1: H44
            # - bit[0..2] -> H44 bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp
            # - bit[3] -> H44 bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi
            # - bit[4..15] -> H44 bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid
        2..3: MH21  # egress::hdr.eg_ft.vlan_tag[1].ether_type
        B7: 2  # value 2 -> B7 bit[3..0]: egress::hdr.eg_ft.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_pw_cw:
      *:
        load: { byte0 : 16, byte1 : 17 }
        shift: 4
        buf_req: 18
        next: parse_ethernet_evpn110
    parse_xon_xoff_mirrored_metadata:
      *:
        0: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        3: B21  # egress::eg_md.eg_ft.common.backpush_dst_port
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        load: { byte0 : 16, byte1 : 17 }
        shift: 4
        buf_req: 18
        next: parse_mirror_ethernet
    parse_common_mirrored_metadata:
      *:
        0: B42  # egress::eg_md.eg_ft.common.cpu_eth_encap_id
        3: B20  # egress::eg_md.eg_ft.common.dst_port
        4: B23
            # - bit[32..37] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[38] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[39] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        5: B22
            # - bit[40..42] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[43..44] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[45] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[46] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[47] -> B22 bit[0]: egress::hdr.fabric_qos.track
        10..11: MH20  # egress::hdr.fabric_data_template_plus.vh1
        15: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        16..17: H11
            # - bit[128] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[129..143] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        clot 5 :
          start: 6
          length: 9
        load: { byte0 : 18 }
        shift: 18
        buf_req: 19
        next: parse_depth_pad
    parse_ig_uplink_ifit_mirrored_metadata:
      *:
        2: B23
            # - bit[16..21] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[22] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[23] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        3: B22
            # - bit[24..26] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[27..28] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[29] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[30] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[31] -> B22 bit[0]: egress::hdr.fabric_qos.track
        8..9: MH20  # egress::hdr.fabric_data_template_plus.vh1
        13: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        14..15: H11
            # - bit[112] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[113..127] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B42: 26  # value 26 -> B42 bit[7..0]: egress::eg_md.eg_ft.common.cpu_eth_encap_id
        clot 5 :
          start: 4
          length: 9
        shift: 16
        buf_req: 16
        next: parse_ig_uplink_ifit_mirrored_metadata.$split_0
    parse_ig_uplink_ifit_mirrored_metadata.$split_0:
      *:
        B25: 2  # value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        load: { byte0 : 0 }
        buf_req: 1
        next: parse_depth_pad
    parse_ghost:
      *:
        0: B23
            # - bit[0..5] -> B23 bit[7..2]: egress::hdr.fabric_base.pkt_type
            # - bit[6] -> B23 bit[1]: egress::hdr.fabric_base.is_mirror
            # - bit[7] -> B23 bit[0]: egress::hdr.fabric_base.is_mcast
        1: B22
            # - bit[8..10] -> B22 bit[7..5]: egress::hdr.fabric_qos.tc
            # - bit[11..12] -> B22 bit[4..3]: egress::hdr.fabric_qos.color
            # - bit[13] -> B22 bit[2]: egress::hdr.fabric_qos.chgDSCP_disable
            # - bit[14] -> B22 bit[1]: egress::hdr.fabric_qos.BA
            # - bit[15] -> B22 bit[0]: egress::hdr.fabric_qos.track
        6..7: MH20  # egress::hdr.fabric_data_template_plus.vh1
        11: B33  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7
        12..13: H11
            # - bit[96] -> H11 bit[15]: egress::hdr.fabric_data_template_plus.one
            # - bit[97..111] -> H11 bit[14..0]: egress::hdr.fabric_data_template_plus.iif
        H9: 3584
            # - value 1 -> H9 bit[9]: egress::hdr.fabric_base.$valid
            # - value 1 -> H9 bit[10]: egress::hdr.fabric_qos.$valid
            # - value 1 -> H9 bit[11]: egress::hdr.fabric_data_template_plus.$valid
        B25: 110
            # - value 27 -> B25 bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
            # - value 1 -> B25 bit[1]: egress::eg_md.eg_ft.common.is_mirror
        clot 5 :
          start: 2
          length: 9
        load: { byte0 : 14 }
        shift: 14
        buf_req: 15
        next: parse_depth_pad
deparser egress:
  dictionary:
    H48: H9(4)  # egress::hdr.eg_ft.ethernet.dst_addr.32-47 if egress::hdr.eg_ft.ethernet.$valid
    W9: H9(4)  # egress::hdr.eg_ft.ethernet.dst_addr.0-31 if egress::hdr.eg_ft.ethernet.$valid
    H60: H9(4)  # egress::hdr.eg_ft.ethernet.src_addr.32-47 if egress::hdr.eg_ft.ethernet.$valid
    H33: H9(4)  # egress::hdr.eg_ft.ethernet.src_addr.16-31 if egress::hdr.eg_ft.ethernet.$valid
    H32: H9(4)  # egress::hdr.eg_ft.ethernet.src_addr.0-15 if egress::hdr.eg_ft.ethernet.$valid
    MH1: H9(4)  # egress::hdr.eg_ft.ethernet.ether_type if egress::hdr.eg_ft.ethernet.$valid
    H47: B17(0)
        # - bit[15..13]: egress::hdr.eg_ft.br_tag.epcp if egress::hdr.eg_ft.br_tag.$valid
        # - bit[12]: egress::hdr.eg_ft.br_tag.edei if egress::hdr.eg_ft.br_tag.$valid
        # - bit[11..0]: egress::hdr.eg_ft.br_tag.ingress_ecid if egress::hdr.eg_ft.br_tag.$valid
    W8: B17(0)
        # - bit[31..30]: egress::hdr.eg_ft.br_tag.reserved if egress::hdr.eg_ft.br_tag.$valid
        # - bit[29..28]: egress::hdr.eg_ft.br_tag.grp if egress::hdr.eg_ft.br_tag.$valid
        # - bit[27..16]: egress::hdr.eg_ft.br_tag.ecid if egress::hdr.eg_ft.br_tag.$valid
        # - bit[15..8]: egress::hdr.eg_ft.br_tag.ingress_ecid_ext if egress::hdr.eg_ft.br_tag.$valid
        # - bit[7..0]: egress::hdr.eg_ft.br_tag.ecid_ext if egress::hdr.eg_ft.br_tag.$valid
    MH2: B17(0)  # egress::hdr.eg_ft.br_tag.ether_type if egress::hdr.eg_ft.br_tag.$valid
    B23: H9(9)
        # - bit[7..2]: egress::hdr.fabric_base.pkt_type if egress::hdr.fabric_base.$valid
        # - bit[1]: egress::hdr.fabric_base.is_mirror if egress::hdr.fabric_base.$valid
        # - bit[0]: egress::hdr.fabric_base.is_mcast if egress::hdr.fabric_base.$valid
    B22: H9(10)
        # - bit[7..5]: egress::hdr.fabric_qos.tc if egress::hdr.fabric_qos.$valid
        # - bit[4..3]: egress::hdr.fabric_qos.color if egress::hdr.fabric_qos.$valid
        # - bit[2]: egress::hdr.fabric_qos.chgDSCP_disable if egress::hdr.fabric_qos.$valid
        # - bit[1]: egress::hdr.fabric_qos.BA if egress::hdr.fabric_qos.$valid
        # - bit[0]: egress::hdr.fabric_qos.track if egress::hdr.fabric_qos.$valid
    clot 5:
      pov: hdr.fabric_data_template_plus.$valid
      4 : MH20
    B33: H9(11)  # egress::hdr.fabric_data_template_plus.vh3[7:0].0-7 if egress::hdr.fabric_data_template_plus.$valid
    H11: H9(11)
        # - bit[15]: egress::hdr.fabric_data_template_plus.one if egress::hdr.fabric_data_template_plus.$valid
        # - bit[14..0]: egress::hdr.fabric_data_template_plus.iif if egress::hdr.fabric_data_template_plus.$valid
    MH3: H9(14)  # egress::hdr.fabric_eth_etype.ether_type if egress::hdr.fabric_eth_etype.$valid
    H46: H9(15)  # egress::hdr.fabric_timestamp.timestamp.32-47 if egress::hdr.fabric_timestamp.$valid
    MW13: H9(15)  # egress::hdr.fabric_timestamp.timestamp.0-31 if egress::hdr.fabric_timestamp.$valid
    clot 7:
      pov: hdr.ext_tunnel_decap.$valid
    B32: H9(12)  # egress::hdr.ext_tunnel_decap.vb if egress::hdr.ext_tunnel_decap.$valid
    MH19: H9(12)  # egress::hdr.ext_tunnel_decap.vh if egress::hdr.ext_tunnel_decap.$valid
    clot 3:
      pov: hdr.eg_ft.ethernet_evpn.$valid
    MH23: H9(13)  # egress::hdr.eg_ft.ethernet_evpn.ether_type if egress::hdr.eg_ft.ethernet_evpn.$valid
    H45: B7(2)
        # - bit[15..13]: egress::hdr.eg_ft.vlan_tag[0].pcp if egress::hdr.eg_ft.vlan_tag[0].$valid
        # - bit[12]: egress::hdr.eg_ft.vlan_tag[0].cfi if egress::hdr.eg_ft.vlan_tag[0].$valid
        # - bit[11..0]: egress::hdr.eg_ft.vlan_tag[0].vid if egress::hdr.eg_ft.vlan_tag[0].$valid
    MH22: B7(2)  # egress::hdr.eg_ft.vlan_tag[0].ether_type if egress::hdr.eg_ft.vlan_tag[0].$valid
    H44: B7(1)
        # - bit[15..13]: egress::hdr.eg_ft.vlan_tag[1].pcp if egress::hdr.eg_ft.vlan_tag[1].$valid
        # - bit[12]: egress::hdr.eg_ft.vlan_tag[1].cfi if egress::hdr.eg_ft.vlan_tag[1].$valid
        # - bit[11..0]: egress::hdr.eg_ft.vlan_tag[1].vid if egress::hdr.eg_ft.vlan_tag[1].$valid
    MH21: B7(1)  # egress::hdr.eg_ft.vlan_tag[1].ether_type if egress::hdr.eg_ft.vlan_tag[1].$valid
    clot 2:
      pov: hdr.eg_ft.ipv4.$valid
      0 : H34
      10 : full_checksum 4
    H34: H9(6)
        # - bit[15..12]: egress::hdr.eg_ft.ipv6.version if egress::hdr.eg_ft.ipv6.$valid
        # - bit[11..4]: egress::hdr.eg_ft.ipv6.traffic_class if egress::hdr.eg_ft.ipv6.$valid
        # - bit[3..0]: egress::hdr.eg_ft.ipv6.flow_label.16-19 if egress::hdr.eg_ft.ipv6.$valid
    H35: H9(6)  # egress::hdr.eg_ft.ipv6.flow_label.0-15 if egress::hdr.eg_ft.ipv6.$valid
    clot 1:
      pov: hdr.eg_ft.ipv6.$valid
    clot 4:
      pov: hdr.eg_ft.ipv6_frag.$valid
    clot 6:
      pov: hdr.eg_ft.mpls_vc_eg.$valid
    clot 0:
      pov: hdr.pad.$valid
  partial_checksum 4: 
    - H34(0..7): { pov: H9(5) }  # bit[7..0]: egress::hdr.eg_ft.ipv4.diffserv if egress::hdr.eg_ft.ipv4.$valid
    - MH7: { pov: H9(5) }  # egress::eg_md.eg_ft.lkp.tmp_ipv4_checksum if egress::hdr.eg_ft.ipv4.$valid
  full_checksum 4: 
    - partial_checksum 4: { pov: H9(5) }
    - clot 2: { pov: H9(5) }
  drop_ctl: { B16(1..3): B16(0) }  # bit[3..1]: egress::eg_intr_md_for_dprsr.drop_ctl if egress::eg_intr_md_for_dprsr.drop_ctl.$valid
  mirr_io_sel: { MH18(0..0): H9(0) }  # bit[0]: egress::eg_intr_md_for_dprsr.mirror_io_select if egress::eg_intr_md_for_dprsr.mirror_io_select.$valid
  mtu_trunc_len: { MH17(0..13): B7(4) }  # bit[13..0]: egress::eg_intr_md_for_dprsr.mtu_trunc_len if egress::eg_intr_md_for_dprsr.mtu_trunc_len.$valid
  egress_unicast_port: { MH16(0..8): H9(1) }  # bit[8..0]: egress::eg_intr_md.egress_port if egress::eg_intr_md.egress_port.$valid
  mirror:
    select: { B4(0..3): H9(2) }  # bit[3..0]: egress::eg_intr_md_for_dprsr.mirror_type
    1:
      - MB9  # egress::eg_md.eg_ft.mirror.session_id
      - B19
          # - bit[7..5]: egress::eg_md.eg_ft.mirror.src
          # - bit[4..0]: egress::eg_md.eg_ft.mirror.type
      - MB9  # egress::eg_md.eg_ft.mirror.session_id
      - B23
          # - bit[7..2]: egress::hdr.fabric_base.pkt_type
          # - bit[1]: egress::hdr.fabric_base.is_mirror
          # - bit[0]: egress::hdr.fabric_base.is_mcast
      - B21  # egress::eg_md.eg_ft.common.backpush_dst_port
      - B27  # egress::eg_md.eg_ft.mirror.flags
      - B20  # egress::eg_md.eg_ft.common.dst_port
      - H61  # egress::eg_md.eg_ft.common.hash
      - H51  # egress::eg_md.eg_ft.common.mirror_dst_eport
      - H50(0..14)  # bit[14..0]: egress::eg_md.eg_ft.common.oif
      - H63  # egress::eg_md.eg_ft.ifit.var_h1
      - H49(0..14)  # bit[14..0]: egress::eg_md.eg_ft.common.iif
    7:
      - MB9  # egress::eg_md.eg_ft.mirror.session_id
      - B19
          # - bit[7..5]: egress::eg_md.eg_ft.mirror.src
          # - bit[4..0]: egress::eg_md.eg_ft.mirror.type
      - MB9  # egress::eg_md.eg_ft.mirror.session_id
      - H51  # egress::eg_md.eg_ft.common.mirror_dst_eport
      - B25
          # - bit[7..2]: egress::eg_md.eg_ft.common.pkt_type
          # - bit[1]: egress::eg_md.eg_ft.common.is_mirror
          # - bit[0]: egress::eg_md.eg_ft.common.is_mcast
      - B24
          # - bit[7..5]: egress::eg_md.eg_ft.qos.tc
          # - bit[4..3]: egress::eg_md.eg_ft.qos.color
          # - bit[0]: egress::eg_md.eg_ft.common.track
      - B26  # egress::eg_md.eg_ft.common.pipeline_location
      - B26  # egress::eg_md.eg_ft.common.pipeline_location
      - H62  # egress::eg_md.eg_ft.common.trace_counter
      - MB11  # egress::eg_md.eg_ft.common.drop_reason
      - MB11  # egress::eg_md.eg_ft.common.drop_reason
      - MW4  # egress::eg_md.eg_ft.common.deq_timedelta
      - H49(0..14)  # bit[14..0]: egress::eg_md.eg_ft.common.iif
      - H46  # egress::hdr.fabric_timestamp.timestamp.32-47
      - MW13  # egress::hdr.fabric_timestamp.timestamp.0-31
stage 0 ingress:
  mpr_stage_id: 0
  mpr_bus_dep_glob_exec: 0x0
  mpr_bus_dep_long_brch: 0x0
  mpr_always_run: 0x201f
  phase0_match IgParser_front.$PORT_METADATA:
    p4:
      name: IgParser_front.$PORT_METADATA
      size: 288
      preferred_match_type: exact
      match_type: exact
    size: 288
    p4_param_order:
      ig_intr_md.ingress_port: { type: exact, size: 9 }
    format: {port_type: 120..123, is_zero: 112..112}
    constant_value: 0
    actions:
      set_port_metadata:
      - handle: 0x20000000
      - p4_param_order: { port_type: 4, is_zero: 1 } 
  ternary_match tbl_set_egress_port 0:
    always_run: true
    p4: { name: tbl_set_egress_port, hidden: true }
    hit: [  END ]
    miss:  END
    indirect: tbl_set_egress_port$tind
  ternary_indirect tbl_set_egress_port$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_set_egress_port$tind(action, $DEFAULT)
    actions:
      set_egress_port(0, 11):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000001
      - next_table: 0
      - set ig_intr_md_for_tm.ucast_egress_port.$valid, 1
      - set MW9, 4
    default_action: set_egress_port


primitives: "switch_tofino_x1.prim.json"
dynhash: "switch_tofino_x1.dynhash.json"
