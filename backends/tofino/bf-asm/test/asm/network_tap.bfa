version:
  version: 1.0.1
  run_id: "adab53b4e08ee326"
  target: Tofino
phv ingress:
  ig_md.lkp.ip_proto: B11
  ig_md.lkp.ip_src_addr.0-31: W49
  ig_md.lkp.ip_src_addr.32-63: W50
  ig_md.lkp.ip_src_addr.64-95: W51
  ig_md.lkp.ip_src_addr.96-127: W52
  ig_md.lkp.ip_dst_addr.0-31: W53
  ig_md.lkp.ip_dst_addr.32-63: W54
  ig_md.lkp.ip_dst_addr.64-95: W55
  ig_md.lkp.ip_dst_addr.96-127: W56
  ig_md.lkp.l4_src_port: H9
  ig_md.lkp.l4_dst_port: H11
  ig_md.lkp.inner_l4_src_port: H10
  ig_md.lkp.inner_l4_dst_port: H12
  ig_md.count_index.0-7: B5
  ig_md.count_index.8-17: H6(0..9)
  ig_md.hash: W2
  ig_md.in_ig_port_type: B6(0..2)
  ig_md.trunc_type: B2(6..7)
  ig_md.action_type: W1(13..20)
  ig_md.ip_hdr_location: H3(0..7)
  ig_md.pkt_proto_type: H3(8..15)
  ig_md.port_group_id: W0(13..28)
  ig_md.tunnel_type.0-4: B6(3..7)
  ig_md.tunnel_type.5-5: B7(0)
  ig_md.vlan_index: H8
  ig_md.mirror.src: B9
  ig_md.mirror.type: B10
  ig_md.mirror.session_id: H2(0..9)
  hdr.bridged_md.src: B0
  hdr.bridged_md.pkt_proto_type: H3(8..15)
  hdr.bridged_md.ip_hdr_location: H3(0..7)
  hdr.bridged_md.pad1: B7(1..7)
  hdr.bridged_md.tunnel_type.0-4: B6(3..7)
  hdr.bridged_md.tunnel_type.5-5: B7(0)
  hdr.bridged_md.in_ig_port_type: B6(0..2)
  hdr.ethernet.dst_addr.0-15: H7
  hdr.ethernet.dst_addr.16-47: TW26
  hdr.ethernet.src_addr.0-15: TH25
  hdr.ethernet.src_addr.16-47: TW27
  hdr.ethernet.ether_type: H5
  hdr.ipv4.version: TW0(28..31)
  hdr.ipv4.ihl: TW0(24..27)
  hdr.ipv4.diffserv: TW0(16..23)
  hdr.ipv4.total_len: TW0(0..15)
  hdr.ipv4.identification.0-7: TB10
  hdr.ipv4.identification.8-15: TB11
  hdr.ipv4.flags: TB8(5..7)
  hdr.ipv4.frag_offset.0-7: TB9
  hdr.ipv4.frag_offset.8-12: TB8(0..4)
  hdr.ipv4.ttl: TW16(24..31)
  hdr.ipv4.protocol: TW16(16..23)
  hdr.ipv4.hdr_checksum: TW16(0..15)
  hdr.ipv4.src_addr.0-15: TH29
  hdr.ipv4.src_addr.16-31: TH36
  hdr.ipv4.dst_addr.0-15: TH37
  hdr.ipv4.dst_addr.16-31: TH38
  hdr.tcp.src_port: TW18(16..31)
  hdr.tcp.dst_port: TW18(0..15)
  hdr.tcp.seq_no: TW25
  hdr.tcp.ack_no.0-7: TB19
  hdr.tcp.ack_no.8-15: TB24
  hdr.tcp.ack_no.16-31: TH39
  hdr.tcp.data_offset: TW1(28..31)
  hdr.tcp.res: TW1(24..27)
  hdr.tcp.flags: TW1(16..23)
  hdr.tcp.window: TW1(0..15)
  hdr.tcp.checksum: TW19(16..31)
  hdr.tcp.urgent_ptr: TW19(0..15)
  hdr.gtpv2_8b.version: TH0(13..15)
  hdr.gtpv2_8b.pb: TH0(12)
  hdr.gtpv2_8b.tf: TH0(11)
  hdr.gtpv2_8b.spare1: TH0(8..10)
  hdr.gtpv2_8b.message_type: TH0(0..7)
  hdr.gtpv2_8b.total_len: TH1
  hdr.gtpv2_8b.seq_no.0-7: TB18
  hdr.gtpv2_8b.seq_no.8-23: TH26
  hdr.gtpv2_8b.spare2: TB17
  hdr.imsi.type: TW2(24..31)
  hdr.imsi.len: TW2(8..23)
  hdr.imsi.spare: TW2(4..7)
  hdr.imsi.instance: TW2(0..3)
  hdr.imsi.num_digit.0-31: TW17
  hdr.imsi.num_digit.32-63: TW24
  hdr.imsi.num_digit.64-79: TH24
  hdr.imsi.num_digit.80-95: TH27
  hdr.imsi.num_digit.96-103: TB16
  hdr.imsi.num_digit.104-111: TB25
  hdr.imsi.num_digit.112-127: TH28
  hdr.cause_ie_6b.type: TB1
  hdr.cause_ie_6b.len: TW3(16..31)
  hdr.cause_ie_6b.spare1: TW3(12..15)
  hdr.cause_ie_6b.instance: TW3(8..11)
  hdr.cause_ie_6b.cause_value: TW3(0..7)
  hdr.cause_ie_6b.spare2: TB0(3..7)
  hdr.cause_ie_6b.pce: TB0(2)
  hdr.cause_ie_6b.bce: TB0(1)
  hdr.cause_ie_6b.cs: TB0(0)
  hdr.cause_ie_10b.type: TB1
  hdr.cause_ie_10b.len: TW3(16..31)
  hdr.cause_ie_10b.spare1: TW3(12..15)
  hdr.cause_ie_10b.instance: TW3(8..11)
  hdr.cause_ie_10b.cause_value: TW3(0..7)
  hdr.cause_ie_10b.spare2: TB0(3..7)
  hdr.cause_ie_10b.pce: TB0(2)
  hdr.cause_ie_10b.bce: TB0(1)
  hdr.cause_ie_10b.cs: TB0(0)
  hdr.cause_ie_10b.type_oe: TH3(8..15)
  hdr.cause_ie_10b.len_oe.0-7: TH2(8..15)
  hdr.cause_ie_10b.len_oe.8-15: TH3(0..7)
  hdr.cause_ie_10b.spare_oe: TH2(4..7)
  hdr.cause_ie_10b.instance_oe: TH2(0..3)
  hdr.inner_ipv4.version: TW2(28..31)
  hdr.inner_ipv4.ihl: TW2(24..27)
  hdr.inner_ipv4.diffserv: TW2(16..23)
  hdr.inner_ipv4.total_len: TW2(0..15)
  hdr.inner_ipv4.identification: TH24
  hdr.inner_ipv4.flags: TH3(13..15)
  hdr.inner_ipv4.frag_offset: TH3(0..12)
  hdr.inner_ipv4.ttl: TW17(24..31)
  hdr.inner_ipv4.protocol: TW17(16..23)
  hdr.inner_ipv4.hdr_checksum: TW17(0..15)
  hdr.inner_ipv4.src_addr.0-7: TB16
  hdr.inner_ipv4.src_addr.8-15: TB25
  hdr.inner_ipv4.src_addr.16-31: TH40
  hdr.inner_ipv4.dst_addr.0-7: TB26
  hdr.inner_ipv4.dst_addr.8-15: TB27
  hdr.inner_ipv4.dst_addr.16-31: TH41
  hdr.inner_tcp.src_port: TH28
  hdr.inner_tcp.dst_port: TH27
  hdr.inner_tcp.seq_no: W6
  hdr.inner_tcp.ack_no: W7
  hdr.inner_tcp.data_offset: TW3(28..31)
  hdr.inner_tcp.res: TW3(24..27)
  hdr.inner_tcp.flags: TW3(16..23)
  hdr.inner_tcp.window: TW3(0..15)
  hdr.inner_tcp.checksum: TW24(16..31)
  hdr.inner_tcp.urgent_ptr: TW24(0..15)
  hdr.sip.data: W8
  hdr.inner_udp.src_port: TW3(16..31)
  hdr.inner_udp.dst_port: TW3(0..15)
  hdr.inner_udp.hdr_length: TW24(16..31)
  hdr.inner_udp.checksum: TW24(0..15)
  hdr.inner_icmp.type_: TW3(24..31)
  hdr.inner_icmp.code: TW3(16..23)
  hdr.inner_icmp.hdr_checksum: TW3(0..15)
  hdr.ipsec_esp.spi: W9
  hdr.ipsec_esp.sn: W10
  hdr.inner_ipv6.version: TW2(28..31)
  hdr.inner_ipv6.traffic_class: TW2(20..27)
  hdr.inner_ipv6.flow_label: TW2(0..19)
  hdr.inner_ipv6.payload_len: TH3
  hdr.inner_ipv6.next_hdr: B8
  hdr.inner_ipv6.hop_limit: TB16
  hdr.inner_ipv6.src_addr.0-31: W11
  hdr.inner_ipv6.src_addr.32-63: W12
  hdr.inner_ipv6.src_addr.64-95: W13
  hdr.inner_ipv6.src_addr.96-127: W14
  hdr.inner_ipv6.dst_addr.0-31: W15
  hdr.inner_ipv6.dst_addr.32-63: W32
  hdr.inner_ipv6.dst_addr.64-95: W33
  hdr.inner_ipv6.dst_addr.96-127: W34
  hdr.gtpv2_12b.version: TH0(13..15)
  hdr.gtpv2_12b.pb: TH0(12)
  hdr.gtpv2_12b.tf: TH0(11)
  hdr.gtpv2_12b.spare1: TH0(8..10)
  hdr.gtpv2_12b.message_type: TH0(0..7)
  hdr.gtpv2_12b.total_len: TH1
  hdr.gtpv2_12b.teid: W35
  hdr.gtpv2_12b.seq_no.0-7: TB18
  hdr.gtpv2_12b.seq_no.8-23: TH26
  hdr.gtpv2_12b.spare2: TB17
  hdr.udp.src_port: TW18(16..31)
  hdr.udp.dst_port: TW18(0..15)
  hdr.udp.hdr_length: TW19(16..31)
  hdr.udp.checksum: TW19(0..15)
  hdr.vxlan.flags: TW1(24..31)
  hdr.vxlan.reserved: TW1(0..23)
  hdr.vxlan.vni.0-7: TH0(8..15)
  hdr.vxlan.vni.8-23: TH1
  hdr.vxlan.reserved2: TH0(0..7)
  hdr.inner_ethernet.dst_addr.0-7: TB17
  hdr.inner_ethernet.dst_addr.8-15: TB18
  hdr.inner_ethernet.dst_addr.16-47: TW25
  hdr.inner_ethernet.src_addr.0-15: TH26
  hdr.inner_ethernet.src_addr.16-23: TB0
  hdr.inner_ethernet.src_addr.24-31: TB1
  hdr.inner_ethernet.src_addr.32-47: TH39
  hdr.inner_ethernet.ether_type: TH2
  hdr.gtpv1_8b.version: TH0(13..15)
  hdr.gtpv1_8b.pt: TH0(12)
  hdr.gtpv1_8b.reserved: TH0(11)
  hdr.gtpv1_8b.e: TH0(10)
  hdr.gtpv1_8b.s: TH0(9)
  hdr.gtpv1_8b.pn: TH0(8)
  hdr.gtpv1_8b.message_type: TH0(0..7)
  hdr.gtpv1_8b.message_len: TH1
  hdr.gtpv1_8b.teid: TW1
  hdr.gtpv1_12b.version: TH0(13..15)
  hdr.gtpv1_12b.pt: TH0(12)
  hdr.gtpv1_12b.reserved: TH0(11)
  hdr.gtpv1_12b.e: TH0(10)
  hdr.gtpv1_12b.s: TH0(9)
  hdr.gtpv1_12b.pn: TH0(8)
  hdr.gtpv1_12b.message_type: TH0(0..7)
  hdr.gtpv1_12b.message_len: TH1
  hdr.gtpv1_12b.teid: TW25
  hdr.gtpv1_12b.seq_no: TW1(16..31)
  hdr.gtpv1_12b.n_pdu_no: TW1(8..15)
  hdr.gtpv1_12b.next_ex_hdr_t: TW1(0..7)
  hdr.l2tp.TLxxSxOP: TW1(20..31)
  hdr.l2tp.version: TW1(16..19)
  hdr.l2tp.l2tp_length: TW1(8..15)
  hdr.l2tp.tunnel_id.0-7: TB0
  hdr.l2tp.tunnel_id.8-15: TW1(0..7)
  hdr.l2tp.session_id: TH26
  hdr.l2tp.Ns.0-7: TB18
  hdr.l2tp.Ns.8-15: TB19
  hdr.l2tp.Nr: TH0
  hdr.l2tp.offset_size: TB17
  hdr.l2tp.offset_pad: TB1
  hdr.pppoe.version: TH1(12..15)
  hdr.pppoe.type: TH1(8..11)
  hdr.pppoe.code: TH1(0..7)
  hdr.pppoe.session_id: TH2
  hdr.pppoe.pppoe_length: TW25(16..31)
  hdr.pppoe.ppp_proto: TW25(0..15)
  hdr.icmp.type_: TW1(24..31)
  hdr.icmp.code: TW1(16..23)
  hdr.icmp.hdr_checksum: TW1(0..15)
  hdr.sctp.src_port: TW1(16..31)
  hdr.sctp.dst_port: TW1(0..15)
  hdr.sctp.verifTag: TW2
  hdr.sctp.checksum: TH0
  hdr.gre.C: TH0(15)
  hdr.gre.R: TH0(14)
  hdr.gre.K: TH0(13)
  hdr.gre.S: TH0(12)
  hdr.gre.s: TH0(11)
  hdr.gre.recurse: TH0(8..10)
  hdr.gre.flags: TH0(3..7)
  hdr.gre.version: TH0(0..2)
  hdr.gre.proto.0-7: TB0
  hdr.gre.proto.8-15: TB1
  hdr.ipv6.version: TW0(28..31)
  hdr.ipv6.traffic_class: TW0(20..27)
  hdr.ipv6.flow_label: TW0(0..19)
  hdr.ipv6.payload_len: TW16(16..31)
  hdr.ipv6.next_hdr: TW16(8..15)
  hdr.ipv6.hop_limit: TW16(0..7)
  hdr.ipv6.src_addr.0-15: TH29
  hdr.ipv6.src_addr.16-31: TH36
  hdr.ipv6.src_addr.32-47: TH37
  hdr.ipv6.src_addr.48-63: TH38
  hdr.ipv6.src_addr.64-71: TB8
  hdr.ipv6.src_addr.72-79: TB9
  hdr.ipv6.src_addr.80-87: TB10
  hdr.ipv6.src_addr.88-95: TB11
  hdr.ipv6.src_addr.96-127: W36
  hdr.ipv6.dst_addr.0-31: W37
  hdr.ipv6.dst_addr.32-63: W38
  hdr.ipv6.dst_addr.64-95: W39
  hdr.ipv6.dst_addr.96-127: W40
  hdr.vlan_tag$0.pcp: H4(13..15)
  hdr.vlan_tag$0.cfi: H4(12)
  hdr.vlan_tag$0.vid: H4(0..11)
  hdr.vlan_tag$0.ether_type: TH4
  hdr.vlan_tag$1.pcp: TH5(13..15)
  hdr.vlan_tag$1.cfi: TH5(12)
  hdr.vlan_tag$1.vid: TH5(0..11)
  hdr.vlan_tag$1.ether_type.0-7: TB2
  hdr.vlan_tag$1.ether_type.8-15: TB3
  hdr.vlan_tag$2.pcp: TW8(29..31)
  hdr.vlan_tag$2.cfi: TW8(28)
  hdr.vlan_tag$2.vid: TW8(16..27)
  hdr.vlan_tag$2.ether_type: TW8(0..15)
  hdr.vlan_tag$3.pcp: TW9(29..31)
  hdr.vlan_tag$3.cfi: TW9(28)
  hdr.vlan_tag$3.vid: TW9(16..27)
  hdr.vlan_tag$3.ether_type: TW9(0..15)
  hdr.vlan_tag$4.pcp: TW10(29..31)
  hdr.vlan_tag$4.cfi: TW10(28)
  hdr.vlan_tag$4.vid: TW10(16..27)
  hdr.vlan_tag$4.ether_type: TW10(0..15)
  hdr.mpls$0.label: TW11(12..31)
  hdr.mpls$0.exp: TW11(9..11)
  hdr.mpls$0.bos: TW11(8)
  hdr.mpls$0.ttl: TW11(0..7)
  hdr.mpls$1.label.0-3: TH12(12..15)
  hdr.mpls$1.label.4-19: TH13
  hdr.mpls$1.exp: TH12(9..11)
  hdr.mpls$1.bos: TH12(8)
  hdr.mpls$1.ttl: TH12(0..7)
  hdr.mpls$2.label.0-3: TH14(12..15)
  hdr.mpls$2.label.4-19: TH15
  hdr.mpls$2.exp: TH14(9..11)
  hdr.mpls$2.bos: TH14(8)
  hdr.mpls$2.ttl: TH14(0..7)
  hdr.mpls$3.label.0-3: TH16(12..15)
  hdr.mpls$3.label.4-19: TH17
  hdr.mpls$3.exp: TH16(9..11)
  hdr.mpls$3.bos: TH16(8)
  hdr.mpls$3.ttl: TH16(0..7)
  hdr.fabric.pad1: W5(31)
  hdr.fabric.is_hit: W5(30)
  hdr.fabric.is_to_cn78: W5(29)
  hdr.fabric.is_to_td3: W5(28)
  hdr.fabric.is_hdr_decap: W5(27)
  hdr.fabric.ig_port_type: W5(24..26)
  hdr.fabric.pad2: W5(18..23)
  hdr.fabric.mac_index: W5(0..17)
  hdr.fabric.pad4: B4(4..7)
  hdr.fabric.flags_drop: B4(3)
  hdr.fabric.is_trunc_mir: B4(2)
  hdr.fabric.count_index.0-15: W3(16..31)
  hdr.fabric.count_index.16-17: B4(0..1)
  hdr.fabric.mc_index: W3(0..15)
  hdr.fabric.vlan_index: W4(16..31)
  hdr.fabric.ether_type: W4(0..15)
  hdr.fabric_from_cn78.action_type: W4(24..31)
  hdr.fabric_from_cn78.port_group_id: W3(16..31)
  hdr.fabric_from_cn78.ether_type: W3(0..15)
  ig_intr_md_for_tm.ucast_egress_port: H1(0..8)
  ig_intr_md_for_tm.bypass_egress: B2(5)
  ig_intr_md_for_tm.mcast_grp_b: H0
  ig_intr_md_for_tm.level1_mcast_hash: W0(0..12)
  ig_intr_md_for_tm.level2_mcast_hash: W1(0..12)
  ig_intr_md_for_dprsr.drop_ctl: B3(4..6)
  ig_intr_md_for_dprsr.mirror_type: B1(0..2)
  __pad_3: H2(10..15)
  __pad_4: H6(10..15)
  hdr.bridged_md.$valid: W41(0)
  hdr.ethernet.$valid: W41(1)
  hdr.ipv4.$valid: W41(2)
  hdr.tcp.$valid: W41(3)
  hdr.gtpv2_8b.$valid: W41(4)
  hdr.imsi.$valid: W41(5)
  hdr.cause_ie_6b.$valid: W41(6)
  hdr.cause_ie_10b.$valid: W41(7)
  hdr.inner_ipv4.$valid: W41(8)
  hdr.inner_tcp.$valid: W41(9)
  hdr.sip.$valid: W41(10)
  hdr.inner_udp.$valid: W41(11)
  hdr.inner_icmp.$valid: W41(12)
  hdr.ipsec_esp.$valid: W41(13)
  hdr.inner_ipv6.$valid: W41(14)
  hdr.gtpv2_12b.$valid: W41(15)
  hdr.udp.$valid: W41(16)
  hdr.vxlan.$valid: W41(17)
  hdr.inner_ethernet.$valid: W41(18)
  hdr.gtpv1_8b.$valid: W41(19)
  hdr.gtpv1_12b.$valid: W41(20)
  hdr.l2tp.$valid: W41(21)
  hdr.pppoe.$valid: W41(22)
  hdr.icmp.$valid: W41(23)
  hdr.sctp.$valid: W41(24)
  hdr.gre.$valid: W41(25)
  hdr.ipv6.$valid: W41(26)
  hdr.fabric.$valid: W41(27)
  hdr.fabric_from_cn78.$valid: W41(28)
  hdr.mpls.$stkvalid: B3(0..3)
  hdr.mpls$0.$valid: B3(3)
  hdr.mpls$1.$valid: B3(2)
  hdr.mpls$2.$valid: B3(1)
  hdr.mpls$3.$valid: B3(0)
  hdr.vlan_tag.$stkvalid: B2(0..4)
  hdr.vlan_tag$0.$valid: B2(4)
  hdr.vlan_tag$1.$valid: B2(3)
  hdr.vlan_tag$2.$valid: B2(2)
  hdr.vlan_tag$3.$valid: B2(1)
  hdr.vlan_tag$4.$valid: B2(0)
  context_json:
    TB8:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.flags, hdr.ipv4.frag_offset ] }
    TB9:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.frag_offset ] }
    TB10:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.identification ] }
    TB11:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.identification ] }
    TH29:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.src_addr ] }
    TH36:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.src_addr ] }
    TH37:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.dst_addr ] }
    TH38:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.dst_addr ] }
    TW26:
    - { name : hdr.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B0:
    - { name : hdr.bridged_md.src, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B1:
    - { name : ig_intr_md_for_dprsr.mirror_type, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    B2:
    - { name : hdr.vlan_tag$0.$valid, live_start : 0, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$1.$valid, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$2.$valid, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$3.$valid, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.bypass_egress, live_start : 0, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.trunc_type, live_start : 9, live_end : 11, mutually_exclusive_with: [  ] }
    B3:
    - { name : hdr.mpls$0.$valid, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls$1.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls$2.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls$3.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_dprsr.drop_ctl, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    B4:
    - { name : hdr.fabric.count_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.flags_drop, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_trunc_mir, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.pad4, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B5:
    - { name : ig_md.count_index, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B6:
    - { name : hdr.bridged_md.in_ig_port_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.bridged_md.tunnel_type, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.in_ig_port_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.tunnel_type, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    B7:
    - { name : hdr.bridged_md.pad1, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.bridged_md.tunnel_type, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.tunnel_type, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    B8:
    - { name : hdr.inner_ipv6.next_hdr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B9:
    - { name : ig_md.mirror.src, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    B10:
    - { name : ig_md.mirror.type, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    B11:
    - { name : ig_md.lkp.ip_proto, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    H0:
    - { name : ig_intr_md_for_tm.mcast_grp_b, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    H1:
    - { name : ig_intr_md_for_tm.ucast_egress_port, live_start : 10, live_end : deparser, mutually_exclusive_with: [  ] }
    H2:
    - { name : __pad_3, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.mirror.session_id, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    H3:
    - { name : hdr.bridged_md.ip_hdr_location, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.bridged_md.pkt_proto_type, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.ip_hdr_location, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.pkt_proto_type, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    H4:
    - { name : hdr.vlan_tag$0.cfi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$0.pcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$0.vid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H5:
    - { name : hdr.ethernet.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H6:
    - { name : __pad_4, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.count_index, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H7:
    - { name : hdr.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H8:
    - { name : ig_md.vlan_index, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H9:
    - { name : ig_md.lkp.l4_src_port, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    H10:
    - { name : ig_md.lkp.inner_l4_src_port, live_start : parser, live_end : 9, mutually_exclusive_with: [  ] }
    H11:
    - { name : ig_md.lkp.l4_dst_port, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    H12:
    - { name : ig_md.lkp.inner_l4_dst_port, live_start : parser, live_end : 9, mutually_exclusive_with: [  ] }
    W0:
    - { name : ig_intr_md_for_tm.level1_mcast_hash, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.port_group_id, live_start : 0, live_end : 1, mutually_exclusive_with: [  ] }
    W1:
    - { name : ig_intr_md_for_tm.level2_mcast_hash, live_start : 11, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.action_type, live_start : 0, live_end : 1, mutually_exclusive_with: [  ] }
    W2:
    - { name : ig_md.hash, live_start : 0, live_end : 11, mutually_exclusive_with: [  ] }
    W3:
    - { name : hdr.fabric.count_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.fabric_from_cn78.ether_type, hdr.fabric_from_cn78.port_group_id ] }
    - { name : hdr.fabric.mc_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.fabric_from_cn78.ether_type, hdr.fabric_from_cn78.port_group_id ] }
    - { name : hdr.fabric_from_cn78.ether_type, live_start : parser, live_end : 0, mutually_exclusive_with: [ hdr.fabric.count_index, hdr.fabric.mc_index ] }
    - { name : hdr.fabric_from_cn78.port_group_id, live_start : parser, live_end : 0, mutually_exclusive_with: [ hdr.fabric.count_index, hdr.fabric.mc_index ] }
    W4:
    - { name : hdr.fabric.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.fabric_from_cn78.action_type ] }
    - { name : hdr.fabric.vlan_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.fabric_from_cn78.action_type ] }
    - { name : hdr.fabric_from_cn78.action_type, live_start : parser, live_end : 0, mutually_exclusive_with: [ hdr.fabric.ether_type, hdr.fabric.vlan_index ] }
    W5:
    - { name : hdr.fabric.ig_port_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_hdr_decap, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_hit, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_to_cn78, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_to_td3, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.mac_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.pad1, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.pad2, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W6:
    - { name : hdr.inner_tcp.seq_no, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W7:
    - { name : hdr.inner_tcp.ack_no, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W8:
    - { name : hdr.sip.data, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W9:
    - { name : hdr.ipsec_esp.spi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W10:
    - { name : hdr.ipsec_esp.sn, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W11:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W12:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W13:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W14:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W15:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W32:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W33:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W34:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W35:
    - { name : hdr.gtpv2_12b.teid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W36:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W37:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W38:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W39:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W40:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W41:
    - { name : hdr.bridged_md.$valid, live_start : 9, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.cause_ie_10b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.cause_ie_6b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_from_cn78.$valid, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    - { name : hdr.gre.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv1_12b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv1_8b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv2_12b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv2_8b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.icmp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.imsi.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_icmp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_tcp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipsec_esp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.l2tp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.pppoe.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.sctp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.sip.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.tcp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vxlan.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W49:
    - { name : ig_md.lkp.ip_src_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W50:
    - { name : ig_md.lkp.ip_src_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W51:
    - { name : ig_md.lkp.ip_src_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W52:
    - { name : ig_md.lkp.ip_src_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W53:
    - { name : ig_md.lkp.ip_dst_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W54:
    - { name : ig_md.lkp.ip_dst_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W55:
    - { name : ig_md.lkp.ip_dst_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    W56:
    - { name : ig_md.lkp.ip_dst_addr, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
phv egress:
  eg_intr_md.egress_port: H16(0..8)
  eg_md.lkp.inner_l4_src_port: H25
  eg_md.lkp.inner_l4_dst_port: H26
  eg_md.in_ig_port_type: B20(0..2)
  eg_md.ip_hdr_location: H23(0..7)
  eg_md.pkt_proto_type: H23(8..15)
  hdr.fabric_to_cn78.pkt_proto_type: H23(8..15)
  hdr.fabric_to_cn78.ip_hdr_location: H23(0..7)
  hdr.fabric_to_cn78.payload_crc32: TH7
  hdr.fabric_to_cn78.ether_type: H18
  hdr.ethernet.dst_addr.0-15: H24
  hdr.ethernet.dst_addr.16-47: TW31
  hdr.ethernet.src_addr.0-15: TH6
  hdr.ethernet.src_addr.16-31: TH35
  hdr.ethernet.src_addr.32-47: TH42
  hdr.ethernet.ether_type: H19
  hdr.ipv4.version: TW4(28..31)
  hdr.ipv4.ihl: TW4(24..27)
  hdr.ipv4.diffserv: TW4(16..23)
  hdr.ipv4.total_len: TW4(0..15)
  hdr.ipv4.identification: TW20(16..31)
  hdr.ipv4.flags: TW20(13..15)
  hdr.ipv4.frag_offset: TW20(0..12)
  hdr.ipv4.ttl: TH31(8..15)
  hdr.ipv4.protocol: TH31(0..7)
  hdr.ipv4.hdr_checksum: TW22(0..15)
  hdr.ipv4.src_addr.0-15: TH43
  hdr.ipv4.src_addr.16-31: TH44
  hdr.ipv4.dst_addr.0-15: TH45
  hdr.ipv4.dst_addr.16-31: TH46
  hdr.tcp.src_port: TW23(16..31)
  hdr.tcp.dst_port: TW23(0..15)
  hdr.tcp.seq_no: TW30
  hdr.tcp.ack_no.0-7: TB23
  hdr.tcp.ack_no.8-15: TB28
  hdr.tcp.ack_no.16-31: TH47
  hdr.tcp.data_offset: TW5(28..31)
  hdr.tcp.res: TW5(24..27)
  hdr.tcp.flags: TW5(16..23)
  hdr.tcp.window: TW5(0..15)
  hdr.tcp.checksum: TH32
  hdr.tcp.urgent_ptr.0-7: TB21
  hdr.tcp.urgent_ptr.8-15: TB22
  hdr.gtpv2_8b.version: TH8(13..15)
  hdr.gtpv2_8b.pb: TH8(12)
  hdr.gtpv2_8b.tf: TH8(11)
  hdr.gtpv2_8b.spare1: TH8(8..10)
  hdr.gtpv2_8b.message_type: TH8(0..7)
  hdr.gtpv2_8b.total_len: TH9
  hdr.gtpv2_8b.seq_no.0-7: TH33(8..15)
  hdr.gtpv2_8b.seq_no.8-23: TH34
  hdr.gtpv2_8b.spare2: TH33(0..7)
  hdr.imsi.type: TW6(24..31)
  hdr.imsi.len: TW6(8..23)
  hdr.imsi.spare: TW6(4..7)
  hdr.imsi.instance: TW6(0..3)
  hdr.imsi.num_digit.0-31: TW21
  hdr.imsi.num_digit.32-63: TW28
  hdr.imsi.num_digit.64-95: TW29
  hdr.imsi.num_digit.96-103: TB20
  hdr.imsi.num_digit.104-111: TB29
  hdr.imsi.num_digit.112-127: TH30
  hdr.cause_ie_6b.type: TB5
  hdr.cause_ie_6b.len: TW7(16..31)
  hdr.cause_ie_6b.spare1: TW7(12..15)
  hdr.cause_ie_6b.instance: TW7(8..11)
  hdr.cause_ie_6b.cause_value: TW7(0..7)
  hdr.cause_ie_6b.spare2: TB4(3..7)
  hdr.cause_ie_6b.pce: TB4(2)
  hdr.cause_ie_6b.bce: TB4(1)
  hdr.cause_ie_6b.cs: TB4(0)
  hdr.cause_ie_10b.type: TB5
  hdr.cause_ie_10b.len: TW7(16..31)
  hdr.cause_ie_10b.spare1: TW7(12..15)
  hdr.cause_ie_10b.instance: TW7(8..11)
  hdr.cause_ie_10b.cause_value: TW7(0..7)
  hdr.cause_ie_10b.spare2: TB4(3..7)
  hdr.cause_ie_10b.pce: TB4(2)
  hdr.cause_ie_10b.bce: TB4(1)
  hdr.cause_ie_10b.cs: TB4(0)
  hdr.cause_ie_10b.type_oe: TH11(8..15)
  hdr.cause_ie_10b.len_oe.0-7: TH10(8..15)
  hdr.cause_ie_10b.len_oe.8-15: TH11(0..7)
  hdr.cause_ie_10b.spare_oe: TH10(4..7)
  hdr.cause_ie_10b.instance_oe: TH10(0..3)
  hdr.inner_ipv4.version: TW6(28..31)
  hdr.inner_ipv4.ihl: TW6(24..27)
  hdr.inner_ipv4.diffserv: TW6(16..23)
  hdr.inner_ipv4.total_len: TW6(0..15)
  hdr.inner_ipv4.identification: TH30
  hdr.inner_ipv4.flags: TH11(13..15)
  hdr.inner_ipv4.frag_offset: TH11(0..12)
  hdr.inner_ipv4.ttl: TW21(24..31)
  hdr.inner_ipv4.protocol: TW21(16..23)
  hdr.inner_ipv4.hdr_checksum: TW21(0..15)
  hdr.inner_ipv4.src_addr.0-7: TB20
  hdr.inner_ipv4.src_addr.8-15: TB29
  hdr.inner_ipv4.src_addr.16-23: TB30
  hdr.inner_ipv4.src_addr.24-31: TB31
  hdr.inner_ipv4.dst_addr: W18
  hdr.inner_tcp.src_port: TW28(16..31)
  hdr.inner_tcp.dst_port: TW28(0..15)
  hdr.inner_tcp.seq_no: W19
  hdr.inner_tcp.ack_no: W20
  hdr.inner_tcp.data_offset: TW7(28..31)
  hdr.inner_tcp.res: TW7(24..27)
  hdr.inner_tcp.flags: TW7(16..23)
  hdr.inner_tcp.window: TW7(0..15)
  hdr.inner_tcp.checksum: TW29(16..31)
  hdr.inner_tcp.urgent_ptr: TW29(0..15)
  hdr.sip.data: W21
  hdr.inner_udp.src_port: TW7(16..31)
  hdr.inner_udp.dst_port: TW7(0..15)
  hdr.inner_udp.hdr_length: TW28(16..31)
  hdr.inner_udp.checksum: TW28(0..15)
  hdr.inner_icmp.type_: TW7(24..31)
  hdr.inner_icmp.code: TW7(16..23)
  hdr.inner_icmp.hdr_checksum: TW7(0..15)
  hdr.ipsec_esp.spi: W22
  hdr.ipsec_esp.sn: W23
  hdr.inner_ipv6.version: TW6(28..31)
  hdr.inner_ipv6.traffic_class: TW6(20..27)
  hdr.inner_ipv6.flow_label: TW6(0..19)
  hdr.inner_ipv6.payload_len: TH11
  hdr.inner_ipv6.next_hdr: B19
  hdr.inner_ipv6.hop_limit: TB20
  hdr.inner_ipv6.src_addr.0-31: W18
  hdr.inner_ipv6.src_addr.32-63: W24
  hdr.inner_ipv6.src_addr.64-95: W25
  hdr.inner_ipv6.src_addr.96-127: W26
  hdr.inner_ipv6.dst_addr.0-31: W27
  hdr.inner_ipv6.dst_addr.32-63: W28
  hdr.inner_ipv6.dst_addr.64-95: W29
  hdr.inner_ipv6.dst_addr.96-127: W30
  hdr.gtpv2_12b.version: TH8(13..15)
  hdr.gtpv2_12b.pb: TH8(12)
  hdr.gtpv2_12b.tf: TH8(11)
  hdr.gtpv2_12b.spare1: TH8(8..10)
  hdr.gtpv2_12b.message_type: TH8(0..7)
  hdr.gtpv2_12b.total_len: TH9
  hdr.gtpv2_12b.teid: W31
  hdr.gtpv2_12b.seq_no.0-7: TH33(8..15)
  hdr.gtpv2_12b.seq_no.8-23: TH34
  hdr.gtpv2_12b.spare2: TH33(0..7)
  hdr.udp.src_port: TW23(16..31)
  hdr.udp.dst_port: TW23(0..15)
  hdr.udp.hdr_length: TH32
  hdr.udp.checksum.0-7: TB22
  hdr.udp.checksum.8-15: TB23
  hdr.vxlan.flags: TW5(24..31)
  hdr.vxlan.reserved: TW5(0..23)
  hdr.vxlan.vni.0-7: TH8(8..15)
  hdr.vxlan.vni.8-23: TH9
  hdr.vxlan.reserved2: TH8(0..7)
  hdr.inner_ethernet.dst_addr.0-7: TB4
  hdr.inner_ethernet.dst_addr.8-15: TB5
  hdr.inner_ethernet.dst_addr.16-47: TW30
  hdr.inner_ethernet.src_addr.0-15: TH33
  hdr.inner_ethernet.src_addr.16-31: TH34
  hdr.inner_ethernet.src_addr.32-47: TH47
  hdr.inner_ethernet.ether_type: TH10
  hdr.gtpv1_8b.version: TH8(13..15)
  hdr.gtpv1_8b.pt: TH8(12)
  hdr.gtpv1_8b.reserved: TH8(11)
  hdr.gtpv1_8b.e: TH8(10)
  hdr.gtpv1_8b.s: TH8(9)
  hdr.gtpv1_8b.pn: TH8(8)
  hdr.gtpv1_8b.message_type: TH8(0..7)
  hdr.gtpv1_8b.message_len: TH9
  hdr.gtpv1_8b.teid: TW5
  hdr.gtpv1_12b.version: TH8(13..15)
  hdr.gtpv1_12b.pt: TH8(12)
  hdr.gtpv1_12b.reserved: TH8(11)
  hdr.gtpv1_12b.e: TH8(10)
  hdr.gtpv1_12b.s: TH8(9)
  hdr.gtpv1_12b.pn: TH8(8)
  hdr.gtpv1_12b.message_type: TH8(0..7)
  hdr.gtpv1_12b.message_len: TH9
  hdr.gtpv1_12b.teid: TW30
  hdr.gtpv1_12b.seq_no: TW5(16..31)
  hdr.gtpv1_12b.n_pdu_no: TW5(8..15)
  hdr.gtpv1_12b.next_ex_hdr_t: TW5(0..7)
  hdr.l2tp.TLxxSxOP: TW5(20..31)
  hdr.l2tp.version: TW5(16..19)
  hdr.l2tp.l2tp_length: TW5(8..15)
  hdr.l2tp.tunnel_id.0-7: TB4
  hdr.l2tp.tunnel_id.8-15: TW5(0..7)
  hdr.l2tp.session_id: TH34
  hdr.l2tp.Ns: TH33
  hdr.l2tp.Nr: TH8
  hdr.l2tp.offset_size: TB21
  hdr.l2tp.offset_pad: TB5
  hdr.pppoe.version: TH9(12..15)
  hdr.pppoe.type: TH9(8..11)
  hdr.pppoe.code: TH9(0..7)
  hdr.pppoe.session_id: TH10
  hdr.pppoe.pppoe_length: TW30(16..31)
  hdr.pppoe.ppp_proto: TW30(0..15)
  hdr.icmp.type_: TW5(24..31)
  hdr.icmp.code: TW5(16..23)
  hdr.icmp.hdr_checksum: TW5(0..15)
  hdr.sctp.src_port: TW5(16..31)
  hdr.sctp.dst_port: TW5(0..15)
  hdr.sctp.verifTag: TW6
  hdr.sctp.checksum: TH8
  hdr.gre.C: TH8(15)
  hdr.gre.R: TH8(14)
  hdr.gre.K: TH8(13)
  hdr.gre.S: TH8(12)
  hdr.gre.s: TH8(11)
  hdr.gre.recurse: TH8(8..10)
  hdr.gre.flags: TH8(3..7)
  hdr.gre.version: TH8(0..2)
  hdr.gre.proto.0-7: TB4
  hdr.gre.proto.8-15: TB5
  hdr.ipv6.version: TW4(28..31)
  hdr.ipv6.traffic_class: TW4(20..27)
  hdr.ipv6.flow_label: TW4(0..19)
  hdr.ipv6.payload_len: TW20(16..31)
  hdr.ipv6.next_hdr: TW20(8..15)
  hdr.ipv6.hop_limit: TW20(0..7)
  hdr.ipv6.src_addr.0-15: TH31
  hdr.ipv6.src_addr.16-31: TH43
  hdr.ipv6.src_addr.32-47: TH44
  hdr.ipv6.src_addr.48-63: TH45
  hdr.ipv6.src_addr.64-95: TW22
  hdr.ipv6.src_addr.96-111: TH46
  hdr.ipv6.src_addr.112-127: H22
  hdr.ipv6.dst_addr.0-31: W44
  hdr.ipv6.dst_addr.32-63: W45
  hdr.ipv6.dst_addr.64-95: W46
  hdr.ipv6.dst_addr.96-127: W47
  hdr.vlan_tag$0.pcp: H21(13..15)
  hdr.vlan_tag$0.cfi: H21(12)
  hdr.vlan_tag$0.vid: H21(0..11)
  hdr.vlan_tag$0.ether_type.0-7: TB6
  hdr.vlan_tag$0.ether_type.8-15: TB7
  hdr.vlan_tag$1.pcp: TW12(29..31)
  hdr.vlan_tag$1.cfi: TW12(28)
  hdr.vlan_tag$1.vid: TW12(16..27)
  hdr.vlan_tag$1.ether_type: TW12(0..15)
  hdr.vlan_tag$2.pcp: TW13(29..31)
  hdr.vlan_tag$2.cfi: TW13(28)
  hdr.vlan_tag$2.vid: TW13(16..27)
  hdr.vlan_tag$2.ether_type: TW13(0..15)
  hdr.vlan_tag$3.pcp: TW14(29..31)
  hdr.vlan_tag$3.cfi: TW14(28)
  hdr.vlan_tag$3.vid: TW14(16..27)
  hdr.vlan_tag$3.ether_type: TW14(0..15)
  hdr.vlan_tag$4.pcp: TW15(29..31)
  hdr.vlan_tag$4.cfi: TW15(28)
  hdr.vlan_tag$4.vid: TW15(16..27)
  hdr.vlan_tag$4.ether_type: TW15(0..15)
  hdr.mpls$0.label.0-3: TH18(12..15)
  hdr.mpls$0.label.4-19: TH19
  hdr.mpls$0.exp: TH18(9..11)
  hdr.mpls$0.bos: TH18(8)
  hdr.mpls$0.ttl: TH18(0..7)
  hdr.mpls$1.label.0-3: TH20(12..15)
  hdr.mpls$1.label.4-19: TH21
  hdr.mpls$1.exp: TH20(9..11)
  hdr.mpls$1.bos: TH20(8)
  hdr.mpls$1.ttl: TH20(0..7)
  hdr.mpls$2.label.0-3: TH22(12..15)
  hdr.mpls$2.label.4-19: TH23
  hdr.mpls$2.exp: TH22(9..11)
  hdr.mpls$2.bos: TH22(8)
  hdr.mpls$2.ttl: TH22(0..7)
  hdr.mpls$3.label.0-3: TB12(4..7)
  hdr.mpls$3.label.4-11: TB14
  hdr.mpls$3.label.12-19: TB15
  hdr.mpls$3.exp: TB12(1..3)
  hdr.mpls$3.bos: TB12(0)
  hdr.mpls$3.ttl: TB13
  hdr.fabric.pad1: W16(31)
  hdr.fabric.is_hit: W16(30)
  hdr.fabric.is_to_cn78: W16(29)
  hdr.fabric.is_to_td3: W16(28)
  hdr.fabric.is_hdr_decap: W16(27)
  hdr.fabric.ig_port_type: W16(24..26)
  hdr.fabric.pad2: W16(18..23)
  hdr.fabric.mac_index: W16(0..17)
  hdr.fabric.pad4: W17(28..31)
  hdr.fabric.flags_drop: W17(27)
  hdr.fabric.is_trunc_mir: W17(26)
  hdr.fabric.count_index: W17(8..25)
  hdr.fabric.mc_index.0-7: B18
  hdr.fabric.mc_index.8-15: W17(0..7)
  hdr.fabric.vlan_index: H20
  hdr.fabric.ether_type: H17
  hdr.fabric_to_cn78.$valid: W48(0)
  hdr.ethernet.$valid: W48(1)
  hdr.ipv4.$valid: W48(2)
  hdr.tcp.$valid: W48(3)
  hdr.gtpv2_8b.$valid: W48(4)
  hdr.imsi.$valid: W48(5)
  hdr.cause_ie_6b.$valid: W48(6)
  hdr.cause_ie_10b.$valid: W48(7)
  hdr.inner_ipv4.$valid: W48(8)
  hdr.inner_tcp.$valid: W48(9)
  hdr.sip.$valid: W48(10)
  hdr.inner_udp.$valid: W48(11)
  hdr.inner_icmp.$valid: W48(12)
  hdr.ipsec_esp.$valid: W48(13)
  hdr.inner_ipv6.$valid: W48(14)
  hdr.gtpv2_12b.$valid: W48(15)
  hdr.udp.$valid: W48(16)
  hdr.vxlan.$valid: W48(17)
  hdr.inner_ethernet.$valid: W48(18)
  hdr.gtpv1_8b.$valid: W48(19)
  hdr.gtpv1_12b.$valid: W48(20)
  hdr.l2tp.$valid: W48(21)
  hdr.pppoe.$valid: W48(22)
  hdr.icmp.$valid: W48(23)
  hdr.sctp.$valid: W48(24)
  hdr.gre.$valid: W48(25)
  hdr.ipv6.$valid: W48(26)
  hdr.fabric.$valid: W48(27)
  hdr.mpls.$stkvalid: B17(0..3)
  hdr.mpls$0.$valid: B17(3)
  hdr.mpls$1.$valid: B17(2)
  hdr.mpls$2.$valid: B17(1)
  hdr.mpls$3.$valid: B17(0)
  hdr.vlan_tag.$stkvalid: B16(0..4)
  hdr.vlan_tag$0.$valid: B16(4)
  hdr.vlan_tag$1.$valid: B16(3)
  hdr.vlan_tag$2.$valid: B16(2)
  hdr.vlan_tag$3.$valid: B16(1)
  hdr.vlan_tag$4.$valid: B16(0)
  context_json:
    TH31:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.protocol, hdr.ipv4.ttl ] }
    TH43:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.src_addr ] }
    TH44:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.src_addr ] }
    TH45:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.dst_addr ] }
    TH46:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.dst_addr ] }
    TW22:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.ipv4.hdr_checksum ] }
    TW31:
    - { name : hdr.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B16:
    - { name : hdr.vlan_tag$0.$valid, live_start : 0, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$1.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$2.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$3.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B17:
    - { name : hdr.mpls$0.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls$1.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls$2.$valid, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls$3.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.mpls.$stkvalid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B18:
    - { name : hdr.fabric.mc_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B19:
    - { name : hdr.inner_ipv6.next_hdr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    B20:
    - { name : eg_md.in_ig_port_type, live_start : parser, live_end : 0, mutually_exclusive_with: [  ] }
    H16:
    - { name : eg_intr_md.egress_port, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H17:
    - { name : hdr.fabric.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H18:
    - { name : hdr.fabric_to_cn78.ether_type, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    H19:
    - { name : hdr.ethernet.ether_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H20:
    - { name : hdr.fabric.vlan_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H21:
    - { name : hdr.vlan_tag$0.cfi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$0.pcp, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vlan_tag$0.vid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H22:
    - { name : hdr.ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H23:
    - { name : eg_md.ip_hdr_location, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : eg_md.pkt_proto_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_to_cn78.ip_hdr_location, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_to_cn78.pkt_proto_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H24:
    - { name : hdr.ethernet.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H25:
    - { name : eg_md.lkp.inner_l4_src_port, live_start : parser, live_end : 3, mutually_exclusive_with: [  ] }
    H26:
    - { name : eg_md.lkp.inner_l4_dst_port, live_start : parser, live_end : 3, mutually_exclusive_with: [  ] }
    W16:
    - { name : hdr.fabric.ig_port_type, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_hdr_decap, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_hit, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_to_cn78, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_to_td3, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.mac_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.pad1, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.pad2, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W17:
    - { name : hdr.fabric.count_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.flags_drop, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.is_trunc_mir, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.mc_index, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.pad4, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W18:
    - { name : hdr.inner_ipv4.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.inner_ipv6.src_addr ] }
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [ hdr.inner_ipv4.dst_addr ] }
    W19:
    - { name : hdr.inner_tcp.seq_no, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W20:
    - { name : hdr.inner_tcp.ack_no, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W21:
    - { name : hdr.sip.data, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W22:
    - { name : hdr.ipsec_esp.spi, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W23:
    - { name : hdr.ipsec_esp.sn, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W24:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W25:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W26:
    - { name : hdr.inner_ipv6.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W27:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W28:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W29:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W30:
    - { name : hdr.inner_ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W31:
    - { name : hdr.gtpv2_12b.teid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W44:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W45:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W46:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W47:
    - { name : hdr.ipv6.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W48:
    - { name : hdr.cause_ie_10b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.cause_ie_6b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.fabric_to_cn78.$valid, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gre.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv1_12b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv1_8b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv2_12b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.gtpv2_8b.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.icmp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.imsi.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_icmp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_tcp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipsec_esp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipv6.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.l2tp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.pppoe.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.sctp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.sip.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.tcp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vxlan.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
parser ingress:
  start: $entry_point
  init_zero: [ B11, W49, W50, W51, W52, W53, W54, W55, W56, H9, H11, H10, H12, B5, H6, W2, B6, B2, W1, W0, H8, B9, B10, H2, B3, W41, B0 ]
  bitwise_or: [ B2, B3, W41 ]
  hdr_len_adj: 16
  states:
    $entry_point:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: start
    start:
      match: [ byte1 ]
      0b1*******:
        shift: 8
        buf_req: 8
        next: end
      0b0*******:
        load: { half : 28..29 }
        shift: 8
        buf_req: 30
        next: TofinoIngressParserInner_2_parse_port_metadata
    TofinoIngressParserInner_2_parse_port_metadata:
      match: [ half ]
      0x0800:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        shift: 22
        buf_req: 22
        next: parse_ipv4
      0x86dd:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        shift: 22
        buf_req: 22
        next: parse_ipv6
      0x8100:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        load: { half : 24..25 }
        shift: 22
        buf_req: 26
        next: parse_vlan
      0x8847:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        load: { byte1 : 24 }
        shift: 22
        buf_req: 25
        next: parse_mpls
      0x81fe:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        shift: 22
        buf_req: 22
        next: TofinoIngressParserInner_2_parse_port_metadata.$oob_stall_0
      0x81ff:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        load: { half : 26..27 }
        shift: 22
        buf_req: 28
        next: parse_from_cn78
      0x****:
        0: B6  # bit[5..7] -> B6 bit[2..0]: ingress::ig_md.in_ig_port_type
        8..11: TW26  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        12..13: H7  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        14..17: TW27  # ingress::hdr.ethernet.src_addr[47:16].16-47
        18..19: TH25  # ingress::hdr.ethernet.src_addr[15:0].0-15
        20..21: H5  # ingress::hdr.ethernet.ether_type
        W41: 2  # value 1 -> W41 bit[1]: ingress::hdr.ethernet.$valid
        shift: 22
        buf_req: 22
        next: end
    parse_ipv4:
      *:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv4.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ipv4.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ipv4.total_len
        4: TB11  # ingress::hdr.ipv4.identification[15:8].8-15
        5: TB10  # ingress::hdr.ipv4.identification[7:0].0-7
        6: TB8
            # - bit[48..50] -> TB8 bit[7..5]: ingress::hdr.ipv4.flags
            # - bit[51..55] -> TB8 bit[4..0]: ingress::hdr.ipv4.frag_offset[12:8].8-12
        7: TB9  # ingress::hdr.ipv4.frag_offset[7:0].0-7
        8..11: TW16
            # - bit[64..71] -> TW16 bit[31..24]: ingress::hdr.ipv4.ttl
            # - bit[72..79] -> TW16 bit[23..16]: ingress::hdr.ipv4.protocol
            # - bit[80..95] -> TW16 bit[15..0]: ingress::hdr.ipv4.hdr_checksum
        12..13: TH36  # ingress::hdr.ipv4.src_addr[31:16].16-31
        12..15: W49  # ingress::ig_md.lkp.ip_src_addr[31:0].0-31
        14..15: TH29  # ingress::hdr.ipv4.src_addr[15:0].0-15
        16..17: TH38  # ingress::hdr.ipv4.dst_addr[31:16].16-31
        16..19: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        18..19: TH37  # ingress::hdr.ipv4.dst_addr[15:0].0-15
        load: { byte1 : 9 }
        shift: 9
        buf_req: 20
        next: parse_ipv4.$split_0
    parse_ipv4.$split_0:
      match: [ byte1 ]
      0x06:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        shift: 11
        buf_req: 11
        next: parse_tcp
      0x11:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        load: { half : 13..14 }
        shift: 11
        buf_req: 15
        next: parse_udp
      0x01:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        shift: 11
        buf_req: 11
        next: parse_icmp
      0x84:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        load: { half : 13..14 }
        shift: 11
        buf_req: 15
        next: parse_sctp
      0x29:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        shift: 11
        buf_req: 11
        next: parse_inner_ipv6
      0x04:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        load: { byte1 : 20 }
        shift: 11
        buf_req: 21
        next: parse_inner_ipv4
      0x2f:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 11
        buf_req: 15
        next: parse_gre
      0x**:
        0: B11  # ingress::ig_md.lkp.ip_proto
        W41: 4  # value 1 -> W41 bit[2]: ingress::hdr.ipv4.$valid
        shift: 11
        buf_req: 11
        next: end
    parse_tcp:
      *:
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.tcp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.tcp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW25  # ingress::hdr.tcp.seq_no
        8..9: TH39  # ingress::hdr.tcp.ack_no[31:16].16-31
        10: TB24  # ingress::hdr.tcp.ack_no[15:8].8-15
        11: TB19  # ingress::hdr.tcp.ack_no[7:0].0-7
        12..15: TW1
            # - bit[96..99] -> TW1 bit[31..28]: ingress::hdr.tcp.data_offset
            # - bit[100..103] -> TW1 bit[27..24]: ingress::hdr.tcp.res
            # - bit[104..111] -> TW1 bit[23..16]: ingress::hdr.tcp.flags
            # - bit[112..127] -> TW1 bit[15..0]: ingress::hdr.tcp.window
        16..19: TW19
            # - bit[128..143] -> TW19 bit[31..16]: ingress::hdr.tcp.checksum
            # - bit[144..159] -> TW19 bit[15..0]: ingress::hdr.tcp.urgent_ptr
        load: { half : 2..3 }
        shift: 20
        buf_req: 20
        next: parse_tcp.$split_0
    parse_tcp.$split_0:
      match: [ half ]
      0x01bb:
        W41: 8  # value 1 -> W41 bit[3]: ingress::hdr.tcp.$valid
        buf_req: 0
        next: end
      0x084b:
        W41: 8  # value 1 -> W41 bit[3]: ingress::hdr.tcp.$valid
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv2
      0x****:
        W41: 8  # value 1 -> W41 bit[3]: ingress::hdr.tcp.$valid
        buf_req: 0
        next: end
    parse_gtpv2:
      match: [ byte1 ]
      0b***0****:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv2_8b
      0b***1****:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv2_12b
      0x**:
        buf_req: 0
        next: end
    parse_gtpv2_8b:
      match: [ byte1 ]
      0x20:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x26:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x27:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x47:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x67:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x85:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x88:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x97:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x9f:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa2:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa4:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa6:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x68:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x82:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xff:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_volte
      0x**:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_8b.total_len
        4..5: TH26  # ingress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6: TB18  # ingress::hdr.gtpv2_8b.seq_no[7:0].0-7
        7: TB17  # ingress::hdr.gtpv2_8b.spare2
        W41: 16  # value 1 -> W41 bit[4]: ingress::hdr.gtpv2_8b.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_gtp_base:
      match: [ half, byte0 ]
      0x01****:
        0..3: TW2
            # - bit[0..7] -> TW2 bit[31..24]: ingress::hdr.imsi.type
            # - bit[8..23] -> TW2 bit[23..8]: ingress::hdr.imsi.len
            # - bit[24..27] -> TW2 bit[7..4]: ingress::hdr.imsi.spare
            # - bit[28..31] -> TW2 bit[3..0]: ingress::hdr.imsi.instance
        4..5: TH28  # ingress::hdr.imsi.num_digit[127:112].112-127
        6: TB25  # ingress::hdr.imsi.num_digit[111:104].104-111
        7: TB16  # ingress::hdr.imsi.num_digit[103:96].96-103
        8..9: TH27  # ingress::hdr.imsi.num_digit[95:80].80-95
        10..11: TH24  # ingress::hdr.imsi.num_digit[79:64].64-79
        12..15: TW24  # ingress::hdr.imsi.num_digit[63:32].32-63
        16..19: TW17  # ingress::hdr.imsi.num_digit[31:0].0-31
        W41: 32  # value 1 -> W41 bit[5]: ingress::hdr.imsi.$valid
        shift: 20
        buf_req: 20
        next: end
      0x020002:
        0: TB1  # ingress::hdr.cause_ie_6b.type
        1..4: TW3
            # - bit[8..23] -> TW3 bit[31..16]: ingress::hdr.cause_ie_6b.len
            # - bit[24..27] -> TW3 bit[15..12]: ingress::hdr.cause_ie_6b.spare1
            # - bit[28..31] -> TW3 bit[11..8]: ingress::hdr.cause_ie_6b.instance
            # - bit[32..39] -> TW3 bit[7..0]: ingress::hdr.cause_ie_6b.cause_value
        5: TB0
            # - bit[40..44] -> TB0 bit[7..3]: ingress::hdr.cause_ie_6b.spare2
            # - bit[45] -> TB0 bit[2]: ingress::hdr.cause_ie_6b.pce
            # - bit[46] -> TB0 bit[1]: ingress::hdr.cause_ie_6b.bce
            # - bit[47] -> TB0 bit[0]: ingress::hdr.cause_ie_6b.cs
        W41: 64  # value 1 -> W41 bit[6]: ingress::hdr.cause_ie_6b.$valid
        shift: 6
        buf_req: 6
        next: parse_imsi
      0x020006:
        0: TB1  # ingress::hdr.cause_ie_10b.type
        1..4: TW3
            # - bit[8..23] -> TW3 bit[31..16]: ingress::hdr.cause_ie_10b.len
            # - bit[24..27] -> TW3 bit[15..12]: ingress::hdr.cause_ie_10b.spare1
            # - bit[28..31] -> TW3 bit[11..8]: ingress::hdr.cause_ie_10b.instance
            # - bit[32..39] -> TW3 bit[7..0]: ingress::hdr.cause_ie_10b.cause_value
        5: TB0
            # - bit[40..44] -> TB0 bit[7..3]: ingress::hdr.cause_ie_10b.spare2
            # - bit[45] -> TB0 bit[2]: ingress::hdr.cause_ie_10b.pce
            # - bit[46] -> TB0 bit[1]: ingress::hdr.cause_ie_10b.bce
            # - bit[47] -> TB0 bit[0]: ingress::hdr.cause_ie_10b.cs
        6..7: TH3
            # - bit[48..55] -> TH3 bit[15..8]: ingress::hdr.cause_ie_10b.type_oe
            # - bit[56..63] -> TH3 bit[7..0]: ingress::hdr.cause_ie_10b.len_oe[15:8].8-15
        8..9: TH2
            # - bit[64..71] -> TH2 bit[15..8]: ingress::hdr.cause_ie_10b.len_oe[7:0].0-7
            # - bit[72..75] -> TH2 bit[7..4]: ingress::hdr.cause_ie_10b.spare_oe
            # - bit[76..79] -> TH2 bit[3..0]: ingress::hdr.cause_ie_10b.instance_oe
        W41: 128  # value 1 -> W41 bit[7]: ingress::hdr.cause_ie_10b.$valid
        shift: 10
        buf_req: 10
        next: parse_imsi
      0x******:
        buf_req: 0
        next: end
    parse_imsi:
      *:
        0..3: TW2
            # - bit[0..7] -> TW2 bit[31..24]: ingress::hdr.imsi.type
            # - bit[8..23] -> TW2 bit[23..8]: ingress::hdr.imsi.len
            # - bit[24..27] -> TW2 bit[7..4]: ingress::hdr.imsi.spare
            # - bit[28..31] -> TW2 bit[3..0]: ingress::hdr.imsi.instance
        4..5: TH28  # ingress::hdr.imsi.num_digit[127:112].112-127
        6: TB25  # ingress::hdr.imsi.num_digit[111:104].104-111
        7: TB16  # ingress::hdr.imsi.num_digit[103:96].96-103
        8..9: TH27  # ingress::hdr.imsi.num_digit[95:80].80-95
        10..11: TH24  # ingress::hdr.imsi.num_digit[79:64].64-79
        12..15: TW24  # ingress::hdr.imsi.num_digit[63:32].32-63
        16..19: TW17  # ingress::hdr.imsi.num_digit[31:0].0-31
        W41: 32  # value 1 -> W41 bit[5]: ingress::hdr.imsi.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_volte:
      match: [ byte1 ]
      0x4*:
        load: { byte1 : 9 }
        buf_req: 10
        next: parse_inner_ipv4
      0x6*:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv6.version
            # - bit[4..11] -> TW2 bit[27..20]: ingress::hdr.inner_ipv6.traffic_class
            # - bit[12..31] -> TW2 bit[19..0]: ingress::hdr.inner_ipv6.flow_label
        4..5: TH3  # ingress::hdr.inner_ipv6.payload_len
        6: B8  # ingress::hdr.inner_ipv6.next_hdr
        7: TB16  # ingress::hdr.inner_ipv6.hop_limit
        8..11: W14  # ingress::hdr.inner_ipv6.src_addr[127:96].96-127
        12..15: W13  # ingress::hdr.inner_ipv6.src_addr[95:64].64-95
        16..19: W12  # ingress::hdr.inner_ipv6.src_addr[63:32].32-63
        W41: 16384  # value 1 -> W41 bit[14]: ingress::hdr.inner_ipv6.$valid
        load: { byte1 : 6 }
        shift: 20
        buf_req: 20
        next: parse_inner_ipv6.$split_0
      0x**:
        buf_req: 0
        next: end
    parse_inner_ipv4:
      match: [ byte1 ]
      0x06:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW2 bit[27..24]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW2 bit[23..16]: ingress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW2 bit[15..0]: ingress::hdr.inner_ipv4.total_len
        4..5: TH24  # ingress::hdr.inner_ipv4.identification
        6..7: TH3
            # - bit[48..50] -> TH3 bit[15..13]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH3 bit[12..0]: ingress::hdr.inner_ipv4.frag_offset
        8..11: TW17
            # - bit[64..71] -> TW17 bit[31..24]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW17 bit[23..16]: ingress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW17 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..13: TH40  # ingress::hdr.inner_ipv4.src_addr[31:16].16-31
        14: TB25  # ingress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB16  # ingress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..17: TH41  # ingress::hdr.inner_ipv4.dst_addr[31:16].16-31
        18: TB27  # ingress::hdr.inner_ipv4.dst_addr[15:8].8-15
        19: TB26  # ingress::hdr.inner_ipv4.dst_addr[7:0].0-7
        W41: 256  # value 1 -> W41 bit[8]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_tcp
      0x11:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW2 bit[27..24]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW2 bit[23..16]: ingress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW2 bit[15..0]: ingress::hdr.inner_ipv4.total_len
        4..5: TH24  # ingress::hdr.inner_ipv4.identification
        6..7: TH3
            # - bit[48..50] -> TH3 bit[15..13]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH3 bit[12..0]: ingress::hdr.inner_ipv4.frag_offset
        8..11: TW17
            # - bit[64..71] -> TW17 bit[31..24]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW17 bit[23..16]: ingress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW17 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..13: TH40  # ingress::hdr.inner_ipv4.src_addr[31:16].16-31
        14: TB25  # ingress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB16  # ingress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..17: TH41  # ingress::hdr.inner_ipv4.dst_addr[31:16].16-31
        18: TB27  # ingress::hdr.inner_ipv4.dst_addr[15:8].8-15
        19: TB26  # ingress::hdr.inner_ipv4.dst_addr[7:0].0-7
        W41: 256  # value 1 -> W41 bit[8]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_udp
      0x01:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW2 bit[27..24]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW2 bit[23..16]: ingress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW2 bit[15..0]: ingress::hdr.inner_ipv4.total_len
        4..5: TH24  # ingress::hdr.inner_ipv4.identification
        6..7: TH3
            # - bit[48..50] -> TH3 bit[15..13]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH3 bit[12..0]: ingress::hdr.inner_ipv4.frag_offset
        8..11: TW17
            # - bit[64..71] -> TW17 bit[31..24]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW17 bit[23..16]: ingress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW17 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..13: TH40  # ingress::hdr.inner_ipv4.src_addr[31:16].16-31
        14: TB25  # ingress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB16  # ingress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..17: TH41  # ingress::hdr.inner_ipv4.dst_addr[31:16].16-31
        18: TB27  # ingress::hdr.inner_ipv4.dst_addr[15:8].8-15
        19: TB26  # ingress::hdr.inner_ipv4.dst_addr[7:0].0-7
        W41: 256  # value 1 -> W41 bit[8]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_icmp
      0x32:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW2 bit[27..24]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW2 bit[23..16]: ingress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW2 bit[15..0]: ingress::hdr.inner_ipv4.total_len
        4..5: TH24  # ingress::hdr.inner_ipv4.identification
        6..7: TH3
            # - bit[48..50] -> TH3 bit[15..13]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH3 bit[12..0]: ingress::hdr.inner_ipv4.frag_offset
        8..11: TW17
            # - bit[64..71] -> TW17 bit[31..24]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW17 bit[23..16]: ingress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW17 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..13: TH40  # ingress::hdr.inner_ipv4.src_addr[31:16].16-31
        14: TB25  # ingress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB16  # ingress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..17: TH41  # ingress::hdr.inner_ipv4.dst_addr[31:16].16-31
        18: TB27  # ingress::hdr.inner_ipv4.dst_addr[15:8].8-15
        19: TB26  # ingress::hdr.inner_ipv4.dst_addr[7:0].0-7
        W41: 256  # value 1 -> W41 bit[8]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_esp
      0x**:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW2 bit[27..24]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW2 bit[23..16]: ingress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW2 bit[15..0]: ingress::hdr.inner_ipv4.total_len
        4..5: TH24  # ingress::hdr.inner_ipv4.identification
        6..7: TH3
            # - bit[48..50] -> TH3 bit[15..13]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH3 bit[12..0]: ingress::hdr.inner_ipv4.frag_offset
        8..11: TW17
            # - bit[64..71] -> TW17 bit[31..24]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW17 bit[23..16]: ingress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW17 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..13: TH40  # ingress::hdr.inner_ipv4.src_addr[31:16].16-31
        14: TB25  # ingress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB16  # ingress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..17: TH41  # ingress::hdr.inner_ipv4.dst_addr[31:16].16-31
        18: TB27  # ingress::hdr.inner_ipv4.dst_addr[15:8].8-15
        19: TB26  # ingress::hdr.inner_ipv4.dst_addr[7:0].0-7
        W41: 256  # value 1 -> W41 bit[8]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_inner_tcp:
      *:
        0..1: TH28  # ingress::hdr.inner_tcp.src_port
        0..1: H10  # ingress::ig_md.lkp.inner_l4_src_port
        2..3: TH27  # ingress::hdr.inner_tcp.dst_port
        2..3: H12  # ingress::ig_md.lkp.inner_l4_dst_port
        4..7: W6  # ingress::hdr.inner_tcp.seq_no
        8..11: W7  # ingress::hdr.inner_tcp.ack_no
        12..15: TW3
            # - bit[96..99] -> TW3 bit[31..28]: ingress::hdr.inner_tcp.data_offset
            # - bit[100..103] -> TW3 bit[27..24]: ingress::hdr.inner_tcp.res
            # - bit[104..111] -> TW3 bit[23..16]: ingress::hdr.inner_tcp.flags
            # - bit[112..127] -> TW3 bit[15..0]: ingress::hdr.inner_tcp.window
        16..19: TW24
            # - bit[128..143] -> TW24 bit[31..16]: ingress::hdr.inner_tcp.checksum
            # - bit[144..159] -> TW24 bit[15..0]: ingress::hdr.inner_tcp.urgent_ptr
        W41: 1536
            # - value 1 -> W41 bit[9]: ingress::hdr.inner_tcp.$valid
            # - value 1 -> W41 bit[10]: ingress::hdr.sip.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_tcp.$split_0
    parse_inner_tcp.$split_0:
      *:
        0..3: W8  # ingress::hdr.sip.data
        shift: 4
        buf_req: 4
        next: end
    parse_inner_udp:
      *:
        0..1: H10  # ingress::ig_md.lkp.inner_l4_src_port
        0..3: TW3
            # - bit[0..15] -> TW3 bit[31..16]: ingress::hdr.inner_udp.src_port
            # - bit[16..31] -> TW3 bit[15..0]: ingress::hdr.inner_udp.dst_port
        2..3: H12  # ingress::ig_md.lkp.inner_l4_dst_port
        4..7: TW24
            # - bit[32..47] -> TW24 bit[31..16]: ingress::hdr.inner_udp.hdr_length
            # - bit[48..63] -> TW24 bit[15..0]: ingress::hdr.inner_udp.checksum
        W41: 2048  # value 1 -> W41 bit[11]: ingress::hdr.inner_udp.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_inner_icmp:
      *:
        0..3: TW3
            # - bit[0..7] -> TW3 bit[31..24]: ingress::hdr.inner_icmp.type_
            # - bit[8..15] -> TW3 bit[23..16]: ingress::hdr.inner_icmp.code
            # - bit[16..31] -> TW3 bit[15..0]: ingress::hdr.inner_icmp.hdr_checksum
        W41: 4096  # value 1 -> W41 bit[12]: ingress::hdr.inner_icmp.$valid
        shift: 4
        buf_req: 4
        next: end
    parse_inner_esp:
      *:
        0..3: W9  # ingress::hdr.ipsec_esp.spi
        4..7: W10  # ingress::hdr.ipsec_esp.sn
        W41: 8192  # value 1 -> W41 bit[13]: ingress::hdr.ipsec_esp.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_tcp
    parse_inner_ipv6.$split_0:
      *:
        0..3: W11  # ingress::hdr.inner_ipv6.src_addr[31:0].0-31
        4..7: W34  # ingress::hdr.inner_ipv6.dst_addr[127:96].96-127
        8..11: W33  # ingress::hdr.inner_ipv6.dst_addr[95:64].64-95
        12..15: W32  # ingress::hdr.inner_ipv6.dst_addr[63:32].32-63
        shift: 16
        buf_req: 16
        next: parse_inner_ipv6.$split_1
    parse_inner_ipv6.$split_1:
      match: [ byte1 ]
      0x06:
        0..3: W15  # ingress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_tcp
      0x11:
        0..3: W15  # ingress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_udp
      0x3a:
        0..3: W15  # ingress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_icmp
      0x32:
        0..3: W15  # ingress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_esp
      0x**:
        0..3: W15  # ingress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: end
    parse_gtpv2_12b:
      match: [ byte1 ]
      0x20:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x26:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x27:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x47:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x67:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x85:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x88:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x97:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x9f:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa2:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa4:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa6:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x68:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x82:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xff:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        load: { byte1 : 12 }
        shift: 12
        buf_req: 13
        next: parse_volte
      0x**:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv2_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv2_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv2_12b.total_len
        4..7: W35  # ingress::hdr.gtpv2_12b.teid
        8..9: TH26  # ingress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10: TB18  # ingress::hdr.gtpv2_12b.seq_no[7:0].0-7
        11: TB17  # ingress::hdr.gtpv2_12b.spare2
        W41: 32768  # value 1 -> W41 bit[15]: ingress::hdr.gtpv2_12b.$valid
        shift: 12
        buf_req: 12
        next: end
    parse_udp:
      match: [ half ]
      value_set IgParser_inner_2.udp_port_vxlan 1:
        handle: 507
        field_mapping:
          hdr.udp.dst_port(0..15) : half(0..15)
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.udp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW19
            # - bit[32..47] -> TW19 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW19 bit[15..0]: ingress::hdr.udp.checksum
        W41: 65536  # value 1 -> W41 bit[16]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_vxlan
      0x0868:
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.udp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW19
            # - bit[32..47] -> TW19 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW19 bit[15..0]: ingress::hdr.udp.checksum
        W41: 65536  # value 1 -> W41 bit[16]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_gtpu
      0x0d3a:
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.udp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW19
            # - bit[32..47] -> TW19 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW19 bit[15..0]: ingress::hdr.udp.checksum
        W41: 65536  # value 1 -> W41 bit[16]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_gtp
      0x084b:
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.udp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW19
            # - bit[32..47] -> TW19 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW19 bit[15..0]: ingress::hdr.udp.checksum
        W41: 65536  # value 1 -> W41 bit[16]: ingress::hdr.udp.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_gtp_verx
      0x06a5:
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.udp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW19
            # - bit[32..47] -> TW19 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW19 bit[15..0]: ingress::hdr.udp.checksum
        W41: 65536  # value 1 -> W41 bit[16]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_l2tp
      0x****:
        0..1: H9  # ingress::ig_md.lkp.l4_src_port
        0..3: TW18
            # - bit[0..15] -> TW18 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW18 bit[15..0]: ingress::hdr.udp.dst_port
        2..3: H11  # ingress::ig_md.lkp.l4_dst_port
        4..7: TW19
            # - bit[32..47] -> TW19 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW19 bit[15..0]: ingress::hdr.udp.checksum
        W41: 65536  # value 1 -> W41 bit[16]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_vxlan:
      *:
        0..3: TW1
            # - bit[0..7] -> TW1 bit[31..24]: ingress::hdr.vxlan.flags
            # - bit[8..31] -> TW1 bit[23..0]: ingress::hdr.vxlan.reserved
        4..5: TH1  # ingress::hdr.vxlan.vni[23:8].8-23
        6..7: TH0
            # - bit[48..55] -> TH0 bit[15..8]: ingress::hdr.vxlan.vni[7:0].0-7
            # - bit[56..63] -> TH0 bit[7..0]: ingress::hdr.vxlan.reserved2
        8..11: TW25  # ingress::hdr.inner_ethernet.dst_addr[47:16].16-47
        12: TB18  # ingress::hdr.inner_ethernet.dst_addr[15:8].8-15
        13: TB17  # ingress::hdr.inner_ethernet.dst_addr[7:0].0-7
        14..15: TH39  # ingress::hdr.inner_ethernet.src_addr[47:32].32-47
        16: TB1  # ingress::hdr.inner_ethernet.src_addr[31:24].24-31
        17: TB0  # ingress::hdr.inner_ethernet.src_addr[23:16].16-23
        18..19: TH26  # ingress::hdr.inner_ethernet.src_addr[15:0].0-15
        W41: 393216
            # - value 1 -> W41 bit[17]: ingress::hdr.vxlan.$valid
            # - value 1 -> W41 bit[18]: ingress::hdr.inner_ethernet.$valid
        load: { half : 20..21 }
        shift: 20
        buf_req: 22
        next: parse_vxlan.$split_0
    parse_vxlan.$split_0:
      match: [ half ]
      0x0800:
        0..1: TH2  # ingress::hdr.inner_ethernet.ether_type
        load: { byte1 : 11 }
        shift: 2
        buf_req: 12
        next: parse_inner_ipv4
      0x86dd:
        0..1: TH2  # ingress::hdr.inner_ethernet.ether_type
        shift: 2
        buf_req: 2
        next: parse_inner_ipv6
      0x****:
        0..1: TH2  # ingress::hdr.inner_ethernet.ether_type
        shift: 2
        buf_req: 2
        next: end
    parse_inner_ipv6:
      *:
        0..3: TW2
            # - bit[0..3] -> TW2 bit[31..28]: ingress::hdr.inner_ipv6.version
            # - bit[4..11] -> TW2 bit[27..20]: ingress::hdr.inner_ipv6.traffic_class
            # - bit[12..31] -> TW2 bit[19..0]: ingress::hdr.inner_ipv6.flow_label
        4..5: TH3  # ingress::hdr.inner_ipv6.payload_len
        6: B8  # ingress::hdr.inner_ipv6.next_hdr
        7: TB16  # ingress::hdr.inner_ipv6.hop_limit
        8..11: W14  # ingress::hdr.inner_ipv6.src_addr[127:96].96-127
        12..15: W13  # ingress::hdr.inner_ipv6.src_addr[95:64].64-95
        16..19: W12  # ingress::hdr.inner_ipv6.src_addr[63:32].32-63
        W41: 16384  # value 1 -> W41 bit[14]: ingress::hdr.inner_ipv6.$valid
        load: { byte1 : 6 }
        shift: 20
        buf_req: 20
        next: parse_inner_ipv6.$split_0
    parse_gtpu:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv1
    parse_gtpv1:
      match: [ byte1 ]
      0b*****000:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv1_8b
      0b*****0*1:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv1_12b
      0b*****01*:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv1_12b
      0x**:
        buf_req: 0
        next: end
    parse_gtpv1_8b:
      match: [ byte1 ]
      0x20:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x26:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x27:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x47:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x67:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x85:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x88:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x97:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x9f:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa2:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa4:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa6:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x68:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x82:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xff:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_volte
      0x**:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_8b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_8b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_8b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_8b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_8b.message_len
        4..7: TW1  # ingress::hdr.gtpv1_8b.teid
        W41: 524288  # value 1 -> W41 bit[19]: ingress::hdr.gtpv1_8b.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_gtpv1_12b:
      match: [ byte1 ]
      0x20:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x26:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x27:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x47:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x67:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x85:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x88:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x97:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x9f:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa2:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa4:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa6:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x68:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x82:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xff:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        load: { byte1 : 12 }
        shift: 12
        buf_req: 13
        next: parse_volte
      0x**:
        0..1: TH0
            # - bit[0..2] -> TH0 bit[15..13]: ingress::hdr.gtpv1_12b.version
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH0 bit[10]: ingress::hdr.gtpv1_12b.e
            # - bit[6] -> TH0 bit[9]: ingress::hdr.gtpv1_12b.s
            # - bit[7] -> TH0 bit[8]: ingress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH0 bit[7..0]: ingress::hdr.gtpv1_12b.message_type
        2..3: TH1  # ingress::hdr.gtpv1_12b.message_len
        4..7: TW25  # ingress::hdr.gtpv1_12b.teid
        8..11: TW1
            # - bit[64..79] -> TW1 bit[31..16]: ingress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW1 bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW1 bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t
        W41: 1048576  # value 1 -> W41 bit[20]: ingress::hdr.gtpv1_12b.$valid
        shift: 12
        buf_req: 12
        next: end
    parse_gtp:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv1
    parse_gtp_verx:
      match: [ byte1 ]
      0b001*****:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv1
      0b010*****:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv2
      0x**:
        buf_req: 0
        next: end
    parse_l2tp:
      *:
        0..3: TW1
            # - bit[0..11] -> TW1 bit[31..20]: ingress::hdr.l2tp.TLxxSxOP
            # - bit[12..15] -> TW1 bit[19..16]: ingress::hdr.l2tp.version
            # - bit[16..23] -> TW1 bit[15..8]: ingress::hdr.l2tp.l2tp_length
            # - bit[24..31] -> TW1 bit[7..0]: ingress::hdr.l2tp.tunnel_id[15:8].8-15
        4: TB0  # ingress::hdr.l2tp.tunnel_id[7:0].0-7
        5..6: TH26  # ingress::hdr.l2tp.session_id
        7: TB19  # ingress::hdr.l2tp.Ns[15:8].8-15
        8: TB18  # ingress::hdr.l2tp.Ns[7:0].0-7
        9..10: TH0  # ingress::hdr.l2tp.Nr
        11: TB17  # ingress::hdr.l2tp.offset_size
        W41: 2097152  # value 1 -> W41 bit[21]: ingress::hdr.l2tp.$valid
        load: { byte1 : 0 }
        shift: 12
        buf_req: 12
        next: parse_l2tp.$split_0
    parse_l2tp.$split_0:
      match: [ byte1 ]
      0b0*******:
        0: TB1  # ingress::hdr.l2tp.offset_pad
        load: { half : 7..8, byte0 : 9 }
        shift: 1
        buf_req: 10
        next: parse_pppoe
      0x**:
        0: TB1  # ingress::hdr.l2tp.offset_pad
        shift: 1
        buf_req: 1
        next: end
    parse_pppoe:
      match: [ half, byte0 ]
      0x00214*:
        0..1: TH1
            # - bit[0..3] -> TH1 bit[15..12]: ingress::hdr.pppoe.version
            # - bit[4..7] -> TH1 bit[11..8]: ingress::hdr.pppoe.type
            # - bit[8..15] -> TH1 bit[7..0]: ingress::hdr.pppoe.code
        2..3: TH2  # ingress::hdr.pppoe.session_id
        4..7: TW25
            # - bit[32..47] -> TW25 bit[31..16]: ingress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW25 bit[15..0]: ingress::hdr.pppoe.ppp_proto
        W41: 4194304  # value 1 -> W41 bit[22]: ingress::hdr.pppoe.$valid
        load: { byte1 : 17 }
        shift: 8
        buf_req: 18
        next: parse_inner_ipv4
      0x00216*:
        0..1: TH1
            # - bit[0..3] -> TH1 bit[15..12]: ingress::hdr.pppoe.version
            # - bit[4..7] -> TH1 bit[11..8]: ingress::hdr.pppoe.type
            # - bit[8..15] -> TH1 bit[7..0]: ingress::hdr.pppoe.code
        2..3: TH2  # ingress::hdr.pppoe.session_id
        4..7: TW25
            # - bit[32..47] -> TW25 bit[31..16]: ingress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW25 bit[15..0]: ingress::hdr.pppoe.ppp_proto
        W41: 4194304  # value 1 -> W41 bit[22]: ingress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_ipv6
      0x******:
        0..1: TH1
            # - bit[0..3] -> TH1 bit[15..12]: ingress::hdr.pppoe.version
            # - bit[4..7] -> TH1 bit[11..8]: ingress::hdr.pppoe.type
            # - bit[8..15] -> TH1 bit[7..0]: ingress::hdr.pppoe.code
        2..3: TH2  # ingress::hdr.pppoe.session_id
        4..7: TW25
            # - bit[32..47] -> TW25 bit[31..16]: ingress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW25 bit[15..0]: ingress::hdr.pppoe.ppp_proto
        W41: 4194304  # value 1 -> W41 bit[22]: ingress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_icmp:
      *:
        0..3: TW1
            # - bit[0..7] -> TW1 bit[31..24]: ingress::hdr.icmp.type_
            # - bit[8..15] -> TW1 bit[23..16]: ingress::hdr.icmp.code
            # - bit[16..31] -> TW1 bit[15..0]: ingress::hdr.icmp.hdr_checksum
        W41: 8388608  # value 1 -> W41 bit[23]: ingress::hdr.icmp.$valid
        shift: 4
        buf_req: 4
        next: end
    parse_sctp:
      match: [ half ]
      0x8e3c:
        0..3: TW1
            # - bit[0..15] -> TW1 bit[31..16]: ingress::hdr.sctp.src_port
            # - bit[16..31] -> TW1 bit[15..0]: ingress::hdr.sctp.dst_port
        4..7: TW2  # ingress::hdr.sctp.verifTag
        8..9: TH0  # ingress::hdr.sctp.checksum
        W41: 16777216  # value 1 -> W41 bit[24]: ingress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x960c:
        0..3: TW1
            # - bit[0..15] -> TW1 bit[31..16]: ingress::hdr.sctp.src_port
            # - bit[16..31] -> TW1 bit[15..0]: ingress::hdr.sctp.dst_port
        4..7: TW2  # ingress::hdr.sctp.verifTag
        8..9: TH0  # ingress::hdr.sctp.checksum
        W41: 16777216  # value 1 -> W41 bit[24]: ingress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x0f1c:
        0..3: TW1
            # - bit[0..15] -> TW1 bit[31..16]: ingress::hdr.sctp.src_port
            # - bit[16..31] -> TW1 bit[15..0]: ingress::hdr.sctp.dst_port
        4..7: TW2  # ingress::hdr.sctp.verifTag
        8..9: TH0  # ingress::hdr.sctp.checksum
        W41: 16777216  # value 1 -> W41 bit[24]: ingress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x71be:
        0..3: TW1
            # - bit[0..15] -> TW1 bit[31..16]: ingress::hdr.sctp.src_port
            # - bit[16..31] -> TW1 bit[15..0]: ingress::hdr.sctp.dst_port
        4..7: TW2  # ingress::hdr.sctp.verifTag
        8..9: TH0  # ingress::hdr.sctp.checksum
        W41: 16777216  # value 1 -> W41 bit[24]: ingress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x****:
        0..3: TW1
            # - bit[0..15] -> TW1 bit[31..16]: ingress::hdr.sctp.src_port
            # - bit[16..31] -> TW1 bit[15..0]: ingress::hdr.sctp.dst_port
        4..7: TW2  # ingress::hdr.sctp.verifTag
        8..9: TH0  # ingress::hdr.sctp.checksum
        W41: 16777216  # value 1 -> W41 bit[24]: ingress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
    parse_gre:
      match: [ half, byte0 ]
      0b*****0011000100000001011:
        0..1: TH0
            # - bit[0] -> TH0 bit[15]: ingress::hdr.gre.C
            # - bit[1] -> TH0 bit[14]: ingress::hdr.gre.R
            # - bit[2] -> TH0 bit[13]: ingress::hdr.gre.K
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gre.S
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gre.s
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gre.recurse
            # - bit[8..12] -> TH0 bit[7..3]: ingress::hdr.gre.flags
            # - bit[13..15] -> TH0 bit[2..0]: ingress::hdr.gre.version
        2: TB1  # ingress::hdr.gre.proto[15:8].8-15
        3: TB0  # ingress::hdr.gre.proto[7:0].0-7
        W41: 33554432  # value 1 -> W41 bit[25]: ingress::hdr.gre.$valid
        load: { half : 10..11, byte0 : 12 }
        shift: 4
        buf_req: 13
        next: parse_pptp
      0b*****0000000100000000000:
        0..1: TH0
            # - bit[0] -> TH0 bit[15]: ingress::hdr.gre.C
            # - bit[1] -> TH0 bit[14]: ingress::hdr.gre.R
            # - bit[2] -> TH0 bit[13]: ingress::hdr.gre.K
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gre.S
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gre.s
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gre.recurse
            # - bit[8..12] -> TH0 bit[7..3]: ingress::hdr.gre.flags
            # - bit[13..15] -> TH0 bit[2..0]: ingress::hdr.gre.version
        2: TB1  # ingress::hdr.gre.proto[15:8].8-15
        3: TB0  # ingress::hdr.gre.proto[7:0].0-7
        W41: 33554432  # value 1 -> W41 bit[25]: ingress::hdr.gre.$valid
        shift: 4
        buf_req: 4
        next: parse_gre_ipv4
      0b*****0001000011011011101:
        0..1: TH0
            # - bit[0] -> TH0 bit[15]: ingress::hdr.gre.C
            # - bit[1] -> TH0 bit[14]: ingress::hdr.gre.R
            # - bit[2] -> TH0 bit[13]: ingress::hdr.gre.K
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gre.S
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gre.s
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gre.recurse
            # - bit[8..12] -> TH0 bit[7..3]: ingress::hdr.gre.flags
            # - bit[13..15] -> TH0 bit[2..0]: ingress::hdr.gre.version
        2: TB1  # ingress::hdr.gre.proto[15:8].8-15
        3: TB0  # ingress::hdr.gre.proto[7:0].0-7
        W41: 33554432  # value 1 -> W41 bit[25]: ingress::hdr.gre.$valid
        shift: 4
        buf_req: 4
        next: parse_inner_ipv6
      0x******:
        0..1: TH0
            # - bit[0] -> TH0 bit[15]: ingress::hdr.gre.C
            # - bit[1] -> TH0 bit[14]: ingress::hdr.gre.R
            # - bit[2] -> TH0 bit[13]: ingress::hdr.gre.K
            # - bit[3] -> TH0 bit[12]: ingress::hdr.gre.S
            # - bit[4] -> TH0 bit[11]: ingress::hdr.gre.s
            # - bit[5..7] -> TH0 bit[10..8]: ingress::hdr.gre.recurse
            # - bit[8..12] -> TH0 bit[7..3]: ingress::hdr.gre.flags
            # - bit[13..15] -> TH0 bit[2..0]: ingress::hdr.gre.version
        2: TB1  # ingress::hdr.gre.proto[15:8].8-15
        3: TB0  # ingress::hdr.gre.proto[7:0].0-7
        W41: 33554432  # value 1 -> W41 bit[25]: ingress::hdr.gre.$valid
        shift: 4
        buf_req: 4
        next: end
    parse_pptp:
      match: [ half, byte0 ]
      0x00214*:
        0..1: TH1
            # - bit[0..3] -> TH1 bit[15..12]: ingress::hdr.pppoe.version
            # - bit[4..7] -> TH1 bit[11..8]: ingress::hdr.pppoe.type
            # - bit[8..15] -> TH1 bit[7..0]: ingress::hdr.pppoe.code
        2..3: TH2  # ingress::hdr.pppoe.session_id
        4..7: TW25
            # - bit[32..47] -> TW25 bit[31..16]: ingress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW25 bit[15..0]: ingress::hdr.pppoe.ppp_proto
        W41: 4194304  # value 1 -> W41 bit[22]: ingress::hdr.pppoe.$valid
        load: { byte1 : 17 }
        shift: 8
        buf_req: 18
        next: parse_inner_ipv4
      0x00216*:
        0..1: TH1
            # - bit[0..3] -> TH1 bit[15..12]: ingress::hdr.pppoe.version
            # - bit[4..7] -> TH1 bit[11..8]: ingress::hdr.pppoe.type
            # - bit[8..15] -> TH1 bit[7..0]: ingress::hdr.pppoe.code
        2..3: TH2  # ingress::hdr.pppoe.session_id
        4..7: TW25
            # - bit[32..47] -> TW25 bit[31..16]: ingress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW25 bit[15..0]: ingress::hdr.pppoe.ppp_proto
        W41: 4194304  # value 1 -> W41 bit[22]: ingress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_ipv6
      0x******:
        0..1: TH1
            # - bit[0..3] -> TH1 bit[15..12]: ingress::hdr.pppoe.version
            # - bit[4..7] -> TH1 bit[11..8]: ingress::hdr.pppoe.type
            # - bit[8..15] -> TH1 bit[7..0]: ingress::hdr.pppoe.code
        2..3: TH2  # ingress::hdr.pppoe.session_id
        4..7: TW25
            # - bit[32..47] -> TW25 bit[31..16]: ingress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW25 bit[15..0]: ingress::hdr.pppoe.ppp_proto
        W41: 4194304  # value 1 -> W41 bit[22]: ingress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_gre_ipv4:
      *:
        load: { byte1 : 9 }
        buf_req: 10
        next: parse_inner_ipv4
    parse_ipv6:
      *:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv6.version
            # - bit[4..11] -> TW0 bit[27..20]: ingress::hdr.ipv6.traffic_class
            # - bit[12..31] -> TW0 bit[19..0]: ingress::hdr.ipv6.flow_label
        4..7: TW16
            # - bit[32..47] -> TW16 bit[31..16]: ingress::hdr.ipv6.payload_len
            # - bit[48..55] -> TW16 bit[15..8]: ingress::hdr.ipv6.next_hdr
            # - bit[56..63] -> TW16 bit[7..0]: ingress::hdr.ipv6.hop_limit
        6: B11  # ingress::ig_md.lkp.ip_proto
        8..11: W36  # ingress::hdr.ipv6.src_addr[127:96].96-127
        8..11: W52  # ingress::ig_md.lkp.ip_src_addr[127:96].96-127
        12: TB11  # ingress::hdr.ipv6.src_addr[95:88].88-95
        13: TB10  # ingress::hdr.ipv6.src_addr[87:80].80-87
        14: TB9  # ingress::hdr.ipv6.src_addr[79:72].72-79
        16..17: TH38  # ingress::hdr.ipv6.src_addr[63:48].48-63
        18..19: TH37  # ingress::hdr.ipv6.src_addr[47:32].32-47
        20..21: TH36  # ingress::hdr.ipv6.src_addr[31:16].16-31
        22..23: TH29  # ingress::hdr.ipv6.src_addr[15:0].0-15
        load: { byte1 : 6 }
        shift: 12
        buf_req: 24
        next: parse_ipv6.$split_0
    parse_ipv6.$split_0:
      *:
        0..3: W51  # ingress::ig_md.lkp.ip_src_addr[95:64].64-95
        3: TB8  # ingress::hdr.ipv6.src_addr[71:64].64-71
        4..7: W50  # ingress::ig_md.lkp.ip_src_addr[63:32].32-63
        8..11: W49  # ingress::ig_md.lkp.ip_src_addr[31:0].0-31
        12..15: W40  # ingress::hdr.ipv6.dst_addr[127:96].96-127
        shift: 12
        buf_req: 16
        next: parse_ipv6.$split_1
    parse_ipv6.$split_1:
      *:
        0..3: W56  # ingress::ig_md.lkp.ip_dst_addr[127:96].96-127
        4..7: W39  # ingress::hdr.ipv6.dst_addr[95:64].64-95
        4..7: W55  # ingress::ig_md.lkp.ip_dst_addr[95:64].64-95
        8..11: W38  # ingress::hdr.ipv6.dst_addr[63:32].32-63
        W41: 67108864  # value 1 -> W41 bit[26]: ingress::hdr.ipv6.$valid
        shift: 8
        buf_req: 12
        next: parse_ipv6.$split_2
    parse_ipv6.$split_2:
      match: [ byte1 ]
      0x06:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        shift: 8
        buf_req: 8
        next: parse_tcp
      0x11:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        load: { half : 10..11 }
        shift: 8
        buf_req: 12
        next: parse_udp
      0x3a:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        shift: 8
        buf_req: 8
        next: parse_icmp
      0x84:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        load: { half : 10..11 }
        shift: 8
        buf_req: 12
        next: parse_sctp
      0x29:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        shift: 8
        buf_req: 8
        next: parse_inner_ipv6
      0x04:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        load: { byte1 : 17 }
        shift: 8
        buf_req: 18
        next: parse_inner_ipv4
      0x2f:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        load: { half : 9..10, byte0 : 11 }
        shift: 8
        buf_req: 12
        next: parse_gre
      0x**:
        0..3: W54  # ingress::ig_md.lkp.ip_dst_addr[63:32].32-63
        4..7: W37  # ingress::hdr.ipv6.dst_addr[31:0].0-31
        4..7: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        shift: 8
        buf_req: 8
        next: end
    parse_vlan:
      match: [ half ]
      0x0800:
        0..1: H4
            # - bit[0..2] -> H4 bit[15..13]: ingress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H4 bit[12]: ingress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H4 bit[11..0]: ingress::hdr.vlan_tag[0].vid
        2..3: TH4  # ingress::hdr.vlan_tag[0].ether_type
        B2: 16  # value 16 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..1: H4
            # - bit[0..2] -> H4 bit[15..13]: ingress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H4 bit[12]: ingress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H4 bit[11..0]: ingress::hdr.vlan_tag[0].vid
        2..3: TH4  # ingress::hdr.vlan_tag[0].ether_type
        B2: 16  # value 16 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..1: H4
            # - bit[0..2] -> H4 bit[15..13]: ingress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H4 bit[12]: ingress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H4 bit[11..0]: ingress::hdr.vlan_tag[0].vid
        2..3: TH4  # ingress::hdr.vlan_tag[0].ether_type
        B2: 16  # value 16 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it1
      0x8847:
        0..1: H4
            # - bit[0..2] -> H4 bit[15..13]: ingress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H4 bit[12]: ingress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H4 bit[11..0]: ingress::hdr.vlan_tag[0].vid
        2..3: TH4  # ingress::hdr.vlan_tag[0].ether_type
        B2: 16  # value 16 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..1: H4
            # - bit[0..2] -> H4 bit[15..13]: ingress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H4 bit[12]: ingress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H4 bit[11..0]: ingress::hdr.vlan_tag[0].vid
        2..3: TH4  # ingress::hdr.vlan_tag[0].ether_type
        B2: 16  # value 16 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it1:
      match: [ half ]
      0x0800:
        0..1: TH5
            # - bit[0..2] -> TH5 bit[15..13]: ingress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TH5 bit[12]: ingress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TH5 bit[11..0]: ingress::hdr.vlan_tag[1].vid
        2: TB3  # ingress::hdr.vlan_tag[1].ether_type[15:8].8-15
        3: TB2  # ingress::hdr.vlan_tag[1].ether_type[7:0].0-7
        B2: 8  # value 8 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..1: TH5
            # - bit[0..2] -> TH5 bit[15..13]: ingress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TH5 bit[12]: ingress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TH5 bit[11..0]: ingress::hdr.vlan_tag[1].vid
        2: TB3  # ingress::hdr.vlan_tag[1].ether_type[15:8].8-15
        3: TB2  # ingress::hdr.vlan_tag[1].ether_type[7:0].0-7
        B2: 8  # value 8 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..1: TH5
            # - bit[0..2] -> TH5 bit[15..13]: ingress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TH5 bit[12]: ingress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TH5 bit[11..0]: ingress::hdr.vlan_tag[1].vid
        2: TB3  # ingress::hdr.vlan_tag[1].ether_type[15:8].8-15
        3: TB2  # ingress::hdr.vlan_tag[1].ether_type[7:0].0-7
        B2: 8  # value 8 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it2
      0x8847:
        0..1: TH5
            # - bit[0..2] -> TH5 bit[15..13]: ingress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TH5 bit[12]: ingress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TH5 bit[11..0]: ingress::hdr.vlan_tag[1].vid
        2: TB3  # ingress::hdr.vlan_tag[1].ether_type[15:8].8-15
        3: TB2  # ingress::hdr.vlan_tag[1].ether_type[7:0].0-7
        B2: 8  # value 8 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..1: TH5
            # - bit[0..2] -> TH5 bit[15..13]: ingress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TH5 bit[12]: ingress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TH5 bit[11..0]: ingress::hdr.vlan_tag[1].vid
        2: TB3  # ingress::hdr.vlan_tag[1].ether_type[15:8].8-15
        3: TB2  # ingress::hdr.vlan_tag[1].ether_type[7:0].0-7
        B2: 8  # value 8 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it2:
      match: [ half ]
      0x0800:
        0..3: TW8
            # - bit[0..2] -> TW8 bit[31..29]: ingress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW8 bit[28]: ingress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW8 bit[27..16]: ingress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW8 bit[15..0]: ingress::hdr.vlan_tag[2].ether_type
        B2: 4  # value 4 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW8
            # - bit[0..2] -> TW8 bit[31..29]: ingress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW8 bit[28]: ingress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW8 bit[27..16]: ingress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW8 bit[15..0]: ingress::hdr.vlan_tag[2].ether_type
        B2: 4  # value 4 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW8
            # - bit[0..2] -> TW8 bit[31..29]: ingress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW8 bit[28]: ingress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW8 bit[27..16]: ingress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW8 bit[15..0]: ingress::hdr.vlan_tag[2].ether_type
        B2: 4  # value 4 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it3
      0x8847:
        0..3: TW8
            # - bit[0..2] -> TW8 bit[31..29]: ingress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW8 bit[28]: ingress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW8 bit[27..16]: ingress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW8 bit[15..0]: ingress::hdr.vlan_tag[2].ether_type
        B2: 4  # value 4 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW8
            # - bit[0..2] -> TW8 bit[31..29]: ingress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW8 bit[28]: ingress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW8 bit[27..16]: ingress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW8 bit[15..0]: ingress::hdr.vlan_tag[2].ether_type
        B2: 4  # value 4 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it3:
      match: [ half ]
      0x0800:
        0..3: TW9
            # - bit[0..2] -> TW9 bit[31..29]: ingress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW9 bit[28]: ingress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW9 bit[27..16]: ingress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW9 bit[15..0]: ingress::hdr.vlan_tag[3].ether_type
        B2: 2  # value 2 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW9
            # - bit[0..2] -> TW9 bit[31..29]: ingress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW9 bit[28]: ingress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW9 bit[27..16]: ingress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW9 bit[15..0]: ingress::hdr.vlan_tag[3].ether_type
        B2: 2  # value 2 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW9
            # - bit[0..2] -> TW9 bit[31..29]: ingress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW9 bit[28]: ingress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW9 bit[27..16]: ingress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW9 bit[15..0]: ingress::hdr.vlan_tag[3].ether_type
        B2: 2  # value 2 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it4
      0x8847:
        0..3: TW9
            # - bit[0..2] -> TW9 bit[31..29]: ingress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW9 bit[28]: ingress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW9 bit[27..16]: ingress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW9 bit[15..0]: ingress::hdr.vlan_tag[3].ether_type
        B2: 2  # value 2 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW9
            # - bit[0..2] -> TW9 bit[31..29]: ingress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW9 bit[28]: ingress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW9 bit[27..16]: ingress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW9 bit[15..0]: ingress::hdr.vlan_tag[3].ether_type
        B2: 2  # value 2 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it4:
      match: [ half ]
      0x0800:
        0..3: TW10
            # - bit[0..2] -> TW10 bit[31..29]: ingress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW10 bit[28]: ingress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW10 bit[27..16]: ingress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW10 bit[15..0]: ingress::hdr.vlan_tag[4].ether_type
        B2: 1  # value 1 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW10
            # - bit[0..2] -> TW10 bit[31..29]: ingress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW10 bit[28]: ingress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW10 bit[27..16]: ingress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW10 bit[15..0]: ingress::hdr.vlan_tag[4].ether_type
        B2: 1  # value 1 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW10
            # - bit[0..2] -> TW10 bit[31..29]: ingress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW10 bit[28]: ingress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW10 bit[27..16]: ingress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW10 bit[15..0]: ingress::hdr.vlan_tag[4].ether_type
        B2: 1  # value 1 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
      0x8847:
        0..3: TW10
            # - bit[0..2] -> TW10 bit[31..29]: ingress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW10 bit[28]: ingress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW10 bit[27..16]: ingress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW10 bit[15..0]: ingress::hdr.vlan_tag[4].ether_type
        B2: 1  # value 1 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW10
            # - bit[0..2] -> TW10 bit[31..29]: ingress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW10 bit[28]: ingress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW10 bit[27..16]: ingress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW10 bit[15..0]: ingress::hdr.vlan_tag[4].ether_type
        B2: 1  # value 1 -> B2 bit[4..0]: ingress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls:
      match: [ byte1 ]
      0b*******0:
        0..3: TW11
            # - bit[0..19] -> TW11 bit[31..12]: ingress::hdr.mpls[0].label
            # - bit[20..22] -> TW11 bit[11..9]: ingress::hdr.mpls[0].exp
            # - bit[23] -> TW11 bit[8]: ingress::hdr.mpls[0].bos
            # - bit[24..31] -> TW11 bit[7..0]: ingress::hdr.mpls[0].ttl
        B3: 8  # value 8 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls.$it1
      0b*******1:
        0..3: TW11
            # - bit[0..19] -> TW11 bit[31..12]: ingress::hdr.mpls[0].label
            # - bit[20..22] -> TW11 bit[11..9]: ingress::hdr.mpls[0].exp
            # - bit[23] -> TW11 bit[8]: ingress::hdr.mpls[0].bos
            # - bit[24..31] -> TW11 bit[7..0]: ingress::hdr.mpls[0].ttl
        B3: 8  # value 8 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..3: TW11
            # - bit[0..19] -> TW11 bit[31..12]: ingress::hdr.mpls[0].label
            # - bit[20..22] -> TW11 bit[11..9]: ingress::hdr.mpls[0].exp
            # - bit[23] -> TW11 bit[8]: ingress::hdr.mpls[0].bos
            # - bit[24..31] -> TW11 bit[7..0]: ingress::hdr.mpls[0].ttl
        B3: 8  # value 8 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls.$it1:
      match: [ byte1 ]
      0b*******0:
        0..1: TH13  # ingress::hdr.mpls[1].label[19:4].4-19
        2..3: TH12
            # - bit[16..19] -> TH12 bit[15..12]: ingress::hdr.mpls[1].label[3:0].0-3
            # - bit[20..22] -> TH12 bit[11..9]: ingress::hdr.mpls[1].exp
            # - bit[23] -> TH12 bit[8]: ingress::hdr.mpls[1].bos
            # - bit[24..31] -> TH12 bit[7..0]: ingress::hdr.mpls[1].ttl
        B3: 4  # value 4 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls.$it2
      0b*******1:
        0..1: TH13  # ingress::hdr.mpls[1].label[19:4].4-19
        2..3: TH12
            # - bit[16..19] -> TH12 bit[15..12]: ingress::hdr.mpls[1].label[3:0].0-3
            # - bit[20..22] -> TH12 bit[11..9]: ingress::hdr.mpls[1].exp
            # - bit[23] -> TH12 bit[8]: ingress::hdr.mpls[1].bos
            # - bit[24..31] -> TH12 bit[7..0]: ingress::hdr.mpls[1].ttl
        B3: 4  # value 4 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..1: TH13  # ingress::hdr.mpls[1].label[19:4].4-19
        2..3: TH12
            # - bit[16..19] -> TH12 bit[15..12]: ingress::hdr.mpls[1].label[3:0].0-3
            # - bit[20..22] -> TH12 bit[11..9]: ingress::hdr.mpls[1].exp
            # - bit[23] -> TH12 bit[8]: ingress::hdr.mpls[1].bos
            # - bit[24..31] -> TH12 bit[7..0]: ingress::hdr.mpls[1].ttl
        B3: 4  # value 4 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls.$it2:
      match: [ byte1 ]
      0b*******0:
        0..1: TH15  # ingress::hdr.mpls[2].label[19:4].4-19
        2..3: TH14
            # - bit[16..19] -> TH14 bit[15..12]: ingress::hdr.mpls[2].label[3:0].0-3
            # - bit[20..22] -> TH14 bit[11..9]: ingress::hdr.mpls[2].exp
            # - bit[23] -> TH14 bit[8]: ingress::hdr.mpls[2].bos
            # - bit[24..31] -> TH14 bit[7..0]: ingress::hdr.mpls[2].ttl
        B3: 2  # value 2 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls.$it3
      0b*******1:
        0..1: TH15  # ingress::hdr.mpls[2].label[19:4].4-19
        2..3: TH14
            # - bit[16..19] -> TH14 bit[15..12]: ingress::hdr.mpls[2].label[3:0].0-3
            # - bit[20..22] -> TH14 bit[11..9]: ingress::hdr.mpls[2].exp
            # - bit[23] -> TH14 bit[8]: ingress::hdr.mpls[2].bos
            # - bit[24..31] -> TH14 bit[7..0]: ingress::hdr.mpls[2].ttl
        B3: 2  # value 2 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..1: TH15  # ingress::hdr.mpls[2].label[19:4].4-19
        2..3: TH14
            # - bit[16..19] -> TH14 bit[15..12]: ingress::hdr.mpls[2].label[3:0].0-3
            # - bit[20..22] -> TH14 bit[11..9]: ingress::hdr.mpls[2].exp
            # - bit[23] -> TH14 bit[8]: ingress::hdr.mpls[2].bos
            # - bit[24..31] -> TH14 bit[7..0]: ingress::hdr.mpls[2].ttl
        B3: 2  # value 2 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls.$it3:
      match: [ byte1 ]
      0b*******0:
        0..1: TH17  # ingress::hdr.mpls[3].label[19:4].4-19
        2..3: TH16
            # - bit[16..19] -> TH16 bit[15..12]: ingress::hdr.mpls[3].label[3:0].0-3
            # - bit[20..22] -> TH16 bit[11..9]: ingress::hdr.mpls[3].exp
            # - bit[23] -> TH16 bit[8]: ingress::hdr.mpls[3].bos
            # - bit[24..31] -> TH16 bit[7..0]: ingress::hdr.mpls[3].ttl
        B3: 1  # value 1 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
      0b*******1:
        0..1: TH17  # ingress::hdr.mpls[3].label[19:4].4-19
        2..3: TH16
            # - bit[16..19] -> TH16 bit[15..12]: ingress::hdr.mpls[3].label[3:0].0-3
            # - bit[20..22] -> TH16 bit[11..9]: ingress::hdr.mpls[3].exp
            # - bit[23] -> TH16 bit[8]: ingress::hdr.mpls[3].bos
            # - bit[24..31] -> TH16 bit[7..0]: ingress::hdr.mpls[3].ttl
        B3: 1  # value 1 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..1: TH17  # ingress::hdr.mpls[3].label[19:4].4-19
        2..3: TH16
            # - bit[16..19] -> TH16 bit[15..12]: ingress::hdr.mpls[3].label[3:0].0-3
            # - bit[20..22] -> TH16 bit[11..9]: ingress::hdr.mpls[3].exp
            # - bit[23] -> TH16 bit[8]: ingress::hdr.mpls[3].bos
            # - bit[24..31] -> TH16 bit[7..0]: ingress::hdr.mpls[3].ttl
        B3: 1  # value 1 -> B3 bit[3..0]: ingress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls_bos:
      match: [ byte1 ]
      0x4*:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv4.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ipv4.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ipv4.total_len
        4: TB11  # ingress::hdr.ipv4.identification[15:8].8-15
        5: TB10  # ingress::hdr.ipv4.identification[7:0].0-7
        6: TB8
            # - bit[48..50] -> TB8 bit[7..5]: ingress::hdr.ipv4.flags
            # - bit[51..55] -> TB8 bit[4..0]: ingress::hdr.ipv4.frag_offset[12:8].8-12
        7: TB9  # ingress::hdr.ipv4.frag_offset[7:0].0-7
        8..11: TW16
            # - bit[64..71] -> TW16 bit[31..24]: ingress::hdr.ipv4.ttl
            # - bit[72..79] -> TW16 bit[23..16]: ingress::hdr.ipv4.protocol
            # - bit[80..95] -> TW16 bit[15..0]: ingress::hdr.ipv4.hdr_checksum
        12..13: TH36  # ingress::hdr.ipv4.src_addr[31:16].16-31
        12..15: W49  # ingress::ig_md.lkp.ip_src_addr[31:0].0-31
        14..15: TH29  # ingress::hdr.ipv4.src_addr[15:0].0-15
        16..17: TH38  # ingress::hdr.ipv4.dst_addr[31:16].16-31
        16..19: W53  # ingress::ig_md.lkp.ip_dst_addr[31:0].0-31
        18..19: TH37  # ingress::hdr.ipv4.dst_addr[15:0].0-15
        load: { byte1 : 9 }
        shift: 9
        buf_req: 20
        next: parse_ipv4.$split_0
      0x6*:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv6.version
            # - bit[4..11] -> TW0 bit[27..20]: ingress::hdr.ipv6.traffic_class
            # - bit[12..31] -> TW0 bit[19..0]: ingress::hdr.ipv6.flow_label
        4..7: TW16
            # - bit[32..47] -> TW16 bit[31..16]: ingress::hdr.ipv6.payload_len
            # - bit[48..55] -> TW16 bit[15..8]: ingress::hdr.ipv6.next_hdr
            # - bit[56..63] -> TW16 bit[7..0]: ingress::hdr.ipv6.hop_limit
        6: B11  # ingress::ig_md.lkp.ip_proto
        8..11: W36  # ingress::hdr.ipv6.src_addr[127:96].96-127
        8..11: W52  # ingress::ig_md.lkp.ip_src_addr[127:96].96-127
        12: TB11  # ingress::hdr.ipv6.src_addr[95:88].88-95
        13: TB10  # ingress::hdr.ipv6.src_addr[87:80].80-87
        14: TB9  # ingress::hdr.ipv6.src_addr[79:72].72-79
        16..17: TH38  # ingress::hdr.ipv6.src_addr[63:48].48-63
        18..19: TH37  # ingress::hdr.ipv6.src_addr[47:32].32-47
        20..21: TH36  # ingress::hdr.ipv6.src_addr[31:16].16-31
        22..23: TH29  # ingress::hdr.ipv6.src_addr[15:0].0-15
        load: { byte1 : 6 }
        shift: 12
        buf_req: 24
        next: parse_ipv6.$split_0
      0x**:
        buf_req: 0
        next: end
    TofinoIngressParserInner_2_parse_port_metadata.$oob_stall_0:
      *:
        load: { half : 11..12 }
        buf_req: 13
        next: parse_fabric
    parse_fabric:
      match: [ half ]
      0x0800:
        0..3: W5
            # - bit[0] -> W5 bit[31]: ingress::hdr.fabric.pad1
            # - bit[1] -> W5 bit[30]: ingress::hdr.fabric.is_hit
            # - bit[2] -> W5 bit[29]: ingress::hdr.fabric.is_to_cn78
            # - bit[3] -> W5 bit[28]: ingress::hdr.fabric.is_to_td3
            # - bit[4] -> W5 bit[27]: ingress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W5 bit[26..24]: ingress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W5 bit[23..18]: ingress::hdr.fabric.pad2
            # - bit[14..31] -> W5 bit[17..0]: ingress::hdr.fabric.mac_index
        4: B4
            # - bit[32..35] -> B4 bit[7..4]: ingress::hdr.fabric.pad4
            # - bit[36] -> B4 bit[3]: ingress::hdr.fabric.flags_drop
            # - bit[37] -> B4 bit[2]: ingress::hdr.fabric.is_trunc_mir
            # - bit[38..39] -> B4 bit[1..0]: ingress::hdr.fabric.count_index[17:16].16-17
        5..8: W3
            # - bit[40..55] -> W3 bit[31..16]: ingress::hdr.fabric.count_index[15:0].0-15
            # - bit[56..71] -> W3 bit[15..0]: ingress::hdr.fabric.mc_index
        9..12: W4
            # - bit[72..87] -> W4 bit[31..16]: ingress::hdr.fabric.vlan_index
            # - bit[88..103] -> W4 bit[15..0]: ingress::hdr.fabric.ether_type
        W41: 134217728  # value 1 -> W41 bit[27]: ingress::hdr.fabric.$valid
        shift: 13
        buf_req: 13
        next: parse_ipv4
      0x86dd:
        0..3: W5
            # - bit[0] -> W5 bit[31]: ingress::hdr.fabric.pad1
            # - bit[1] -> W5 bit[30]: ingress::hdr.fabric.is_hit
            # - bit[2] -> W5 bit[29]: ingress::hdr.fabric.is_to_cn78
            # - bit[3] -> W5 bit[28]: ingress::hdr.fabric.is_to_td3
            # - bit[4] -> W5 bit[27]: ingress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W5 bit[26..24]: ingress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W5 bit[23..18]: ingress::hdr.fabric.pad2
            # - bit[14..31] -> W5 bit[17..0]: ingress::hdr.fabric.mac_index
        4: B4
            # - bit[32..35] -> B4 bit[7..4]: ingress::hdr.fabric.pad4
            # - bit[36] -> B4 bit[3]: ingress::hdr.fabric.flags_drop
            # - bit[37] -> B4 bit[2]: ingress::hdr.fabric.is_trunc_mir
            # - bit[38..39] -> B4 bit[1..0]: ingress::hdr.fabric.count_index[17:16].16-17
        5..8: W3
            # - bit[40..55] -> W3 bit[31..16]: ingress::hdr.fabric.count_index[15:0].0-15
            # - bit[56..71] -> W3 bit[15..0]: ingress::hdr.fabric.mc_index
        9..12: W4
            # - bit[72..87] -> W4 bit[31..16]: ingress::hdr.fabric.vlan_index
            # - bit[88..103] -> W4 bit[15..0]: ingress::hdr.fabric.ether_type
        W41: 134217728  # value 1 -> W41 bit[27]: ingress::hdr.fabric.$valid
        shift: 13
        buf_req: 13
        next: parse_ipv6
      0x8100:
        0..3: W5
            # - bit[0] -> W5 bit[31]: ingress::hdr.fabric.pad1
            # - bit[1] -> W5 bit[30]: ingress::hdr.fabric.is_hit
            # - bit[2] -> W5 bit[29]: ingress::hdr.fabric.is_to_cn78
            # - bit[3] -> W5 bit[28]: ingress::hdr.fabric.is_to_td3
            # - bit[4] -> W5 bit[27]: ingress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W5 bit[26..24]: ingress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W5 bit[23..18]: ingress::hdr.fabric.pad2
            # - bit[14..31] -> W5 bit[17..0]: ingress::hdr.fabric.mac_index
        4: B4
            # - bit[32..35] -> B4 bit[7..4]: ingress::hdr.fabric.pad4
            # - bit[36] -> B4 bit[3]: ingress::hdr.fabric.flags_drop
            # - bit[37] -> B4 bit[2]: ingress::hdr.fabric.is_trunc_mir
            # - bit[38..39] -> B4 bit[1..0]: ingress::hdr.fabric.count_index[17:16].16-17
        5..8: W3
            # - bit[40..55] -> W3 bit[31..16]: ingress::hdr.fabric.count_index[15:0].0-15
            # - bit[56..71] -> W3 bit[15..0]: ingress::hdr.fabric.mc_index
        9..12: W4
            # - bit[72..87] -> W4 bit[31..16]: ingress::hdr.fabric.vlan_index
            # - bit[88..103] -> W4 bit[15..0]: ingress::hdr.fabric.ether_type
        W41: 134217728  # value 1 -> W41 bit[27]: ingress::hdr.fabric.$valid
        load: { half : 15..16 }
        shift: 13
        buf_req: 17
        next: parse_vlan
      0x8847:
        0..3: W5
            # - bit[0] -> W5 bit[31]: ingress::hdr.fabric.pad1
            # - bit[1] -> W5 bit[30]: ingress::hdr.fabric.is_hit
            # - bit[2] -> W5 bit[29]: ingress::hdr.fabric.is_to_cn78
            # - bit[3] -> W5 bit[28]: ingress::hdr.fabric.is_to_td3
            # - bit[4] -> W5 bit[27]: ingress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W5 bit[26..24]: ingress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W5 bit[23..18]: ingress::hdr.fabric.pad2
            # - bit[14..31] -> W5 bit[17..0]: ingress::hdr.fabric.mac_index
        4: B4
            # - bit[32..35] -> B4 bit[7..4]: ingress::hdr.fabric.pad4
            # - bit[36] -> B4 bit[3]: ingress::hdr.fabric.flags_drop
            # - bit[37] -> B4 bit[2]: ingress::hdr.fabric.is_trunc_mir
            # - bit[38..39] -> B4 bit[1..0]: ingress::hdr.fabric.count_index[17:16].16-17
        5..8: W3
            # - bit[40..55] -> W3 bit[31..16]: ingress::hdr.fabric.count_index[15:0].0-15
            # - bit[56..71] -> W3 bit[15..0]: ingress::hdr.fabric.mc_index
        9..12: W4
            # - bit[72..87] -> W4 bit[31..16]: ingress::hdr.fabric.vlan_index
            # - bit[88..103] -> W4 bit[15..0]: ingress::hdr.fabric.ether_type
        W41: 134217728  # value 1 -> W41 bit[27]: ingress::hdr.fabric.$valid
        load: { byte1 : 15 }
        shift: 13
        buf_req: 16
        next: parse_mpls
      0x****:
        0..3: W5
            # - bit[0] -> W5 bit[31]: ingress::hdr.fabric.pad1
            # - bit[1] -> W5 bit[30]: ingress::hdr.fabric.is_hit
            # - bit[2] -> W5 bit[29]: ingress::hdr.fabric.is_to_cn78
            # - bit[3] -> W5 bit[28]: ingress::hdr.fabric.is_to_td3
            # - bit[4] -> W5 bit[27]: ingress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W5 bit[26..24]: ingress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W5 bit[23..18]: ingress::hdr.fabric.pad2
            # - bit[14..31] -> W5 bit[17..0]: ingress::hdr.fabric.mac_index
        4: B4
            # - bit[32..35] -> B4 bit[7..4]: ingress::hdr.fabric.pad4
            # - bit[36] -> B4 bit[3]: ingress::hdr.fabric.flags_drop
            # - bit[37] -> B4 bit[2]: ingress::hdr.fabric.is_trunc_mir
            # - bit[38..39] -> B4 bit[1..0]: ingress::hdr.fabric.count_index[17:16].16-17
        5..8: W3
            # - bit[40..55] -> W3 bit[31..16]: ingress::hdr.fabric.count_index[15:0].0-15
            # - bit[56..71] -> W3 bit[15..0]: ingress::hdr.fabric.mc_index
        9..12: W4
            # - bit[72..87] -> W4 bit[31..16]: ingress::hdr.fabric.vlan_index
            # - bit[88..103] -> W4 bit[15..0]: ingress::hdr.fabric.ether_type
        W41: 134217728  # value 1 -> W41 bit[27]: ingress::hdr.fabric.$valid
        shift: 13
        buf_req: 13
        next: end
    parse_from_cn78:
      match: [ half ]
      0x0800:
        0..3: W4  # bit[0..7] -> W4 bit[31..24]: ingress::hdr.fabric_from_cn78.action_type
        2..5: W3
            # - bit[16..31] -> W3 bit[31..16]: ingress::hdr.fabric_from_cn78.port_group_id
            # - bit[32..47] -> W3 bit[15..0]: ingress::hdr.fabric_from_cn78.ether_type
        W41: 268435456  # value 1 -> W41 bit[28]: ingress::hdr.fabric_from_cn78.$valid
        shift: 6
        buf_req: 6
        next: parse_ipv4
      0x86dd:
        0..3: W4  # bit[0..7] -> W4 bit[31..24]: ingress::hdr.fabric_from_cn78.action_type
        2..5: W3
            # - bit[16..31] -> W3 bit[31..16]: ingress::hdr.fabric_from_cn78.port_group_id
            # - bit[32..47] -> W3 bit[15..0]: ingress::hdr.fabric_from_cn78.ether_type
        W41: 268435456  # value 1 -> W41 bit[28]: ingress::hdr.fabric_from_cn78.$valid
        shift: 6
        buf_req: 6
        next: parse_ipv6
      0x8100:
        0..3: W4  # bit[0..7] -> W4 bit[31..24]: ingress::hdr.fabric_from_cn78.action_type
        2..5: W3
            # - bit[16..31] -> W3 bit[31..16]: ingress::hdr.fabric_from_cn78.port_group_id
            # - bit[32..47] -> W3 bit[15..0]: ingress::hdr.fabric_from_cn78.ether_type
        W41: 268435456  # value 1 -> W41 bit[28]: ingress::hdr.fabric_from_cn78.$valid
        load: { half : 8..9 }
        shift: 6
        buf_req: 10
        next: parse_vlan
      0x8847:
        0..3: W4  # bit[0..7] -> W4 bit[31..24]: ingress::hdr.fabric_from_cn78.action_type
        2..5: W3
            # - bit[16..31] -> W3 bit[31..16]: ingress::hdr.fabric_from_cn78.port_group_id
            # - bit[32..47] -> W3 bit[15..0]: ingress::hdr.fabric_from_cn78.ether_type
        W41: 268435456  # value 1 -> W41 bit[28]: ingress::hdr.fabric_from_cn78.$valid
        load: { byte1 : 8 }
        shift: 6
        buf_req: 9
        next: parse_mpls
      0x****:
        0..3: W4  # bit[0..7] -> W4 bit[31..24]: ingress::hdr.fabric_from_cn78.action_type
        2..5: W3
            # - bit[16..31] -> W3 bit[31..16]: ingress::hdr.fabric_from_cn78.port_group_id
            # - bit[32..47] -> W3 bit[15..0]: ingress::hdr.fabric_from_cn78.ether_type
        W41: 268435456  # value 1 -> W41 bit[28]: ingress::hdr.fabric_from_cn78.$valid
        shift: 6
        buf_req: 6
        next: end
deparser ingress:
  dictionary:
    B0: W41(0)  # ingress::hdr.bridged_md.src if ingress::hdr.bridged_md.$valid
    H3: W41(0)
        # - bit[15..8]: ingress::hdr.bridged_md.pkt_proto_type if ingress::hdr.bridged_md.$valid
        # - bit[7..0]: ingress::hdr.bridged_md.ip_hdr_location if ingress::hdr.bridged_md.$valid
    B7: W41(0)
        # - bit[7..1]: ingress::hdr.bridged_md.pad1 if ingress::hdr.bridged_md.$valid
        # - bit[0]: ingress::hdr.bridged_md.tunnel_type.5-5 if ingress::hdr.bridged_md.$valid
    B6: W41(0)
        # - bit[7..3]: ingress::hdr.bridged_md.tunnel_type.0-4 if ingress::hdr.bridged_md.$valid
        # - bit[2..0]: ingress::hdr.bridged_md.in_ig_port_type if ingress::hdr.bridged_md.$valid
    TW26: W41(1)  # ingress::hdr.ethernet.dst_addr.16-47 if ingress::hdr.ethernet.$valid
    H7: W41(1)  # ingress::hdr.ethernet.dst_addr.0-15 if ingress::hdr.ethernet.$valid
    TW27: W41(1)  # ingress::hdr.ethernet.src_addr.16-47 if ingress::hdr.ethernet.$valid
    TH25: W41(1)  # ingress::hdr.ethernet.src_addr.0-15 if ingress::hdr.ethernet.$valid
    H5: W41(1)  # ingress::hdr.ethernet.ether_type if ingress::hdr.ethernet.$valid
    W5: W41(27)
        # - bit[31]: ingress::hdr.fabric.pad1 if ingress::hdr.fabric.$valid
        # - bit[30]: ingress::hdr.fabric.is_hit if ingress::hdr.fabric.$valid
        # - bit[29]: ingress::hdr.fabric.is_to_cn78 if ingress::hdr.fabric.$valid
        # - bit[28]: ingress::hdr.fabric.is_to_td3 if ingress::hdr.fabric.$valid
        # - bit[27]: ingress::hdr.fabric.is_hdr_decap if ingress::hdr.fabric.$valid
        # - bit[26..24]: ingress::hdr.fabric.ig_port_type if ingress::hdr.fabric.$valid
        # - bit[23..18]: ingress::hdr.fabric.pad2 if ingress::hdr.fabric.$valid
        # - bit[17..0]: ingress::hdr.fabric.mac_index if ingress::hdr.fabric.$valid
    B4: W41(27)
        # - bit[7..4]: ingress::hdr.fabric.pad4 if ingress::hdr.fabric.$valid
        # - bit[3]: ingress::hdr.fabric.flags_drop if ingress::hdr.fabric.$valid
        # - bit[2]: ingress::hdr.fabric.is_trunc_mir if ingress::hdr.fabric.$valid
        # - bit[1..0]: ingress::hdr.fabric.count_index.16-17 if ingress::hdr.fabric.$valid
    W3: W41(27)
        # - bit[31..16]: ingress::hdr.fabric.count_index.0-15 if ingress::hdr.fabric.$valid
        # - bit[15..0]: ingress::hdr.fabric.mc_index if ingress::hdr.fabric.$valid
    W4: W41(27)
        # - bit[31..16]: ingress::hdr.fabric.vlan_index if ingress::hdr.fabric.$valid
        # - bit[15..0]: ingress::hdr.fabric.ether_type if ingress::hdr.fabric.$valid
    H4: B2(4)
        # - bit[15..13]: ingress::hdr.vlan_tag[0].pcp if ingress::hdr.vlan_tag[0].$valid
        # - bit[12]: ingress::hdr.vlan_tag[0].cfi if ingress::hdr.vlan_tag[0].$valid
        # - bit[11..0]: ingress::hdr.vlan_tag[0].vid if ingress::hdr.vlan_tag[0].$valid
    TH4: B2(4)  # ingress::hdr.vlan_tag[0].ether_type if ingress::hdr.vlan_tag[0].$valid
    TH5: B2(3)
        # - bit[15..13]: ingress::hdr.vlan_tag[1].pcp if ingress::hdr.vlan_tag[1].$valid
        # - bit[12]: ingress::hdr.vlan_tag[1].cfi if ingress::hdr.vlan_tag[1].$valid
        # - bit[11..0]: ingress::hdr.vlan_tag[1].vid if ingress::hdr.vlan_tag[1].$valid
    TB3: B2(3)  # ingress::hdr.vlan_tag[1].ether_type.8-15 if ingress::hdr.vlan_tag[1].$valid
    TB2: B2(3)  # ingress::hdr.vlan_tag[1].ether_type.0-7 if ingress::hdr.vlan_tag[1].$valid
    TW8: B2(2)
        # - bit[31..29]: ingress::hdr.vlan_tag[2].pcp if ingress::hdr.vlan_tag[2].$valid
        # - bit[28]: ingress::hdr.vlan_tag[2].cfi if ingress::hdr.vlan_tag[2].$valid
        # - bit[27..16]: ingress::hdr.vlan_tag[2].vid if ingress::hdr.vlan_tag[2].$valid
        # - bit[15..0]: ingress::hdr.vlan_tag[2].ether_type if ingress::hdr.vlan_tag[2].$valid
    TW9: B2(1)
        # - bit[31..29]: ingress::hdr.vlan_tag[3].pcp if ingress::hdr.vlan_tag[3].$valid
        # - bit[28]: ingress::hdr.vlan_tag[3].cfi if ingress::hdr.vlan_tag[3].$valid
        # - bit[27..16]: ingress::hdr.vlan_tag[3].vid if ingress::hdr.vlan_tag[3].$valid
        # - bit[15..0]: ingress::hdr.vlan_tag[3].ether_type if ingress::hdr.vlan_tag[3].$valid
    TW10: B2(0)
        # - bit[31..29]: ingress::hdr.vlan_tag[4].pcp if ingress::hdr.vlan_tag[4].$valid
        # - bit[28]: ingress::hdr.vlan_tag[4].cfi if ingress::hdr.vlan_tag[4].$valid
        # - bit[27..16]: ingress::hdr.vlan_tag[4].vid if ingress::hdr.vlan_tag[4].$valid
        # - bit[15..0]: ingress::hdr.vlan_tag[4].ether_type if ingress::hdr.vlan_tag[4].$valid
    TW11: B3(3)
        # - bit[31..12]: ingress::hdr.mpls[0].label if ingress::hdr.mpls[0].$valid
        # - bit[11..9]: ingress::hdr.mpls[0].exp if ingress::hdr.mpls[0].$valid
        # - bit[8]: ingress::hdr.mpls[0].bos if ingress::hdr.mpls[0].$valid
        # - bit[7..0]: ingress::hdr.mpls[0].ttl if ingress::hdr.mpls[0].$valid
    TH13: B3(2)  # ingress::hdr.mpls[1].label.4-19 if ingress::hdr.mpls[1].$valid
    TH12: B3(2)
        # - bit[15..12]: ingress::hdr.mpls[1].label.0-3 if ingress::hdr.mpls[1].$valid
        # - bit[11..9]: ingress::hdr.mpls[1].exp if ingress::hdr.mpls[1].$valid
        # - bit[8]: ingress::hdr.mpls[1].bos if ingress::hdr.mpls[1].$valid
        # - bit[7..0]: ingress::hdr.mpls[1].ttl if ingress::hdr.mpls[1].$valid
    TH15: B3(1)  # ingress::hdr.mpls[2].label.4-19 if ingress::hdr.mpls[2].$valid
    TH14: B3(1)
        # - bit[15..12]: ingress::hdr.mpls[2].label.0-3 if ingress::hdr.mpls[2].$valid
        # - bit[11..9]: ingress::hdr.mpls[2].exp if ingress::hdr.mpls[2].$valid
        # - bit[8]: ingress::hdr.mpls[2].bos if ingress::hdr.mpls[2].$valid
        # - bit[7..0]: ingress::hdr.mpls[2].ttl if ingress::hdr.mpls[2].$valid
    TH17: B3(0)  # ingress::hdr.mpls[3].label.4-19 if ingress::hdr.mpls[3].$valid
    TH16: B3(0)
        # - bit[15..12]: ingress::hdr.mpls[3].label.0-3 if ingress::hdr.mpls[3].$valid
        # - bit[11..9]: ingress::hdr.mpls[3].exp if ingress::hdr.mpls[3].$valid
        # - bit[8]: ingress::hdr.mpls[3].bos if ingress::hdr.mpls[3].$valid
        # - bit[7..0]: ingress::hdr.mpls[3].ttl if ingress::hdr.mpls[3].$valid
    TW0: W41(2)
        # - bit[31..28]: ingress::hdr.ipv4.version if ingress::hdr.ipv4.$valid
        # - bit[27..24]: ingress::hdr.ipv4.ihl if ingress::hdr.ipv4.$valid
        # - bit[23..16]: ingress::hdr.ipv4.diffserv if ingress::hdr.ipv4.$valid
        # - bit[15..0]: ingress::hdr.ipv4.total_len if ingress::hdr.ipv4.$valid
    TB11: W41(2)  # ingress::hdr.ipv4.identification.8-15 if ingress::hdr.ipv4.$valid
    TB10: W41(2)  # ingress::hdr.ipv4.identification.0-7 if ingress::hdr.ipv4.$valid
    TB8: W41(2)
        # - bit[7..5]: ingress::hdr.ipv4.flags if ingress::hdr.ipv4.$valid
        # - bit[4..0]: ingress::hdr.ipv4.frag_offset.8-12 if ingress::hdr.ipv4.$valid
    TB9: W41(2)  # ingress::hdr.ipv4.frag_offset.0-7 if ingress::hdr.ipv4.$valid
    TW16: W41(2)
        # - bit[31..24]: ingress::hdr.ipv4.ttl if ingress::hdr.ipv4.$valid
        # - bit[23..16]: ingress::hdr.ipv4.protocol if ingress::hdr.ipv4.$valid
        # - bit[15..0]: ingress::hdr.ipv4.hdr_checksum if ingress::hdr.ipv4.$valid
    TH36: W41(2)  # ingress::hdr.ipv4.src_addr.16-31 if ingress::hdr.ipv4.$valid
    TH29: W41(2)  # ingress::hdr.ipv4.src_addr.0-15 if ingress::hdr.ipv4.$valid
    TH38: W41(2)  # ingress::hdr.ipv4.dst_addr.16-31 if ingress::hdr.ipv4.$valid
    TH37: W41(2)  # ingress::hdr.ipv4.dst_addr.0-15 if ingress::hdr.ipv4.$valid
    TW0: W41(26)
        # - bit[31..28]: ingress::hdr.ipv6.version if ingress::hdr.ipv6.$valid
        # - bit[27..20]: ingress::hdr.ipv6.traffic_class if ingress::hdr.ipv6.$valid
        # - bit[19..0]: ingress::hdr.ipv6.flow_label if ingress::hdr.ipv6.$valid
    TW16: W41(26)
        # - bit[31..16]: ingress::hdr.ipv6.payload_len if ingress::hdr.ipv6.$valid
        # - bit[15..8]: ingress::hdr.ipv6.next_hdr if ingress::hdr.ipv6.$valid
        # - bit[7..0]: ingress::hdr.ipv6.hop_limit if ingress::hdr.ipv6.$valid
    W36: W41(26)  # ingress::hdr.ipv6.src_addr.96-127 if ingress::hdr.ipv6.$valid
    TB11: W41(26)  # ingress::hdr.ipv6.src_addr.88-95 if ingress::hdr.ipv6.$valid
    TB10: W41(26)  # ingress::hdr.ipv6.src_addr.80-87 if ingress::hdr.ipv6.$valid
    TB9: W41(26)  # ingress::hdr.ipv6.src_addr.72-79 if ingress::hdr.ipv6.$valid
    TB8: W41(26)  # ingress::hdr.ipv6.src_addr.64-71 if ingress::hdr.ipv6.$valid
    TH38: W41(26)  # ingress::hdr.ipv6.src_addr.48-63 if ingress::hdr.ipv6.$valid
    TH37: W41(26)  # ingress::hdr.ipv6.src_addr.32-47 if ingress::hdr.ipv6.$valid
    TH36: W41(26)  # ingress::hdr.ipv6.src_addr.16-31 if ingress::hdr.ipv6.$valid
    TH29: W41(26)  # ingress::hdr.ipv6.src_addr.0-15 if ingress::hdr.ipv6.$valid
    W40: W41(26)  # ingress::hdr.ipv6.dst_addr.96-127 if ingress::hdr.ipv6.$valid
    W39: W41(26)  # ingress::hdr.ipv6.dst_addr.64-95 if ingress::hdr.ipv6.$valid
    W38: W41(26)  # ingress::hdr.ipv6.dst_addr.32-63 if ingress::hdr.ipv6.$valid
    W37: W41(26)  # ingress::hdr.ipv6.dst_addr.0-31 if ingress::hdr.ipv6.$valid
    TW18: W41(16)
        # - bit[31..16]: ingress::hdr.udp.src_port if ingress::hdr.udp.$valid
        # - bit[15..0]: ingress::hdr.udp.dst_port if ingress::hdr.udp.$valid
    TW19: W41(16)
        # - bit[31..16]: ingress::hdr.udp.hdr_length if ingress::hdr.udp.$valid
        # - bit[15..0]: ingress::hdr.udp.checksum if ingress::hdr.udp.$valid
    TW18: W41(3)
        # - bit[31..16]: ingress::hdr.tcp.src_port if ingress::hdr.tcp.$valid
        # - bit[15..0]: ingress::hdr.tcp.dst_port if ingress::hdr.tcp.$valid
    TW25: W41(3)  # ingress::hdr.tcp.seq_no if ingress::hdr.tcp.$valid
    TH39: W41(3)  # ingress::hdr.tcp.ack_no.16-31 if ingress::hdr.tcp.$valid
    TB24: W41(3)  # ingress::hdr.tcp.ack_no.8-15 if ingress::hdr.tcp.$valid
    TB19: W41(3)  # ingress::hdr.tcp.ack_no.0-7 if ingress::hdr.tcp.$valid
    TW1: W41(3)
        # - bit[31..28]: ingress::hdr.tcp.data_offset if ingress::hdr.tcp.$valid
        # - bit[27..24]: ingress::hdr.tcp.res if ingress::hdr.tcp.$valid
        # - bit[23..16]: ingress::hdr.tcp.flags if ingress::hdr.tcp.$valid
        # - bit[15..0]: ingress::hdr.tcp.window if ingress::hdr.tcp.$valid
    TW19: W41(3)
        # - bit[31..16]: ingress::hdr.tcp.checksum if ingress::hdr.tcp.$valid
        # - bit[15..0]: ingress::hdr.tcp.urgent_ptr if ingress::hdr.tcp.$valid
    TW1: W41(23)
        # - bit[31..24]: ingress::hdr.icmp.type_ if ingress::hdr.icmp.$valid
        # - bit[23..16]: ingress::hdr.icmp.code if ingress::hdr.icmp.$valid
        # - bit[15..0]: ingress::hdr.icmp.hdr_checksum if ingress::hdr.icmp.$valid
    TW1: W41(24)
        # - bit[31..16]: ingress::hdr.sctp.src_port if ingress::hdr.sctp.$valid
        # - bit[15..0]: ingress::hdr.sctp.dst_port if ingress::hdr.sctp.$valid
    TW2: W41(24)  # ingress::hdr.sctp.verifTag if ingress::hdr.sctp.$valid
    TH0: W41(24)  # ingress::hdr.sctp.checksum if ingress::hdr.sctp.$valid
    TW1: W41(21)
        # - bit[31..20]: ingress::hdr.l2tp.TLxxSxOP if ingress::hdr.l2tp.$valid
        # - bit[19..16]: ingress::hdr.l2tp.version if ingress::hdr.l2tp.$valid
        # - bit[15..8]: ingress::hdr.l2tp.l2tp_length if ingress::hdr.l2tp.$valid
        # - bit[7..0]: ingress::hdr.l2tp.tunnel_id.8-15 if ingress::hdr.l2tp.$valid
    TB0: W41(21)  # ingress::hdr.l2tp.tunnel_id.0-7 if ingress::hdr.l2tp.$valid
    TH26: W41(21)  # ingress::hdr.l2tp.session_id if ingress::hdr.l2tp.$valid
    TB19: W41(21)  # ingress::hdr.l2tp.Ns.8-15 if ingress::hdr.l2tp.$valid
    TB18: W41(21)  # ingress::hdr.l2tp.Ns.0-7 if ingress::hdr.l2tp.$valid
    TH0: W41(21)  # ingress::hdr.l2tp.Nr if ingress::hdr.l2tp.$valid
    TB17: W41(21)  # ingress::hdr.l2tp.offset_size if ingress::hdr.l2tp.$valid
    TB1: W41(21)  # ingress::hdr.l2tp.offset_pad if ingress::hdr.l2tp.$valid
    TH1: W41(22)
        # - bit[15..12]: ingress::hdr.pppoe.version if ingress::hdr.pppoe.$valid
        # - bit[11..8]: ingress::hdr.pppoe.type if ingress::hdr.pppoe.$valid
        # - bit[7..0]: ingress::hdr.pppoe.code if ingress::hdr.pppoe.$valid
    TH2: W41(22)  # ingress::hdr.pppoe.session_id if ingress::hdr.pppoe.$valid
    TW25: W41(22)
        # - bit[31..16]: ingress::hdr.pppoe.pppoe_length if ingress::hdr.pppoe.$valid
        # - bit[15..0]: ingress::hdr.pppoe.ppp_proto if ingress::hdr.pppoe.$valid
    TH1: W41(22)
        # - bit[15..12]: ingress::hdr.pppoe.version if ingress::hdr.pppoe.$valid
        # - bit[11..8]: ingress::hdr.pppoe.type if ingress::hdr.pppoe.$valid
        # - bit[7..0]: ingress::hdr.pppoe.code if ingress::hdr.pppoe.$valid
    TH2: W41(22)  # ingress::hdr.pppoe.session_id if ingress::hdr.pppoe.$valid
    TW25: W41(22)
        # - bit[31..16]: ingress::hdr.pppoe.pppoe_length if ingress::hdr.pppoe.$valid
        # - bit[15..0]: ingress::hdr.pppoe.ppp_proto if ingress::hdr.pppoe.$valid
    TH0: W41(25)
        # - bit[15]: ingress::hdr.gre.C if ingress::hdr.gre.$valid
        # - bit[14]: ingress::hdr.gre.R if ingress::hdr.gre.$valid
        # - bit[13]: ingress::hdr.gre.K if ingress::hdr.gre.$valid
        # - bit[12]: ingress::hdr.gre.S if ingress::hdr.gre.$valid
        # - bit[11]: ingress::hdr.gre.s if ingress::hdr.gre.$valid
        # - bit[10..8]: ingress::hdr.gre.recurse if ingress::hdr.gre.$valid
        # - bit[7..3]: ingress::hdr.gre.flags if ingress::hdr.gre.$valid
        # - bit[2..0]: ingress::hdr.gre.version if ingress::hdr.gre.$valid
    TB1: W41(25)  # ingress::hdr.gre.proto.8-15 if ingress::hdr.gre.$valid
    TB0: W41(25)  # ingress::hdr.gre.proto.0-7 if ingress::hdr.gre.$valid
    TH0: W41(19)
        # - bit[15..13]: ingress::hdr.gtpv1_8b.version if ingress::hdr.gtpv1_8b.$valid
        # - bit[12]: ingress::hdr.gtpv1_8b.pt if ingress::hdr.gtpv1_8b.$valid
        # - bit[11]: ingress::hdr.gtpv1_8b.reserved if ingress::hdr.gtpv1_8b.$valid
        # - bit[10]: ingress::hdr.gtpv1_8b.e if ingress::hdr.gtpv1_8b.$valid
        # - bit[9]: ingress::hdr.gtpv1_8b.s if ingress::hdr.gtpv1_8b.$valid
        # - bit[8]: ingress::hdr.gtpv1_8b.pn if ingress::hdr.gtpv1_8b.$valid
        # - bit[7..0]: ingress::hdr.gtpv1_8b.message_type if ingress::hdr.gtpv1_8b.$valid
    TH1: W41(19)  # ingress::hdr.gtpv1_8b.message_len if ingress::hdr.gtpv1_8b.$valid
    TW1: W41(19)  # ingress::hdr.gtpv1_8b.teid if ingress::hdr.gtpv1_8b.$valid
    TH0: W41(20)
        # - bit[15..13]: ingress::hdr.gtpv1_12b.version if ingress::hdr.gtpv1_12b.$valid
        # - bit[12]: ingress::hdr.gtpv1_12b.pt if ingress::hdr.gtpv1_12b.$valid
        # - bit[11]: ingress::hdr.gtpv1_12b.reserved if ingress::hdr.gtpv1_12b.$valid
        # - bit[10]: ingress::hdr.gtpv1_12b.e if ingress::hdr.gtpv1_12b.$valid
        # - bit[9]: ingress::hdr.gtpv1_12b.s if ingress::hdr.gtpv1_12b.$valid
        # - bit[8]: ingress::hdr.gtpv1_12b.pn if ingress::hdr.gtpv1_12b.$valid
        # - bit[7..0]: ingress::hdr.gtpv1_12b.message_type if ingress::hdr.gtpv1_12b.$valid
    TH1: W41(20)  # ingress::hdr.gtpv1_12b.message_len if ingress::hdr.gtpv1_12b.$valid
    TW25: W41(20)  # ingress::hdr.gtpv1_12b.teid if ingress::hdr.gtpv1_12b.$valid
    TW1: W41(20)
        # - bit[31..16]: ingress::hdr.gtpv1_12b.seq_no if ingress::hdr.gtpv1_12b.$valid
        # - bit[15..8]: ingress::hdr.gtpv1_12b.n_pdu_no if ingress::hdr.gtpv1_12b.$valid
        # - bit[7..0]: ingress::hdr.gtpv1_12b.next_ex_hdr_t if ingress::hdr.gtpv1_12b.$valid
    TH0: W41(4)
        # - bit[15..13]: ingress::hdr.gtpv2_8b.version if ingress::hdr.gtpv2_8b.$valid
        # - bit[12]: ingress::hdr.gtpv2_8b.pb if ingress::hdr.gtpv2_8b.$valid
        # - bit[11]: ingress::hdr.gtpv2_8b.tf if ingress::hdr.gtpv2_8b.$valid
        # - bit[10..8]: ingress::hdr.gtpv2_8b.spare1 if ingress::hdr.gtpv2_8b.$valid
        # - bit[7..0]: ingress::hdr.gtpv2_8b.message_type if ingress::hdr.gtpv2_8b.$valid
    TH1: W41(4)  # ingress::hdr.gtpv2_8b.total_len if ingress::hdr.gtpv2_8b.$valid
    TH26: W41(4)  # ingress::hdr.gtpv2_8b.seq_no.8-23 if ingress::hdr.gtpv2_8b.$valid
    TB18: W41(4)  # ingress::hdr.gtpv2_8b.seq_no.0-7 if ingress::hdr.gtpv2_8b.$valid
    TB17: W41(4)  # ingress::hdr.gtpv2_8b.spare2 if ingress::hdr.gtpv2_8b.$valid
    TH0: W41(15)
        # - bit[15..13]: ingress::hdr.gtpv2_12b.version if ingress::hdr.gtpv2_12b.$valid
        # - bit[12]: ingress::hdr.gtpv2_12b.pb if ingress::hdr.gtpv2_12b.$valid
        # - bit[11]: ingress::hdr.gtpv2_12b.tf if ingress::hdr.gtpv2_12b.$valid
        # - bit[10..8]: ingress::hdr.gtpv2_12b.spare1 if ingress::hdr.gtpv2_12b.$valid
        # - bit[7..0]: ingress::hdr.gtpv2_12b.message_type if ingress::hdr.gtpv2_12b.$valid
    TH1: W41(15)  # ingress::hdr.gtpv2_12b.total_len if ingress::hdr.gtpv2_12b.$valid
    W35: W41(15)  # ingress::hdr.gtpv2_12b.teid if ingress::hdr.gtpv2_12b.$valid
    TH26: W41(15)  # ingress::hdr.gtpv2_12b.seq_no.8-23 if ingress::hdr.gtpv2_12b.$valid
    TB18: W41(15)  # ingress::hdr.gtpv2_12b.seq_no.0-7 if ingress::hdr.gtpv2_12b.$valid
    TB17: W41(15)  # ingress::hdr.gtpv2_12b.spare2 if ingress::hdr.gtpv2_12b.$valid
    TB1: W41(6)  # ingress::hdr.cause_ie_6b.type if ingress::hdr.cause_ie_6b.$valid
    TW3: W41(6)
        # - bit[31..16]: ingress::hdr.cause_ie_6b.len if ingress::hdr.cause_ie_6b.$valid
        # - bit[15..12]: ingress::hdr.cause_ie_6b.spare1 if ingress::hdr.cause_ie_6b.$valid
        # - bit[11..8]: ingress::hdr.cause_ie_6b.instance if ingress::hdr.cause_ie_6b.$valid
        # - bit[7..0]: ingress::hdr.cause_ie_6b.cause_value if ingress::hdr.cause_ie_6b.$valid
    TB0: W41(6)
        # - bit[7..3]: ingress::hdr.cause_ie_6b.spare2 if ingress::hdr.cause_ie_6b.$valid
        # - bit[2]: ingress::hdr.cause_ie_6b.pce if ingress::hdr.cause_ie_6b.$valid
        # - bit[1]: ingress::hdr.cause_ie_6b.bce if ingress::hdr.cause_ie_6b.$valid
        # - bit[0]: ingress::hdr.cause_ie_6b.cs if ingress::hdr.cause_ie_6b.$valid
    TB1: W41(7)  # ingress::hdr.cause_ie_10b.type if ingress::hdr.cause_ie_10b.$valid
    TW3: W41(7)
        # - bit[31..16]: ingress::hdr.cause_ie_10b.len if ingress::hdr.cause_ie_10b.$valid
        # - bit[15..12]: ingress::hdr.cause_ie_10b.spare1 if ingress::hdr.cause_ie_10b.$valid
        # - bit[11..8]: ingress::hdr.cause_ie_10b.instance if ingress::hdr.cause_ie_10b.$valid
        # - bit[7..0]: ingress::hdr.cause_ie_10b.cause_value if ingress::hdr.cause_ie_10b.$valid
    TB0: W41(7)
        # - bit[7..3]: ingress::hdr.cause_ie_10b.spare2 if ingress::hdr.cause_ie_10b.$valid
        # - bit[2]: ingress::hdr.cause_ie_10b.pce if ingress::hdr.cause_ie_10b.$valid
        # - bit[1]: ingress::hdr.cause_ie_10b.bce if ingress::hdr.cause_ie_10b.$valid
        # - bit[0]: ingress::hdr.cause_ie_10b.cs if ingress::hdr.cause_ie_10b.$valid
    TH3: W41(7)
        # - bit[15..8]: ingress::hdr.cause_ie_10b.type_oe if ingress::hdr.cause_ie_10b.$valid
        # - bit[7..0]: ingress::hdr.cause_ie_10b.len_oe.8-15 if ingress::hdr.cause_ie_10b.$valid
    TH2: W41(7)
        # - bit[15..8]: ingress::hdr.cause_ie_10b.len_oe.0-7 if ingress::hdr.cause_ie_10b.$valid
        # - bit[7..4]: ingress::hdr.cause_ie_10b.spare_oe if ingress::hdr.cause_ie_10b.$valid
        # - bit[3..0]: ingress::hdr.cause_ie_10b.instance_oe if ingress::hdr.cause_ie_10b.$valid
    TW2: W41(5)
        # - bit[31..24]: ingress::hdr.imsi.type if ingress::hdr.imsi.$valid
        # - bit[23..8]: ingress::hdr.imsi.len if ingress::hdr.imsi.$valid
        # - bit[7..4]: ingress::hdr.imsi.spare if ingress::hdr.imsi.$valid
        # - bit[3..0]: ingress::hdr.imsi.instance if ingress::hdr.imsi.$valid
    TH28: W41(5)  # ingress::hdr.imsi.num_digit.112-127 if ingress::hdr.imsi.$valid
    TB25: W41(5)  # ingress::hdr.imsi.num_digit.104-111 if ingress::hdr.imsi.$valid
    TB16: W41(5)  # ingress::hdr.imsi.num_digit.96-103 if ingress::hdr.imsi.$valid
    TH27: W41(5)  # ingress::hdr.imsi.num_digit.80-95 if ingress::hdr.imsi.$valid
    TH24: W41(5)  # ingress::hdr.imsi.num_digit.64-79 if ingress::hdr.imsi.$valid
    TW24: W41(5)  # ingress::hdr.imsi.num_digit.32-63 if ingress::hdr.imsi.$valid
    TW17: W41(5)  # ingress::hdr.imsi.num_digit.0-31 if ingress::hdr.imsi.$valid
    TW1: W41(17)
        # - bit[31..24]: ingress::hdr.vxlan.flags if ingress::hdr.vxlan.$valid
        # - bit[23..0]: ingress::hdr.vxlan.reserved if ingress::hdr.vxlan.$valid
    TH1: W41(17)  # ingress::hdr.vxlan.vni.8-23 if ingress::hdr.vxlan.$valid
    TH0: W41(17)
        # - bit[15..8]: ingress::hdr.vxlan.vni.0-7 if ingress::hdr.vxlan.$valid
        # - bit[7..0]: ingress::hdr.vxlan.reserved2 if ingress::hdr.vxlan.$valid
    TW25: W41(18)  # ingress::hdr.inner_ethernet.dst_addr.16-47 if ingress::hdr.inner_ethernet.$valid
    TB18: W41(18)  # ingress::hdr.inner_ethernet.dst_addr.8-15 if ingress::hdr.inner_ethernet.$valid
    TB17: W41(18)  # ingress::hdr.inner_ethernet.dst_addr.0-7 if ingress::hdr.inner_ethernet.$valid
    TH39: W41(18)  # ingress::hdr.inner_ethernet.src_addr.32-47 if ingress::hdr.inner_ethernet.$valid
    TB1: W41(18)  # ingress::hdr.inner_ethernet.src_addr.24-31 if ingress::hdr.inner_ethernet.$valid
    TB0: W41(18)  # ingress::hdr.inner_ethernet.src_addr.16-23 if ingress::hdr.inner_ethernet.$valid
    TH26: W41(18)  # ingress::hdr.inner_ethernet.src_addr.0-15 if ingress::hdr.inner_ethernet.$valid
    TH2: W41(18)  # ingress::hdr.inner_ethernet.ether_type if ingress::hdr.inner_ethernet.$valid
    TW2: W41(8)
        # - bit[31..28]: ingress::hdr.inner_ipv4.version if ingress::hdr.inner_ipv4.$valid
        # - bit[27..24]: ingress::hdr.inner_ipv4.ihl if ingress::hdr.inner_ipv4.$valid
        # - bit[23..16]: ingress::hdr.inner_ipv4.diffserv if ingress::hdr.inner_ipv4.$valid
        # - bit[15..0]: ingress::hdr.inner_ipv4.total_len if ingress::hdr.inner_ipv4.$valid
    TH24: W41(8)  # ingress::hdr.inner_ipv4.identification if ingress::hdr.inner_ipv4.$valid
    TH3: W41(8)
        # - bit[15..13]: ingress::hdr.inner_ipv4.flags if ingress::hdr.inner_ipv4.$valid
        # - bit[12..0]: ingress::hdr.inner_ipv4.frag_offset if ingress::hdr.inner_ipv4.$valid
    TW17: W41(8)
        # - bit[31..24]: ingress::hdr.inner_ipv4.ttl if ingress::hdr.inner_ipv4.$valid
        # - bit[23..16]: ingress::hdr.inner_ipv4.protocol if ingress::hdr.inner_ipv4.$valid
        # - bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum if ingress::hdr.inner_ipv4.$valid
    TH40: W41(8)  # ingress::hdr.inner_ipv4.src_addr.16-31 if ingress::hdr.inner_ipv4.$valid
    TB25: W41(8)  # ingress::hdr.inner_ipv4.src_addr.8-15 if ingress::hdr.inner_ipv4.$valid
    TB16: W41(8)  # ingress::hdr.inner_ipv4.src_addr.0-7 if ingress::hdr.inner_ipv4.$valid
    TH41: W41(8)  # ingress::hdr.inner_ipv4.dst_addr.16-31 if ingress::hdr.inner_ipv4.$valid
    TB27: W41(8)  # ingress::hdr.inner_ipv4.dst_addr.8-15 if ingress::hdr.inner_ipv4.$valid
    TB26: W41(8)  # ingress::hdr.inner_ipv4.dst_addr.0-7 if ingress::hdr.inner_ipv4.$valid
    TW2: W41(14)
        # - bit[31..28]: ingress::hdr.inner_ipv6.version if ingress::hdr.inner_ipv6.$valid
        # - bit[27..20]: ingress::hdr.inner_ipv6.traffic_class if ingress::hdr.inner_ipv6.$valid
        # - bit[19..0]: ingress::hdr.inner_ipv6.flow_label if ingress::hdr.inner_ipv6.$valid
    TH3: W41(14)  # ingress::hdr.inner_ipv6.payload_len if ingress::hdr.inner_ipv6.$valid
    B8: W41(14)  # ingress::hdr.inner_ipv6.next_hdr if ingress::hdr.inner_ipv6.$valid
    TB16: W41(14)  # ingress::hdr.inner_ipv6.hop_limit if ingress::hdr.inner_ipv6.$valid
    W14: W41(14)  # ingress::hdr.inner_ipv6.src_addr.96-127 if ingress::hdr.inner_ipv6.$valid
    W13: W41(14)  # ingress::hdr.inner_ipv6.src_addr.64-95 if ingress::hdr.inner_ipv6.$valid
    W12: W41(14)  # ingress::hdr.inner_ipv6.src_addr.32-63 if ingress::hdr.inner_ipv6.$valid
    W11: W41(14)  # ingress::hdr.inner_ipv6.src_addr.0-31 if ingress::hdr.inner_ipv6.$valid
    W34: W41(14)  # ingress::hdr.inner_ipv6.dst_addr.96-127 if ingress::hdr.inner_ipv6.$valid
    W33: W41(14)  # ingress::hdr.inner_ipv6.dst_addr.64-95 if ingress::hdr.inner_ipv6.$valid
    W32: W41(14)  # ingress::hdr.inner_ipv6.dst_addr.32-63 if ingress::hdr.inner_ipv6.$valid
    W15: W41(14)  # ingress::hdr.inner_ipv6.dst_addr.0-31 if ingress::hdr.inner_ipv6.$valid
    TW3: W41(11)
        # - bit[31..16]: ingress::hdr.inner_udp.src_port if ingress::hdr.inner_udp.$valid
        # - bit[15..0]: ingress::hdr.inner_udp.dst_port if ingress::hdr.inner_udp.$valid
    TW24: W41(11)
        # - bit[31..16]: ingress::hdr.inner_udp.hdr_length if ingress::hdr.inner_udp.$valid
        # - bit[15..0]: ingress::hdr.inner_udp.checksum if ingress::hdr.inner_udp.$valid
    TH28: W41(9)  # ingress::hdr.inner_tcp.src_port if ingress::hdr.inner_tcp.$valid
    TH27: W41(9)  # ingress::hdr.inner_tcp.dst_port if ingress::hdr.inner_tcp.$valid
    W6: W41(9)  # ingress::hdr.inner_tcp.seq_no if ingress::hdr.inner_tcp.$valid
    W7: W41(9)  # ingress::hdr.inner_tcp.ack_no if ingress::hdr.inner_tcp.$valid
    TW3: W41(9)
        # - bit[31..28]: ingress::hdr.inner_tcp.data_offset if ingress::hdr.inner_tcp.$valid
        # - bit[27..24]: ingress::hdr.inner_tcp.res if ingress::hdr.inner_tcp.$valid
        # - bit[23..16]: ingress::hdr.inner_tcp.flags if ingress::hdr.inner_tcp.$valid
        # - bit[15..0]: ingress::hdr.inner_tcp.window if ingress::hdr.inner_tcp.$valid
    TW24: W41(9)
        # - bit[31..16]: ingress::hdr.inner_tcp.checksum if ingress::hdr.inner_tcp.$valid
        # - bit[15..0]: ingress::hdr.inner_tcp.urgent_ptr if ingress::hdr.inner_tcp.$valid
    TW3: W41(12)
        # - bit[31..24]: ingress::hdr.inner_icmp.type_ if ingress::hdr.inner_icmp.$valid
        # - bit[23..16]: ingress::hdr.inner_icmp.code if ingress::hdr.inner_icmp.$valid
        # - bit[15..0]: ingress::hdr.inner_icmp.hdr_checksum if ingress::hdr.inner_icmp.$valid
    W9: W41(13)  # ingress::hdr.ipsec_esp.spi if ingress::hdr.ipsec_esp.$valid
    W10: W41(13)  # ingress::hdr.ipsec_esp.sn if ingress::hdr.ipsec_esp.$valid
    W8: W41(10)  # ingress::hdr.sip.data if ingress::hdr.sip.$valid
  egress_unicast_port: H1(0..8)  # bit[8..0]: ingress::ig_intr_md_for_tm.ucast_egress_port
  bypss_egr: B2(5..5)  # bit[5]: ingress::ig_intr_md_for_tm.bypass_egress
  drop_ctl: B3(4..6)  # bit[6..4]: ingress::ig_intr_md_for_dprsr.drop_ctl
  egress_multicast_group_1:
    - H0  # ingress::ig_intr_md_for_tm.mcast_grp_b
  hash_lag_ecmp_mcast_0:
    - W0(0..12)  # bit[12..0]: ingress::ig_intr_md_for_tm.level1_mcast_hash
  hash_lag_ecmp_mcast_1:
    - W1(0..12)  # bit[12..0]: ingress::ig_intr_md_for_tm.level2_mcast_hash
  mirror:
    select: B1(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.mirror_type
    5:
      - H2(0..9)  # bit[9..0]: ingress::ig_md.mirror.session_id
      - B9  # ingress::ig_md.mirror.src
      - B10  # ingress::ig_md.mirror.type
      - H2(0..9)  # bit[9..0]: ingress::ig_md.mirror.session_id
      - H6(0..9)  # bit[9..0]: ingress::ig_md.count_index.8-17
      - B5  # ingress::ig_md.count_index.0-7
      - H8  # ingress::ig_md.vlan_index
parser egress:
  start: $entry_point
  init_zero: [ H25, H26, B20, W48, B17, B16 ]
  bitwise_or: [ B16, B17, W48 ]
  hdr_len_adj: 27
  meta_opt: 8191
  states:
    $entry_point:
      *:
        load: { byte1 : 27 }
        buf_req: 28
        next: start
    start:
      match: [ byte1 ]
      0x00:
        0..1: H16  # bit[7..15] -> H16 bit[8..0]: egress::eg_intr_md.egress_port
        shift: 27
        buf_req: 27
        next: parse_bridged_metadata
      0x01:
        0..1: H16  # bit[7..15] -> H16 bit[8..0]: egress::eg_intr_md.egress_port
        shift: 27
        buf_req: 27
        next: parse_truncate_only_metadata
      0x**:
        0..1: H16  # bit[7..15] -> H16 bit[8..0]: egress::eg_intr_md.egress_port
        shift: 27
        buf_req: 27
        next: end
    parse_bridged_metadata:
      *:
        1..2: H23
            # - bit[8..15] -> H23 bit[15..8]: egress::eg_md.pkt_proto_type
            # - bit[16..23] -> H23 bit[7..0]: egress::eg_md.ip_hdr_location
        4: B20  # bit[37..39] -> B20 bit[2..0]: egress::eg_md.in_ig_port_type
        shift: 5
        buf_req: 5
        next: parse_ethernet
    parse_ethernet:
      *:
        0..3: TW31  # egress::hdr.ethernet.dst_addr[47:16].16-47
        4..5: H24  # egress::hdr.ethernet.dst_addr[15:0].0-15
        6..7: TH42  # egress::hdr.ethernet.src_addr[47:32].32-47
        8..9: TH35  # egress::hdr.ethernet.src_addr[31:16].16-31
        10..11: TH6  # egress::hdr.ethernet.src_addr[15:0].0-15
        W48: 2  # value 1 -> W48 bit[1]: egress::hdr.ethernet.$valid
        load: { half : 12..13 }
        shift: 12
        buf_req: 14
        next: parse_ethernet.$split_0
    parse_ethernet.$split_0:
      match: [ half ]
      0x0800:
        0..1: H19  # egress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: parse_ipv4
      0x86dd:
        0..1: H19  # egress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: parse_ipv6
      0x8100:
        0..1: H19  # egress::hdr.ethernet.ether_type
        load: { half : 4..5 }
        shift: 2
        buf_req: 6
        next: parse_vlan
      0x8847:
        0..1: H19  # egress::hdr.ethernet.ether_type
        load: { byte1 : 4 }
        shift: 2
        buf_req: 5
        next: parse_mpls
      0x81fe:
        0..1: H19  # egress::hdr.ethernet.ether_type
        load: { half : 13..14 }
        shift: 2
        buf_req: 15
        next: parse_fabric
      0x****:
        0..1: H19  # egress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: end
    parse_ipv4:
      *:
        0..3: TW4
            # - bit[0..3] -> TW4 bit[31..28]: egress::hdr.ipv4.version
            # - bit[4..7] -> TW4 bit[27..24]: egress::hdr.ipv4.ihl
            # - bit[8..15] -> TW4 bit[23..16]: egress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW4 bit[15..0]: egress::hdr.ipv4.total_len
        4..7: TW20
            # - bit[32..47] -> TW20 bit[31..16]: egress::hdr.ipv4.identification
            # - bit[48..50] -> TW20 bit[15..13]: egress::hdr.ipv4.flags
            # - bit[51..63] -> TW20 bit[12..0]: egress::hdr.ipv4.frag_offset
        8..9: TH31
            # - bit[64..71] -> TH31 bit[15..8]: egress::hdr.ipv4.ttl
            # - bit[72..79] -> TH31 bit[7..0]: egress::hdr.ipv4.protocol
        8..11: TW22  # bit[80..95] -> TW22 bit[15..0]: egress::hdr.ipv4.hdr_checksum
        12..13: TH44  # egress::hdr.ipv4.src_addr[31:16].16-31
        14..15: TH43  # egress::hdr.ipv4.src_addr[15:0].0-15
        16..17: TH46  # egress::hdr.ipv4.dst_addr[31:16].16-31
        W48: 4  # value 1 -> W48 bit[2]: egress::hdr.ipv4.$valid
        load: { byte1 : 9 }
        shift: 18
        buf_req: 18
        next: parse_ipv4.$split_0
    parse_ipv4.$split_0:
      match: [ byte1 ]
      0x06:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        load: { half : 4..5 }
        shift: 2
        buf_req: 6
        next: parse_tcp
      0x11:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        load: { half : 4..5 }
        shift: 2
        buf_req: 6
        next: parse_udp
      0x01:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        shift: 2
        buf_req: 2
        next: parse_icmp
      0x84:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        load: { half : 4..5 }
        shift: 2
        buf_req: 6
        next: parse_sctp
      0x29:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        shift: 2
        buf_req: 2
        next: parse_inner_ipv6
      0x04:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        load: { byte1 : 11 }
        shift: 2
        buf_req: 12
        next: parse_inner_ipv4
      0x2f:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        load: { half : 3..4, byte0 : 5 }
        shift: 2
        buf_req: 6
        next: parse_gre
      0x**:
        0..1: TH45  # egress::hdr.ipv4.dst_addr[15:0].0-15
        shift: 2
        buf_req: 2
        next: end
    parse_tcp:
      match: [ half ]
      0x01bb:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.tcp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.tcp.dst_port
        4..7: TW30  # egress::hdr.tcp.seq_no
        8..9: TH47  # egress::hdr.tcp.ack_no[31:16].16-31
        10: TB28  # egress::hdr.tcp.ack_no[15:8].8-15
        11: TB23  # egress::hdr.tcp.ack_no[7:0].0-7
        12..15: TW5
            # - bit[96..99] -> TW5 bit[31..28]: egress::hdr.tcp.data_offset
            # - bit[100..103] -> TW5 bit[27..24]: egress::hdr.tcp.res
            # - bit[104..111] -> TW5 bit[23..16]: egress::hdr.tcp.flags
            # - bit[112..127] -> TW5 bit[15..0]: egress::hdr.tcp.window
        16..17: TH32  # egress::hdr.tcp.checksum
        18: TB22  # egress::hdr.tcp.urgent_ptr[15:8].8-15
        19: TB21  # egress::hdr.tcp.urgent_ptr[7:0].0-7
        W48: 8  # value 1 -> W48 bit[3]: egress::hdr.tcp.$valid
        shift: 20
        buf_req: 20
        next: end
      0x084b:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.tcp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.tcp.dst_port
        4..7: TW30  # egress::hdr.tcp.seq_no
        8..9: TH47  # egress::hdr.tcp.ack_no[31:16].16-31
        10: TB28  # egress::hdr.tcp.ack_no[15:8].8-15
        11: TB23  # egress::hdr.tcp.ack_no[7:0].0-7
        12..15: TW5
            # - bit[96..99] -> TW5 bit[31..28]: egress::hdr.tcp.data_offset
            # - bit[100..103] -> TW5 bit[27..24]: egress::hdr.tcp.res
            # - bit[104..111] -> TW5 bit[23..16]: egress::hdr.tcp.flags
            # - bit[112..127] -> TW5 bit[15..0]: egress::hdr.tcp.window
        16..17: TH32  # egress::hdr.tcp.checksum
        18: TB22  # egress::hdr.tcp.urgent_ptr[15:8].8-15
        19: TB21  # egress::hdr.tcp.urgent_ptr[7:0].0-7
        W48: 8  # value 1 -> W48 bit[3]: egress::hdr.tcp.$valid
        load: { byte1 : 20 }
        shift: 20
        buf_req: 21
        next: parse_gtpv2
      0x****:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.tcp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.tcp.dst_port
        4..7: TW30  # egress::hdr.tcp.seq_no
        8..9: TH47  # egress::hdr.tcp.ack_no[31:16].16-31
        10: TB28  # egress::hdr.tcp.ack_no[15:8].8-15
        11: TB23  # egress::hdr.tcp.ack_no[7:0].0-7
        12..15: TW5
            # - bit[96..99] -> TW5 bit[31..28]: egress::hdr.tcp.data_offset
            # - bit[100..103] -> TW5 bit[27..24]: egress::hdr.tcp.res
            # - bit[104..111] -> TW5 bit[23..16]: egress::hdr.tcp.flags
            # - bit[112..127] -> TW5 bit[15..0]: egress::hdr.tcp.window
        16..17: TH32  # egress::hdr.tcp.checksum
        18: TB22  # egress::hdr.tcp.urgent_ptr[15:8].8-15
        19: TB21  # egress::hdr.tcp.urgent_ptr[7:0].0-7
        W48: 8  # value 1 -> W48 bit[3]: egress::hdr.tcp.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_gtpv2:
      match: [ byte1 ]
      0b***0****:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv2_8b
      0b***1****:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv2_12b
      0x**:
        buf_req: 0
        next: end
    parse_gtpv2_8b:
      match: [ byte1 ]
      0x20:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x26:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x27:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x47:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x67:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x85:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x88:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x97:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x9f:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa2:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa4:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa6:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x68:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x82:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xff:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_volte
      0x**:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_8b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_8b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_8b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_8b.message_type
        2..3: TH9  # egress::hdr.gtpv2_8b.total_len
        4..5: TH34  # egress::hdr.gtpv2_8b.seq_no[23:8].8-23
        6..7: TH33
            # - bit[48..55] -> TH33 bit[15..8]: egress::hdr.gtpv2_8b.seq_no[7:0].0-7
            # - bit[56..63] -> TH33 bit[7..0]: egress::hdr.gtpv2_8b.spare2
        W48: 16  # value 1 -> W48 bit[4]: egress::hdr.gtpv2_8b.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_gtp_base:
      match: [ half, byte0 ]
      0x01****:
        0..3: TW6
            # - bit[0..7] -> TW6 bit[31..24]: egress::hdr.imsi.type
            # - bit[8..23] -> TW6 bit[23..8]: egress::hdr.imsi.len
            # - bit[24..27] -> TW6 bit[7..4]: egress::hdr.imsi.spare
            # - bit[28..31] -> TW6 bit[3..0]: egress::hdr.imsi.instance
        4..5: TH30  # egress::hdr.imsi.num_digit[127:112].112-127
        6: TB29  # egress::hdr.imsi.num_digit[111:104].104-111
        7: TB20  # egress::hdr.imsi.num_digit[103:96].96-103
        8..11: TW29  # egress::hdr.imsi.num_digit[95:64].64-95
        12..15: TW28  # egress::hdr.imsi.num_digit[63:32].32-63
        16..19: TW21  # egress::hdr.imsi.num_digit[31:0].0-31
        W48: 32  # value 1 -> W48 bit[5]: egress::hdr.imsi.$valid
        shift: 20
        buf_req: 20
        next: end
      0x020002:
        0: TB5  # egress::hdr.cause_ie_6b.type
        1..4: TW7
            # - bit[8..23] -> TW7 bit[31..16]: egress::hdr.cause_ie_6b.len
            # - bit[24..27] -> TW7 bit[15..12]: egress::hdr.cause_ie_6b.spare1
            # - bit[28..31] -> TW7 bit[11..8]: egress::hdr.cause_ie_6b.instance
            # - bit[32..39] -> TW7 bit[7..0]: egress::hdr.cause_ie_6b.cause_value
        5: TB4
            # - bit[40..44] -> TB4 bit[7..3]: egress::hdr.cause_ie_6b.spare2
            # - bit[45] -> TB4 bit[2]: egress::hdr.cause_ie_6b.pce
            # - bit[46] -> TB4 bit[1]: egress::hdr.cause_ie_6b.bce
            # - bit[47] -> TB4 bit[0]: egress::hdr.cause_ie_6b.cs
        W48: 64  # value 1 -> W48 bit[6]: egress::hdr.cause_ie_6b.$valid
        shift: 6
        buf_req: 6
        next: parse_imsi
      0x020006:
        0: TB5  # egress::hdr.cause_ie_10b.type
        1..4: TW7
            # - bit[8..23] -> TW7 bit[31..16]: egress::hdr.cause_ie_10b.len
            # - bit[24..27] -> TW7 bit[15..12]: egress::hdr.cause_ie_10b.spare1
            # - bit[28..31] -> TW7 bit[11..8]: egress::hdr.cause_ie_10b.instance
            # - bit[32..39] -> TW7 bit[7..0]: egress::hdr.cause_ie_10b.cause_value
        5: TB4
            # - bit[40..44] -> TB4 bit[7..3]: egress::hdr.cause_ie_10b.spare2
            # - bit[45] -> TB4 bit[2]: egress::hdr.cause_ie_10b.pce
            # - bit[46] -> TB4 bit[1]: egress::hdr.cause_ie_10b.bce
            # - bit[47] -> TB4 bit[0]: egress::hdr.cause_ie_10b.cs
        6..7: TH11
            # - bit[48..55] -> TH11 bit[15..8]: egress::hdr.cause_ie_10b.type_oe
            # - bit[56..63] -> TH11 bit[7..0]: egress::hdr.cause_ie_10b.len_oe[15:8].8-15
        8..9: TH10
            # - bit[64..71] -> TH10 bit[15..8]: egress::hdr.cause_ie_10b.len_oe[7:0].0-7
            # - bit[72..75] -> TH10 bit[7..4]: egress::hdr.cause_ie_10b.spare_oe
            # - bit[76..79] -> TH10 bit[3..0]: egress::hdr.cause_ie_10b.instance_oe
        W48: 128  # value 1 -> W48 bit[7]: egress::hdr.cause_ie_10b.$valid
        shift: 10
        buf_req: 10
        next: parse_imsi
      0x******:
        buf_req: 0
        next: end
    parse_imsi:
      *:
        0..3: TW6
            # - bit[0..7] -> TW6 bit[31..24]: egress::hdr.imsi.type
            # - bit[8..23] -> TW6 bit[23..8]: egress::hdr.imsi.len
            # - bit[24..27] -> TW6 bit[7..4]: egress::hdr.imsi.spare
            # - bit[28..31] -> TW6 bit[3..0]: egress::hdr.imsi.instance
        4..5: TH30  # egress::hdr.imsi.num_digit[127:112].112-127
        6: TB29  # egress::hdr.imsi.num_digit[111:104].104-111
        7: TB20  # egress::hdr.imsi.num_digit[103:96].96-103
        8..11: TW29  # egress::hdr.imsi.num_digit[95:64].64-95
        12..15: TW28  # egress::hdr.imsi.num_digit[63:32].32-63
        16..19: TW21  # egress::hdr.imsi.num_digit[31:0].0-31
        W48: 32  # value 1 -> W48 bit[5]: egress::hdr.imsi.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_volte:
      match: [ byte1 ]
      0x4*:
        load: { byte1 : 9 }
        buf_req: 10
        next: parse_inner_ipv4
      0x6*:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv6.version
            # - bit[4..11] -> TW6 bit[27..20]: egress::hdr.inner_ipv6.traffic_class
            # - bit[12..31] -> TW6 bit[19..0]: egress::hdr.inner_ipv6.flow_label
        4..5: TH11  # egress::hdr.inner_ipv6.payload_len
        6: B19  # egress::hdr.inner_ipv6.next_hdr
        7: TB20  # egress::hdr.inner_ipv6.hop_limit
        8..11: W26  # egress::hdr.inner_ipv6.src_addr[127:96].96-127
        12..15: W25  # egress::hdr.inner_ipv6.src_addr[95:64].64-95
        16..19: W24  # egress::hdr.inner_ipv6.src_addr[63:32].32-63
        W48: 16384  # value 1 -> W48 bit[14]: egress::hdr.inner_ipv6.$valid
        load: { byte1 : 6 }
        shift: 20
        buf_req: 20
        next: parse_inner_ipv6.$split_0
      0x**:
        buf_req: 0
        next: end
    parse_inner_ipv4:
      match: [ byte1 ]
      0x06:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW6 bit[27..24]: egress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW6 bit[23..16]: egress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW6 bit[15..0]: egress::hdr.inner_ipv4.total_len
        4..5: TH30  # egress::hdr.inner_ipv4.identification
        6..7: TH11
            # - bit[48..50] -> TH11 bit[15..13]: egress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH11 bit[12..0]: egress::hdr.inner_ipv4.frag_offset
        8..11: TW21
            # - bit[64..71] -> TW21 bit[31..24]: egress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW21 bit[23..16]: egress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW21 bit[15..0]: egress::hdr.inner_ipv4.hdr_checksum
        12: TB31  # egress::hdr.inner_ipv4.src_addr[31:24].24-31
        13: TB30  # egress::hdr.inner_ipv4.src_addr[23:16].16-23
        14: TB29  # egress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB20  # egress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..19: W18  # egress::hdr.inner_ipv4.dst_addr
        W48: 256  # value 1 -> W48 bit[8]: egress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_tcp
      0x11:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW6 bit[27..24]: egress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW6 bit[23..16]: egress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW6 bit[15..0]: egress::hdr.inner_ipv4.total_len
        4..5: TH30  # egress::hdr.inner_ipv4.identification
        6..7: TH11
            # - bit[48..50] -> TH11 bit[15..13]: egress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH11 bit[12..0]: egress::hdr.inner_ipv4.frag_offset
        8..11: TW21
            # - bit[64..71] -> TW21 bit[31..24]: egress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW21 bit[23..16]: egress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW21 bit[15..0]: egress::hdr.inner_ipv4.hdr_checksum
        12: TB31  # egress::hdr.inner_ipv4.src_addr[31:24].24-31
        13: TB30  # egress::hdr.inner_ipv4.src_addr[23:16].16-23
        14: TB29  # egress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB20  # egress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..19: W18  # egress::hdr.inner_ipv4.dst_addr
        W48: 256  # value 1 -> W48 bit[8]: egress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_udp
      0x01:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW6 bit[27..24]: egress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW6 bit[23..16]: egress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW6 bit[15..0]: egress::hdr.inner_ipv4.total_len
        4..5: TH30  # egress::hdr.inner_ipv4.identification
        6..7: TH11
            # - bit[48..50] -> TH11 bit[15..13]: egress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH11 bit[12..0]: egress::hdr.inner_ipv4.frag_offset
        8..11: TW21
            # - bit[64..71] -> TW21 bit[31..24]: egress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW21 bit[23..16]: egress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW21 bit[15..0]: egress::hdr.inner_ipv4.hdr_checksum
        12: TB31  # egress::hdr.inner_ipv4.src_addr[31:24].24-31
        13: TB30  # egress::hdr.inner_ipv4.src_addr[23:16].16-23
        14: TB29  # egress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB20  # egress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..19: W18  # egress::hdr.inner_ipv4.dst_addr
        W48: 256  # value 1 -> W48 bit[8]: egress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_icmp
      0x32:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW6 bit[27..24]: egress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW6 bit[23..16]: egress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW6 bit[15..0]: egress::hdr.inner_ipv4.total_len
        4..5: TH30  # egress::hdr.inner_ipv4.identification
        6..7: TH11
            # - bit[48..50] -> TH11 bit[15..13]: egress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH11 bit[12..0]: egress::hdr.inner_ipv4.frag_offset
        8..11: TW21
            # - bit[64..71] -> TW21 bit[31..24]: egress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW21 bit[23..16]: egress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW21 bit[15..0]: egress::hdr.inner_ipv4.hdr_checksum
        12: TB31  # egress::hdr.inner_ipv4.src_addr[31:24].24-31
        13: TB30  # egress::hdr.inner_ipv4.src_addr[23:16].16-23
        14: TB29  # egress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB20  # egress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..19: W18  # egress::hdr.inner_ipv4.dst_addr
        W48: 256  # value 1 -> W48 bit[8]: egress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_inner_esp
      0x**:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv4.version
            # - bit[4..7] -> TW6 bit[27..24]: egress::hdr.inner_ipv4.ihl
            # - bit[8..15] -> TW6 bit[23..16]: egress::hdr.inner_ipv4.diffserv
            # - bit[16..31] -> TW6 bit[15..0]: egress::hdr.inner_ipv4.total_len
        4..5: TH30  # egress::hdr.inner_ipv4.identification
        6..7: TH11
            # - bit[48..50] -> TH11 bit[15..13]: egress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TH11 bit[12..0]: egress::hdr.inner_ipv4.frag_offset
        8..11: TW21
            # - bit[64..71] -> TW21 bit[31..24]: egress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW21 bit[23..16]: egress::hdr.inner_ipv4.protocol
            # - bit[80..95] -> TW21 bit[15..0]: egress::hdr.inner_ipv4.hdr_checksum
        12: TB31  # egress::hdr.inner_ipv4.src_addr[31:24].24-31
        13: TB30  # egress::hdr.inner_ipv4.src_addr[23:16].16-23
        14: TB29  # egress::hdr.inner_ipv4.src_addr[15:8].8-15
        15: TB20  # egress::hdr.inner_ipv4.src_addr[7:0].0-7
        16..19: W18  # egress::hdr.inner_ipv4.dst_addr
        W48: 256  # value 1 -> W48 bit[8]: egress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_inner_tcp:
      *:
        0..1: H25  # egress::eg_md.lkp.inner_l4_src_port
        0..3: TW28
            # - bit[0..15] -> TW28 bit[31..16]: egress::hdr.inner_tcp.src_port
            # - bit[16..31] -> TW28 bit[15..0]: egress::hdr.inner_tcp.dst_port
        2..3: H26  # egress::eg_md.lkp.inner_l4_dst_port
        4..7: W19  # egress::hdr.inner_tcp.seq_no
        8..11: W20  # egress::hdr.inner_tcp.ack_no
        12..15: TW7
            # - bit[96..99] -> TW7 bit[31..28]: egress::hdr.inner_tcp.data_offset
            # - bit[100..103] -> TW7 bit[27..24]: egress::hdr.inner_tcp.res
            # - bit[104..111] -> TW7 bit[23..16]: egress::hdr.inner_tcp.flags
            # - bit[112..127] -> TW7 bit[15..0]: egress::hdr.inner_tcp.window
        W48: 1536
            # - value 1 -> W48 bit[9]: egress::hdr.inner_tcp.$valid
            # - value 1 -> W48 bit[10]: egress::hdr.sip.$valid
        shift: 16
        buf_req: 16
        next: parse_inner_tcp.$split_0
    parse_inner_tcp.$split_0:
      *:
        0..3: TW29
            # - bit[0..15] -> TW29 bit[31..16]: egress::hdr.inner_tcp.checksum
            # - bit[16..31] -> TW29 bit[15..0]: egress::hdr.inner_tcp.urgent_ptr
        4..7: W21  # egress::hdr.sip.data
        shift: 8
        buf_req: 8
        next: end
    parse_inner_udp:
      *:
        0..1: H25  # egress::eg_md.lkp.inner_l4_src_port
        0..3: TW7
            # - bit[0..15] -> TW7 bit[31..16]: egress::hdr.inner_udp.src_port
            # - bit[16..31] -> TW7 bit[15..0]: egress::hdr.inner_udp.dst_port
        2..3: H26  # egress::eg_md.lkp.inner_l4_dst_port
        4..7: TW28
            # - bit[32..47] -> TW28 bit[31..16]: egress::hdr.inner_udp.hdr_length
            # - bit[48..63] -> TW28 bit[15..0]: egress::hdr.inner_udp.checksum
        W48: 2048  # value 1 -> W48 bit[11]: egress::hdr.inner_udp.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_inner_icmp:
      *:
        0..3: TW7
            # - bit[0..7] -> TW7 bit[31..24]: egress::hdr.inner_icmp.type_
            # - bit[8..15] -> TW7 bit[23..16]: egress::hdr.inner_icmp.code
            # - bit[16..31] -> TW7 bit[15..0]: egress::hdr.inner_icmp.hdr_checksum
        W48: 4096  # value 1 -> W48 bit[12]: egress::hdr.inner_icmp.$valid
        shift: 4
        buf_req: 4
        next: end
    parse_inner_esp:
      *:
        0..3: W22  # egress::hdr.ipsec_esp.spi
        4..7: W23  # egress::hdr.ipsec_esp.sn
        W48: 8192  # value 1 -> W48 bit[13]: egress::hdr.ipsec_esp.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_tcp
    parse_inner_ipv6.$split_0:
      *:
        0..3: W18  # egress::hdr.inner_ipv6.src_addr[31:0].0-31
        4..7: W30  # egress::hdr.inner_ipv6.dst_addr[127:96].96-127
        8..11: W29  # egress::hdr.inner_ipv6.dst_addr[95:64].64-95
        12..15: W28  # egress::hdr.inner_ipv6.dst_addr[63:32].32-63
        shift: 16
        buf_req: 16
        next: parse_inner_ipv6.$split_1
    parse_inner_ipv6.$split_1:
      match: [ byte1 ]
      0x06:
        0..3: W27  # egress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_tcp
      0x11:
        0..3: W27  # egress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_udp
      0x3a:
        0..3: W27  # egress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_icmp
      0x32:
        0..3: W27  # egress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: parse_inner_esp
      0x**:
        0..3: W27  # egress::hdr.inner_ipv6.dst_addr[31:0].0-31
        shift: 4
        buf_req: 4
        next: end
    parse_gtpv2_12b:
      match: [ byte1 ]
      0x20:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x26:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x27:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x47:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x67:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x85:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x88:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x97:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x9f:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa2:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa4:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa6:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x68:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x82:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xff:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        load: { byte1 : 12 }
        shift: 12
        buf_req: 13
        next: parse_volte
      0x**:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv2_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv2_12b.pb
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv2_12b.tf
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gtpv2_12b.spare1
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv2_12b.message_type
        2..3: TH9  # egress::hdr.gtpv2_12b.total_len
        4..7: W31  # egress::hdr.gtpv2_12b.teid
        8..9: TH34  # egress::hdr.gtpv2_12b.seq_no[23:8].8-23
        10..11: TH33
            # - bit[80..87] -> TH33 bit[15..8]: egress::hdr.gtpv2_12b.seq_no[7:0].0-7
            # - bit[88..95] -> TH33 bit[7..0]: egress::hdr.gtpv2_12b.spare2
        W48: 32768  # value 1 -> W48 bit[15]: egress::hdr.gtpv2_12b.$valid
        shift: 12
        buf_req: 12
        next: end
    parse_udp:
      match: [ half ]
      value_set EgParser_inner_2.udp_port_vxlan 1:
        handle: 506
        field_mapping:
          hdr.udp.dst_port(0..15) : half(0..15)
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.udp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.udp.dst_port
        4..5: TH32  # egress::hdr.udp.hdr_length
        6: TB23  # egress::hdr.udp.checksum[15:8].8-15
        7: TB22  # egress::hdr.udp.checksum[7:0].0-7
        W48: 65536  # value 1 -> W48 bit[16]: egress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_vxlan
      0x0868:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.udp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.udp.dst_port
        4..5: TH32  # egress::hdr.udp.hdr_length
        6: TB23  # egress::hdr.udp.checksum[15:8].8-15
        7: TB22  # egress::hdr.udp.checksum[7:0].0-7
        W48: 65536  # value 1 -> W48 bit[16]: egress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_gtpu
      0x0d3a:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.udp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.udp.dst_port
        4..5: TH32  # egress::hdr.udp.hdr_length
        6: TB23  # egress::hdr.udp.checksum[15:8].8-15
        7: TB22  # egress::hdr.udp.checksum[7:0].0-7
        W48: 65536  # value 1 -> W48 bit[16]: egress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_gtp
      0x084b:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.udp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.udp.dst_port
        4..5: TH32  # egress::hdr.udp.hdr_length
        6: TB23  # egress::hdr.udp.checksum[15:8].8-15
        7: TB22  # egress::hdr.udp.checksum[7:0].0-7
        W48: 65536  # value 1 -> W48 bit[16]: egress::hdr.udp.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_gtp_verx
      0x06a5:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.udp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.udp.dst_port
        4..5: TH32  # egress::hdr.udp.hdr_length
        6: TB23  # egress::hdr.udp.checksum[15:8].8-15
        7: TB22  # egress::hdr.udp.checksum[7:0].0-7
        W48: 65536  # value 1 -> W48 bit[16]: egress::hdr.udp.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_l2tp
      0x****:
        0..3: TW23
            # - bit[0..15] -> TW23 bit[31..16]: egress::hdr.udp.src_port
            # - bit[16..31] -> TW23 bit[15..0]: egress::hdr.udp.dst_port
        4..5: TH32  # egress::hdr.udp.hdr_length
        6: TB23  # egress::hdr.udp.checksum[15:8].8-15
        7: TB22  # egress::hdr.udp.checksum[7:0].0-7
        W48: 65536  # value 1 -> W48 bit[16]: egress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_vxlan:
      *:
        0..3: TW5
            # - bit[0..7] -> TW5 bit[31..24]: egress::hdr.vxlan.flags
            # - bit[8..31] -> TW5 bit[23..0]: egress::hdr.vxlan.reserved
        4..5: TH9  # egress::hdr.vxlan.vni[23:8].8-23
        6..7: TH8
            # - bit[48..55] -> TH8 bit[15..8]: egress::hdr.vxlan.vni[7:0].0-7
            # - bit[56..63] -> TH8 bit[7..0]: egress::hdr.vxlan.reserved2
        8..11: TW30  # egress::hdr.inner_ethernet.dst_addr[47:16].16-47
        12: TB5  # egress::hdr.inner_ethernet.dst_addr[15:8].8-15
        13: TB4  # egress::hdr.inner_ethernet.dst_addr[7:0].0-7
        14..15: TH47  # egress::hdr.inner_ethernet.src_addr[47:32].32-47
        16..17: TH34  # egress::hdr.inner_ethernet.src_addr[31:16].16-31
        W48: 393216
            # - value 1 -> W48 bit[17]: egress::hdr.vxlan.$valid
            # - value 1 -> W48 bit[18]: egress::hdr.inner_ethernet.$valid
        load: { half : 20..21 }
        shift: 18
        buf_req: 22
        next: parse_vxlan.$split_0
    parse_vxlan.$split_0:
      match: [ half ]
      0x0800:
        0..1: TH33  # egress::hdr.inner_ethernet.src_addr[15:0].0-15
        2..3: TH10  # egress::hdr.inner_ethernet.ether_type
        load: { byte1 : 13 }
        shift: 4
        buf_req: 14
        next: parse_inner_ipv4
      0x86dd:
        0..1: TH33  # egress::hdr.inner_ethernet.src_addr[15:0].0-15
        2..3: TH10  # egress::hdr.inner_ethernet.ether_type
        shift: 4
        buf_req: 4
        next: parse_inner_ipv6
      0x****:
        0..1: TH33  # egress::hdr.inner_ethernet.src_addr[15:0].0-15
        2..3: TH10  # egress::hdr.inner_ethernet.ether_type
        shift: 4
        buf_req: 4
        next: end
    parse_inner_ipv6:
      *:
        0..3: TW6
            # - bit[0..3] -> TW6 bit[31..28]: egress::hdr.inner_ipv6.version
            # - bit[4..11] -> TW6 bit[27..20]: egress::hdr.inner_ipv6.traffic_class
            # - bit[12..31] -> TW6 bit[19..0]: egress::hdr.inner_ipv6.flow_label
        4..5: TH11  # egress::hdr.inner_ipv6.payload_len
        6: B19  # egress::hdr.inner_ipv6.next_hdr
        7: TB20  # egress::hdr.inner_ipv6.hop_limit
        8..11: W26  # egress::hdr.inner_ipv6.src_addr[127:96].96-127
        12..15: W25  # egress::hdr.inner_ipv6.src_addr[95:64].64-95
        16..19: W24  # egress::hdr.inner_ipv6.src_addr[63:32].32-63
        W48: 16384  # value 1 -> W48 bit[14]: egress::hdr.inner_ipv6.$valid
        load: { byte1 : 6 }
        shift: 20
        buf_req: 20
        next: parse_inner_ipv6.$split_0
    parse_gtpu:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv1
    parse_gtpv1:
      match: [ byte1 ]
      0b*****000:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv1_8b
      0b*****0*1:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv1_12b
      0b*****01*:
        load: { byte1 : 1 }
        buf_req: 2
        next: parse_gtpv1_12b
      0x**:
        buf_req: 0
        next: end
    parse_gtpv1_8b:
      match: [ byte1 ]
      0x20:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x26:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x27:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x47:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x67:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x85:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x88:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x97:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x9f:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa2:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa4:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xa6:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x68:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0x82:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { half : 8..9, byte0 : 10 }
        shift: 8
        buf_req: 11
        next: parse_gtp_base
      0xff:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        load: { byte1 : 8 }
        shift: 8
        buf_req: 9
        next: parse_volte
      0x**:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_8b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_8b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_8b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_8b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_8b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_8b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_8b.message_type
        2..3: TH9  # egress::hdr.gtpv1_8b.message_len
        4..7: TW5  # egress::hdr.gtpv1_8b.teid
        W48: 524288  # value 1 -> W48 bit[19]: egress::hdr.gtpv1_8b.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_gtpv1_12b:
      match: [ byte1 ]
      0x20:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x26:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x27:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x47:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x67:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x85:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x88:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x97:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x9f:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa2:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa4:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xa6:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x68:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0x82:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { half : 12..13, byte0 : 14 }
        shift: 12
        buf_req: 15
        next: parse_gtp_base
      0xff:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        load: { byte1 : 12 }
        shift: 12
        buf_req: 13
        next: parse_volte
      0x**:
        0..1: TH8
            # - bit[0..2] -> TH8 bit[15..13]: egress::hdr.gtpv1_12b.version
            # - bit[3] -> TH8 bit[12]: egress::hdr.gtpv1_12b.pt
            # - bit[4] -> TH8 bit[11]: egress::hdr.gtpv1_12b.reserved
            # - bit[5] -> TH8 bit[10]: egress::hdr.gtpv1_12b.e
            # - bit[6] -> TH8 bit[9]: egress::hdr.gtpv1_12b.s
            # - bit[7] -> TH8 bit[8]: egress::hdr.gtpv1_12b.pn
            # - bit[8..15] -> TH8 bit[7..0]: egress::hdr.gtpv1_12b.message_type
        2..3: TH9  # egress::hdr.gtpv1_12b.message_len
        4..7: TW30  # egress::hdr.gtpv1_12b.teid
        8..11: TW5
            # - bit[64..79] -> TW5 bit[31..16]: egress::hdr.gtpv1_12b.seq_no
            # - bit[80..87] -> TW5 bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no
            # - bit[88..95] -> TW5 bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t
        W48: 1048576  # value 1 -> W48 bit[20]: egress::hdr.gtpv1_12b.$valid
        shift: 12
        buf_req: 12
        next: end
    parse_gtp:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv1
    parse_gtp_verx:
      match: [ byte1 ]
      0b001*****:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv1
      0b010*****:
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_gtpv2
      0x**:
        buf_req: 0
        next: end
    parse_l2tp:
      match: [ byte1 ]
      0b0*******:
        0..3: TW5
            # - bit[0..11] -> TW5 bit[31..20]: egress::hdr.l2tp.TLxxSxOP
            # - bit[12..15] -> TW5 bit[19..16]: egress::hdr.l2tp.version
            # - bit[16..23] -> TW5 bit[15..8]: egress::hdr.l2tp.l2tp_length
            # - bit[24..31] -> TW5 bit[7..0]: egress::hdr.l2tp.tunnel_id[15:8].8-15
        4: TB4  # egress::hdr.l2tp.tunnel_id[7:0].0-7
        5..6: TH34  # egress::hdr.l2tp.session_id
        7..8: TH33  # egress::hdr.l2tp.Ns
        9..10: TH8  # egress::hdr.l2tp.Nr
        11: TB21  # egress::hdr.l2tp.offset_size
        12: TB5  # egress::hdr.l2tp.offset_pad
        W48: 2097152  # value 1 -> W48 bit[21]: egress::hdr.l2tp.$valid
        load: { half : 19..20, byte0 : 21 }
        shift: 13
        buf_req: 22
        next: parse_pppoe
      0x**:
        0..3: TW5
            # - bit[0..11] -> TW5 bit[31..20]: egress::hdr.l2tp.TLxxSxOP
            # - bit[12..15] -> TW5 bit[19..16]: egress::hdr.l2tp.version
            # - bit[16..23] -> TW5 bit[15..8]: egress::hdr.l2tp.l2tp_length
            # - bit[24..31] -> TW5 bit[7..0]: egress::hdr.l2tp.tunnel_id[15:8].8-15
        4: TB4  # egress::hdr.l2tp.tunnel_id[7:0].0-7
        5..6: TH34  # egress::hdr.l2tp.session_id
        7..8: TH33  # egress::hdr.l2tp.Ns
        9..10: TH8  # egress::hdr.l2tp.Nr
        11: TB21  # egress::hdr.l2tp.offset_size
        12: TB5  # egress::hdr.l2tp.offset_pad
        W48: 2097152  # value 1 -> W48 bit[21]: egress::hdr.l2tp.$valid
        shift: 13
        buf_req: 13
        next: end
    parse_pppoe:
      match: [ half, byte0 ]
      0x00214*:
        0..1: TH9
            # - bit[0..3] -> TH9 bit[15..12]: egress::hdr.pppoe.version
            # - bit[4..7] -> TH9 bit[11..8]: egress::hdr.pppoe.type
            # - bit[8..15] -> TH9 bit[7..0]: egress::hdr.pppoe.code
        2..3: TH10  # egress::hdr.pppoe.session_id
        4..7: TW30
            # - bit[32..47] -> TW30 bit[31..16]: egress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW30 bit[15..0]: egress::hdr.pppoe.ppp_proto
        W48: 4194304  # value 1 -> W48 bit[22]: egress::hdr.pppoe.$valid
        load: { byte1 : 17 }
        shift: 8
        buf_req: 18
        next: parse_inner_ipv4
      0x00216*:
        0..1: TH9
            # - bit[0..3] -> TH9 bit[15..12]: egress::hdr.pppoe.version
            # - bit[4..7] -> TH9 bit[11..8]: egress::hdr.pppoe.type
            # - bit[8..15] -> TH9 bit[7..0]: egress::hdr.pppoe.code
        2..3: TH10  # egress::hdr.pppoe.session_id
        4..7: TW30
            # - bit[32..47] -> TW30 bit[31..16]: egress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW30 bit[15..0]: egress::hdr.pppoe.ppp_proto
        W48: 4194304  # value 1 -> W48 bit[22]: egress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_ipv6
      0x******:
        0..1: TH9
            # - bit[0..3] -> TH9 bit[15..12]: egress::hdr.pppoe.version
            # - bit[4..7] -> TH9 bit[11..8]: egress::hdr.pppoe.type
            # - bit[8..15] -> TH9 bit[7..0]: egress::hdr.pppoe.code
        2..3: TH10  # egress::hdr.pppoe.session_id
        4..7: TW30
            # - bit[32..47] -> TW30 bit[31..16]: egress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW30 bit[15..0]: egress::hdr.pppoe.ppp_proto
        W48: 4194304  # value 1 -> W48 bit[22]: egress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_icmp:
      *:
        0..3: TW5
            # - bit[0..7] -> TW5 bit[31..24]: egress::hdr.icmp.type_
            # - bit[8..15] -> TW5 bit[23..16]: egress::hdr.icmp.code
            # - bit[16..31] -> TW5 bit[15..0]: egress::hdr.icmp.hdr_checksum
        W48: 8388608  # value 1 -> W48 bit[23]: egress::hdr.icmp.$valid
        shift: 4
        buf_req: 4
        next: end
    parse_sctp:
      match: [ half ]
      0x8e3c:
        0..3: TW5
            # - bit[0..15] -> TW5 bit[31..16]: egress::hdr.sctp.src_port
            # - bit[16..31] -> TW5 bit[15..0]: egress::hdr.sctp.dst_port
        4..7: TW6  # egress::hdr.sctp.verifTag
        8..9: TH8  # egress::hdr.sctp.checksum
        W48: 16777216  # value 1 -> W48 bit[24]: egress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x960c:
        0..3: TW5
            # - bit[0..15] -> TW5 bit[31..16]: egress::hdr.sctp.src_port
            # - bit[16..31] -> TW5 bit[15..0]: egress::hdr.sctp.dst_port
        4..7: TW6  # egress::hdr.sctp.verifTag
        8..9: TH8  # egress::hdr.sctp.checksum
        W48: 16777216  # value 1 -> W48 bit[24]: egress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x0f1c:
        0..3: TW5
            # - bit[0..15] -> TW5 bit[31..16]: egress::hdr.sctp.src_port
            # - bit[16..31] -> TW5 bit[15..0]: egress::hdr.sctp.dst_port
        4..7: TW6  # egress::hdr.sctp.verifTag
        8..9: TH8  # egress::hdr.sctp.checksum
        W48: 16777216  # value 1 -> W48 bit[24]: egress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x71be:
        0..3: TW5
            # - bit[0..15] -> TW5 bit[31..16]: egress::hdr.sctp.src_port
            # - bit[16..31] -> TW5 bit[15..0]: egress::hdr.sctp.dst_port
        4..7: TW6  # egress::hdr.sctp.verifTag
        8..9: TH8  # egress::hdr.sctp.checksum
        W48: 16777216  # value 1 -> W48 bit[24]: egress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
      0x****:
        0..3: TW5
            # - bit[0..15] -> TW5 bit[31..16]: egress::hdr.sctp.src_port
            # - bit[16..31] -> TW5 bit[15..0]: egress::hdr.sctp.dst_port
        4..7: TW6  # egress::hdr.sctp.verifTag
        8..9: TH8  # egress::hdr.sctp.checksum
        W48: 16777216  # value 1 -> W48 bit[24]: egress::hdr.sctp.$valid
        shift: 10
        buf_req: 10
        next: end
    parse_gre:
      match: [ half, byte0 ]
      0b*****0011000100000001011:
        0..1: TH8
            # - bit[0] -> TH8 bit[15]: egress::hdr.gre.C
            # - bit[1] -> TH8 bit[14]: egress::hdr.gre.R
            # - bit[2] -> TH8 bit[13]: egress::hdr.gre.K
            # - bit[3] -> TH8 bit[12]: egress::hdr.gre.S
            # - bit[4] -> TH8 bit[11]: egress::hdr.gre.s
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gre.recurse
            # - bit[8..12] -> TH8 bit[7..3]: egress::hdr.gre.flags
            # - bit[13..15] -> TH8 bit[2..0]: egress::hdr.gre.version
        2: TB5  # egress::hdr.gre.proto[15:8].8-15
        3: TB4  # egress::hdr.gre.proto[7:0].0-7
        W48: 33554432  # value 1 -> W48 bit[25]: egress::hdr.gre.$valid
        load: { half : 10..11, byte0 : 12 }
        shift: 4
        buf_req: 13
        next: parse_pptp
      0b*****0000000100000000000:
        0..1: TH8
            # - bit[0] -> TH8 bit[15]: egress::hdr.gre.C
            # - bit[1] -> TH8 bit[14]: egress::hdr.gre.R
            # - bit[2] -> TH8 bit[13]: egress::hdr.gre.K
            # - bit[3] -> TH8 bit[12]: egress::hdr.gre.S
            # - bit[4] -> TH8 bit[11]: egress::hdr.gre.s
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gre.recurse
            # - bit[8..12] -> TH8 bit[7..3]: egress::hdr.gre.flags
            # - bit[13..15] -> TH8 bit[2..0]: egress::hdr.gre.version
        2: TB5  # egress::hdr.gre.proto[15:8].8-15
        3: TB4  # egress::hdr.gre.proto[7:0].0-7
        W48: 33554432  # value 1 -> W48 bit[25]: egress::hdr.gre.$valid
        shift: 4
        buf_req: 4
        next: parse_gre_ipv4
      0b*****0001000011011011101:
        0..1: TH8
            # - bit[0] -> TH8 bit[15]: egress::hdr.gre.C
            # - bit[1] -> TH8 bit[14]: egress::hdr.gre.R
            # - bit[2] -> TH8 bit[13]: egress::hdr.gre.K
            # - bit[3] -> TH8 bit[12]: egress::hdr.gre.S
            # - bit[4] -> TH8 bit[11]: egress::hdr.gre.s
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gre.recurse
            # - bit[8..12] -> TH8 bit[7..3]: egress::hdr.gre.flags
            # - bit[13..15] -> TH8 bit[2..0]: egress::hdr.gre.version
        2: TB5  # egress::hdr.gre.proto[15:8].8-15
        3: TB4  # egress::hdr.gre.proto[7:0].0-7
        W48: 33554432  # value 1 -> W48 bit[25]: egress::hdr.gre.$valid
        shift: 4
        buf_req: 4
        next: parse_inner_ipv6
      0x******:
        0..1: TH8
            # - bit[0] -> TH8 bit[15]: egress::hdr.gre.C
            # - bit[1] -> TH8 bit[14]: egress::hdr.gre.R
            # - bit[2] -> TH8 bit[13]: egress::hdr.gre.K
            # - bit[3] -> TH8 bit[12]: egress::hdr.gre.S
            # - bit[4] -> TH8 bit[11]: egress::hdr.gre.s
            # - bit[5..7] -> TH8 bit[10..8]: egress::hdr.gre.recurse
            # - bit[8..12] -> TH8 bit[7..3]: egress::hdr.gre.flags
            # - bit[13..15] -> TH8 bit[2..0]: egress::hdr.gre.version
        2: TB5  # egress::hdr.gre.proto[15:8].8-15
        3: TB4  # egress::hdr.gre.proto[7:0].0-7
        W48: 33554432  # value 1 -> W48 bit[25]: egress::hdr.gre.$valid
        shift: 4
        buf_req: 4
        next: end
    parse_pptp:
      match: [ half, byte0 ]
      0x00214*:
        0..1: TH9
            # - bit[0..3] -> TH9 bit[15..12]: egress::hdr.pppoe.version
            # - bit[4..7] -> TH9 bit[11..8]: egress::hdr.pppoe.type
            # - bit[8..15] -> TH9 bit[7..0]: egress::hdr.pppoe.code
        2..3: TH10  # egress::hdr.pppoe.session_id
        4..7: TW30
            # - bit[32..47] -> TW30 bit[31..16]: egress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW30 bit[15..0]: egress::hdr.pppoe.ppp_proto
        W48: 4194304  # value 1 -> W48 bit[22]: egress::hdr.pppoe.$valid
        load: { byte1 : 17 }
        shift: 8
        buf_req: 18
        next: parse_inner_ipv4
      0x00216*:
        0..1: TH9
            # - bit[0..3] -> TH9 bit[15..12]: egress::hdr.pppoe.version
            # - bit[4..7] -> TH9 bit[11..8]: egress::hdr.pppoe.type
            # - bit[8..15] -> TH9 bit[7..0]: egress::hdr.pppoe.code
        2..3: TH10  # egress::hdr.pppoe.session_id
        4..7: TW30
            # - bit[32..47] -> TW30 bit[31..16]: egress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW30 bit[15..0]: egress::hdr.pppoe.ppp_proto
        W48: 4194304  # value 1 -> W48 bit[22]: egress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: parse_inner_ipv6
      0x******:
        0..1: TH9
            # - bit[0..3] -> TH9 bit[15..12]: egress::hdr.pppoe.version
            # - bit[4..7] -> TH9 bit[11..8]: egress::hdr.pppoe.type
            # - bit[8..15] -> TH9 bit[7..0]: egress::hdr.pppoe.code
        2..3: TH10  # egress::hdr.pppoe.session_id
        4..7: TW30
            # - bit[32..47] -> TW30 bit[31..16]: egress::hdr.pppoe.pppoe_length
            # - bit[48..63] -> TW30 bit[15..0]: egress::hdr.pppoe.ppp_proto
        W48: 4194304  # value 1 -> W48 bit[22]: egress::hdr.pppoe.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_gre_ipv4:
      *:
        load: { byte1 : 9 }
        buf_req: 10
        next: parse_inner_ipv4
    parse_ipv6:
      *:
        0..3: TW4
            # - bit[0..3] -> TW4 bit[31..28]: egress::hdr.ipv6.version
            # - bit[4..11] -> TW4 bit[27..20]: egress::hdr.ipv6.traffic_class
            # - bit[12..31] -> TW4 bit[19..0]: egress::hdr.ipv6.flow_label
        4..7: TW20
            # - bit[32..47] -> TW20 bit[31..16]: egress::hdr.ipv6.payload_len
            # - bit[48..55] -> TW20 bit[15..8]: egress::hdr.ipv6.next_hdr
            # - bit[56..63] -> TW20 bit[7..0]: egress::hdr.ipv6.hop_limit
        8..9: H22  # egress::hdr.ipv6.src_addr[127:112].112-127
        10..11: TH46  # egress::hdr.ipv6.src_addr[111:96].96-111
        12..15: TW22  # egress::hdr.ipv6.src_addr[95:64].64-95
        16..17: TH45  # egress::hdr.ipv6.src_addr[63:48].48-63
        18..19: TH44  # egress::hdr.ipv6.src_addr[47:32].32-47
        24..27: W47  # egress::hdr.ipv6.dst_addr[127:96].96-127
        W48: 67108864  # value 1 -> W48 bit[26]: egress::hdr.ipv6.$valid
        load: { byte1 : 6 }
        shift: 20
        buf_req: 28
        next: parse_ipv6.$split_0
    parse_ipv6.$split_0:
      match: [ byte1 ]
      0x06:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        load: { half : 22..23 }
        shift: 20
        buf_req: 24
        next: parse_tcp
      0x11:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        load: { half : 22..23 }
        shift: 20
        buf_req: 24
        next: parse_udp
      0x3a:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        shift: 20
        buf_req: 20
        next: parse_icmp
      0x84:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        load: { half : 22..23 }
        shift: 20
        buf_req: 24
        next: parse_sctp
      0x29:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        shift: 20
        buf_req: 20
        next: parse_inner_ipv6
      0x04:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        load: { byte1 : 29 }
        shift: 20
        buf_req: 30
        next: parse_inner_ipv4
      0x2f:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        load: { half : 21..22, byte0 : 23 }
        shift: 20
        buf_req: 24
        next: parse_gre
      0x**:
        0..1: TH43  # egress::hdr.ipv6.src_addr[31:16].16-31
        2..3: TH31  # egress::hdr.ipv6.src_addr[15:0].0-15
        8..11: W46  # egress::hdr.ipv6.dst_addr[95:64].64-95
        12..15: W45  # egress::hdr.ipv6.dst_addr[63:32].32-63
        16..19: W44  # egress::hdr.ipv6.dst_addr[31:0].0-31
        shift: 20
        buf_req: 20
        next: end
    parse_vlan:
      match: [ half ]
      0x0800:
        0..1: H21
            # - bit[0..2] -> H21 bit[15..13]: egress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H21 bit[12]: egress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H21 bit[11..0]: egress::hdr.vlan_tag[0].vid
        2: TB7  # egress::hdr.vlan_tag[0].ether_type[15:8].8-15
        3: TB6  # egress::hdr.vlan_tag[0].ether_type[7:0].0-7
        B16: 16  # value 16 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..1: H21
            # - bit[0..2] -> H21 bit[15..13]: egress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H21 bit[12]: egress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H21 bit[11..0]: egress::hdr.vlan_tag[0].vid
        2: TB7  # egress::hdr.vlan_tag[0].ether_type[15:8].8-15
        3: TB6  # egress::hdr.vlan_tag[0].ether_type[7:0].0-7
        B16: 16  # value 16 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..1: H21
            # - bit[0..2] -> H21 bit[15..13]: egress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H21 bit[12]: egress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H21 bit[11..0]: egress::hdr.vlan_tag[0].vid
        2: TB7  # egress::hdr.vlan_tag[0].ether_type[15:8].8-15
        3: TB6  # egress::hdr.vlan_tag[0].ether_type[7:0].0-7
        B16: 16  # value 16 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it1
      0x8847:
        0..1: H21
            # - bit[0..2] -> H21 bit[15..13]: egress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H21 bit[12]: egress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H21 bit[11..0]: egress::hdr.vlan_tag[0].vid
        2: TB7  # egress::hdr.vlan_tag[0].ether_type[15:8].8-15
        3: TB6  # egress::hdr.vlan_tag[0].ether_type[7:0].0-7
        B16: 16  # value 16 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..1: H21
            # - bit[0..2] -> H21 bit[15..13]: egress::hdr.vlan_tag[0].pcp
            # - bit[3] -> H21 bit[12]: egress::hdr.vlan_tag[0].cfi
            # - bit[4..15] -> H21 bit[11..0]: egress::hdr.vlan_tag[0].vid
        2: TB7  # egress::hdr.vlan_tag[0].ether_type[15:8].8-15
        3: TB6  # egress::hdr.vlan_tag[0].ether_type[7:0].0-7
        B16: 16  # value 16 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it1:
      match: [ half ]
      0x0800:
        0..3: TW12
            # - bit[0..2] -> TW12 bit[31..29]: egress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TW12 bit[28]: egress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TW12 bit[27..16]: egress::hdr.vlan_tag[1].vid
            # - bit[16..31] -> TW12 bit[15..0]: egress::hdr.vlan_tag[1].ether_type
        B16: 8  # value 8 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW12
            # - bit[0..2] -> TW12 bit[31..29]: egress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TW12 bit[28]: egress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TW12 bit[27..16]: egress::hdr.vlan_tag[1].vid
            # - bit[16..31] -> TW12 bit[15..0]: egress::hdr.vlan_tag[1].ether_type
        B16: 8  # value 8 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW12
            # - bit[0..2] -> TW12 bit[31..29]: egress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TW12 bit[28]: egress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TW12 bit[27..16]: egress::hdr.vlan_tag[1].vid
            # - bit[16..31] -> TW12 bit[15..0]: egress::hdr.vlan_tag[1].ether_type
        B16: 8  # value 8 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it2
      0x8847:
        0..3: TW12
            # - bit[0..2] -> TW12 bit[31..29]: egress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TW12 bit[28]: egress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TW12 bit[27..16]: egress::hdr.vlan_tag[1].vid
            # - bit[16..31] -> TW12 bit[15..0]: egress::hdr.vlan_tag[1].ether_type
        B16: 8  # value 8 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW12
            # - bit[0..2] -> TW12 bit[31..29]: egress::hdr.vlan_tag[1].pcp
            # - bit[3] -> TW12 bit[28]: egress::hdr.vlan_tag[1].cfi
            # - bit[4..15] -> TW12 bit[27..16]: egress::hdr.vlan_tag[1].vid
            # - bit[16..31] -> TW12 bit[15..0]: egress::hdr.vlan_tag[1].ether_type
        B16: 8  # value 8 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it2:
      match: [ half ]
      0x0800:
        0..3: TW13
            # - bit[0..2] -> TW13 bit[31..29]: egress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW13 bit[28]: egress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW13 bit[27..16]: egress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW13 bit[15..0]: egress::hdr.vlan_tag[2].ether_type
        B16: 4  # value 4 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW13
            # - bit[0..2] -> TW13 bit[31..29]: egress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW13 bit[28]: egress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW13 bit[27..16]: egress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW13 bit[15..0]: egress::hdr.vlan_tag[2].ether_type
        B16: 4  # value 4 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW13
            # - bit[0..2] -> TW13 bit[31..29]: egress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW13 bit[28]: egress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW13 bit[27..16]: egress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW13 bit[15..0]: egress::hdr.vlan_tag[2].ether_type
        B16: 4  # value 4 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it3
      0x8847:
        0..3: TW13
            # - bit[0..2] -> TW13 bit[31..29]: egress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW13 bit[28]: egress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW13 bit[27..16]: egress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW13 bit[15..0]: egress::hdr.vlan_tag[2].ether_type
        B16: 4  # value 4 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW13
            # - bit[0..2] -> TW13 bit[31..29]: egress::hdr.vlan_tag[2].pcp
            # - bit[3] -> TW13 bit[28]: egress::hdr.vlan_tag[2].cfi
            # - bit[4..15] -> TW13 bit[27..16]: egress::hdr.vlan_tag[2].vid
            # - bit[16..31] -> TW13 bit[15..0]: egress::hdr.vlan_tag[2].ether_type
        B16: 4  # value 4 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it3:
      match: [ half ]
      0x0800:
        0..3: TW14
            # - bit[0..2] -> TW14 bit[31..29]: egress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW14 bit[28]: egress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW14 bit[27..16]: egress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW14 bit[15..0]: egress::hdr.vlan_tag[3].ether_type
        B16: 2  # value 2 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW14
            # - bit[0..2] -> TW14 bit[31..29]: egress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW14 bit[28]: egress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW14 bit[27..16]: egress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW14 bit[15..0]: egress::hdr.vlan_tag[3].ether_type
        B16: 2  # value 2 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW14
            # - bit[0..2] -> TW14 bit[31..29]: egress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW14 bit[28]: egress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW14 bit[27..16]: egress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW14 bit[15..0]: egress::hdr.vlan_tag[3].ether_type
        B16: 2  # value 2 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { half : 6..7 }
        shift: 4
        buf_req: 8
        next: parse_vlan.$it4
      0x8847:
        0..3: TW14
            # - bit[0..2] -> TW14 bit[31..29]: egress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW14 bit[28]: egress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW14 bit[27..16]: egress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW14 bit[15..0]: egress::hdr.vlan_tag[3].ether_type
        B16: 2  # value 2 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW14
            # - bit[0..2] -> TW14 bit[31..29]: egress::hdr.vlan_tag[3].pcp
            # - bit[3] -> TW14 bit[28]: egress::hdr.vlan_tag[3].cfi
            # - bit[4..15] -> TW14 bit[27..16]: egress::hdr.vlan_tag[3].vid
            # - bit[16..31] -> TW14 bit[15..0]: egress::hdr.vlan_tag[3].ether_type
        B16: 2  # value 2 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_vlan.$it4:
      match: [ half ]
      0x0800:
        0..3: TW15
            # - bit[0..2] -> TW15 bit[31..29]: egress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW15 bit[28]: egress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW15 bit[27..16]: egress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW15 bit[15..0]: egress::hdr.vlan_tag[4].ether_type
        B16: 1  # value 1 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv4
      0x86dd:
        0..3: TW15
            # - bit[0..2] -> TW15 bit[31..29]: egress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW15 bit[28]: egress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW15 bit[27..16]: egress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW15 bit[15..0]: egress::hdr.vlan_tag[4].ether_type
        B16: 1  # value 1 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_ipv6
      0x8100:
        0..3: TW15
            # - bit[0..2] -> TW15 bit[31..29]: egress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW15 bit[28]: egress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW15 bit[27..16]: egress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW15 bit[15..0]: egress::hdr.vlan_tag[4].ether_type
        B16: 1  # value 1 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
      0x8847:
        0..3: TW15
            # - bit[0..2] -> TW15 bit[31..29]: egress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW15 bit[28]: egress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW15 bit[27..16]: egress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW15 bit[15..0]: egress::hdr.vlan_tag[4].ether_type
        B16: 1  # value 1 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls
      0x****:
        0..3: TW15
            # - bit[0..2] -> TW15 bit[31..29]: egress::hdr.vlan_tag[4].pcp
            # - bit[3] -> TW15 bit[28]: egress::hdr.vlan_tag[4].cfi
            # - bit[4..15] -> TW15 bit[27..16]: egress::hdr.vlan_tag[4].vid
            # - bit[16..31] -> TW15 bit[15..0]: egress::hdr.vlan_tag[4].ether_type
        B16: 1  # value 1 -> B16 bit[4..0]: egress::hdr.vlan_tag.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls:
      match: [ byte1 ]
      0b*******0:
        0..1: TH19  # egress::hdr.mpls[0].label[19:4].4-19
        2..3: TH18
            # - bit[16..19] -> TH18 bit[15..12]: egress::hdr.mpls[0].label[3:0].0-3
            # - bit[20..22] -> TH18 bit[11..9]: egress::hdr.mpls[0].exp
            # - bit[23] -> TH18 bit[8]: egress::hdr.mpls[0].bos
            # - bit[24..31] -> TH18 bit[7..0]: egress::hdr.mpls[0].ttl
        B17: 8  # value 8 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls.$it1
      0b*******1:
        0..1: TH19  # egress::hdr.mpls[0].label[19:4].4-19
        2..3: TH18
            # - bit[16..19] -> TH18 bit[15..12]: egress::hdr.mpls[0].label[3:0].0-3
            # - bit[20..22] -> TH18 bit[11..9]: egress::hdr.mpls[0].exp
            # - bit[23] -> TH18 bit[8]: egress::hdr.mpls[0].bos
            # - bit[24..31] -> TH18 bit[7..0]: egress::hdr.mpls[0].ttl
        B17: 8  # value 8 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..1: TH19  # egress::hdr.mpls[0].label[19:4].4-19
        2..3: TH18
            # - bit[16..19] -> TH18 bit[15..12]: egress::hdr.mpls[0].label[3:0].0-3
            # - bit[20..22] -> TH18 bit[11..9]: egress::hdr.mpls[0].exp
            # - bit[23] -> TH18 bit[8]: egress::hdr.mpls[0].bos
            # - bit[24..31] -> TH18 bit[7..0]: egress::hdr.mpls[0].ttl
        B17: 8  # value 8 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls.$it1:
      match: [ byte1 ]
      0b*******0:
        0..1: TH21  # egress::hdr.mpls[1].label[19:4].4-19
        2..3: TH20
            # - bit[16..19] -> TH20 bit[15..12]: egress::hdr.mpls[1].label[3:0].0-3
            # - bit[20..22] -> TH20 bit[11..9]: egress::hdr.mpls[1].exp
            # - bit[23] -> TH20 bit[8]: egress::hdr.mpls[1].bos
            # - bit[24..31] -> TH20 bit[7..0]: egress::hdr.mpls[1].ttl
        B17: 4  # value 4 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        load: { byte1 : 6 }
        shift: 4
        buf_req: 7
        next: parse_mpls.$it2
      0b*******1:
        0..1: TH21  # egress::hdr.mpls[1].label[19:4].4-19
        2..3: TH20
            # - bit[16..19] -> TH20 bit[15..12]: egress::hdr.mpls[1].label[3:0].0-3
            # - bit[20..22] -> TH20 bit[11..9]: egress::hdr.mpls[1].exp
            # - bit[23] -> TH20 bit[8]: egress::hdr.mpls[1].bos
            # - bit[24..31] -> TH20 bit[7..0]: egress::hdr.mpls[1].ttl
        B17: 4  # value 4 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..1: TH21  # egress::hdr.mpls[1].label[19:4].4-19
        2..3: TH20
            # - bit[16..19] -> TH20 bit[15..12]: egress::hdr.mpls[1].label[3:0].0-3
            # - bit[20..22] -> TH20 bit[11..9]: egress::hdr.mpls[1].exp
            # - bit[23] -> TH20 bit[8]: egress::hdr.mpls[1].bos
            # - bit[24..31] -> TH20 bit[7..0]: egress::hdr.mpls[1].ttl
        B17: 4  # value 4 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls.$it2:
      match: [ byte1 ]
      0b*******0:
        0..1: TH23  # egress::hdr.mpls[2].label[19:4].4-19
        2..3: TH22
            # - bit[16..19] -> TH22 bit[15..12]: egress::hdr.mpls[2].label[3:0].0-3
            # - bit[20..22] -> TH22 bit[11..9]: egress::hdr.mpls[2].exp
            # - bit[23] -> TH22 bit[8]: egress::hdr.mpls[2].bos
            # - bit[24..31] -> TH22 bit[7..0]: egress::hdr.mpls[2].ttl
        B17: 2  # value 2 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: parse_mpls.$it3
      0b*******1:
        0..1: TH23  # egress::hdr.mpls[2].label[19:4].4-19
        2..3: TH22
            # - bit[16..19] -> TH22 bit[15..12]: egress::hdr.mpls[2].label[3:0].0-3
            # - bit[20..22] -> TH22 bit[11..9]: egress::hdr.mpls[2].exp
            # - bit[23] -> TH22 bit[8]: egress::hdr.mpls[2].bos
            # - bit[24..31] -> TH22 bit[7..0]: egress::hdr.mpls[2].ttl
        B17: 2  # value 2 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        load: { byte1 : 4 }
        shift: 4
        buf_req: 5
        next: parse_mpls_bos
      0x**:
        0..1: TH23  # egress::hdr.mpls[2].label[19:4].4-19
        2..3: TH22
            # - bit[16..19] -> TH22 bit[15..12]: egress::hdr.mpls[2].label[3:0].0-3
            # - bit[20..22] -> TH22 bit[11..9]: egress::hdr.mpls[2].exp
            # - bit[23] -> TH22 bit[8]: egress::hdr.mpls[2].bos
            # - bit[24..31] -> TH22 bit[7..0]: egress::hdr.mpls[2].ttl
        B17: 2  # value 2 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        shift: 4
        buf_req: 4
        next: end
    parse_mpls.$it3:
      *:
        0: TB15  # egress::hdr.mpls[3].label[19:12].12-19
        1: TB14  # egress::hdr.mpls[3].label[11:4].4-11
        2: TB12
            # - bit[16..19] -> TB12 bit[7..4]: egress::hdr.mpls[3].label[3:0].0-3
            # - bit[20..22] -> TB12 bit[3..1]: egress::hdr.mpls[3].exp
            # - bit[23] -> TB12 bit[0]: egress::hdr.mpls[3].bos
        3: TB13  # egress::hdr.mpls[3].ttl
        load: { byte1 : 2 }
        shift: 4
        buf_req: 4
        next: parse_mpls.$it3.$split_0
    parse_mpls.$it3.$split_0:
      match: [ byte1 ]
      0b*******0:
        B17: 1  # value 1 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        buf_req: 0
        next: end
      0b*******1:
        B17: 1  # value 1 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        load: { byte1 : 0 }
        buf_req: 1
        next: parse_mpls_bos
      0x**:
        B17: 1  # value 1 -> B17 bit[3..0]: egress::hdr.mpls.$stkvalid
        buf_req: 0
        next: end
    parse_mpls_bos:
      match: [ byte1 ]
      0x4*:
        0..3: TW4
            # - bit[0..3] -> TW4 bit[31..28]: egress::hdr.ipv4.version
            # - bit[4..7] -> TW4 bit[27..24]: egress::hdr.ipv4.ihl
            # - bit[8..15] -> TW4 bit[23..16]: egress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW4 bit[15..0]: egress::hdr.ipv4.total_len
        4..7: TW20
            # - bit[32..47] -> TW20 bit[31..16]: egress::hdr.ipv4.identification
            # - bit[48..50] -> TW20 bit[15..13]: egress::hdr.ipv4.flags
            # - bit[51..63] -> TW20 bit[12..0]: egress::hdr.ipv4.frag_offset
        8..9: TH31
            # - bit[64..71] -> TH31 bit[15..8]: egress::hdr.ipv4.ttl
            # - bit[72..79] -> TH31 bit[7..0]: egress::hdr.ipv4.protocol
        8..11: TW22  # bit[80..95] -> TW22 bit[15..0]: egress::hdr.ipv4.hdr_checksum
        12..13: TH44  # egress::hdr.ipv4.src_addr[31:16].16-31
        14..15: TH43  # egress::hdr.ipv4.src_addr[15:0].0-15
        16..17: TH46  # egress::hdr.ipv4.dst_addr[31:16].16-31
        W48: 4  # value 1 -> W48 bit[2]: egress::hdr.ipv4.$valid
        load: { byte1 : 9 }
        shift: 18
        buf_req: 18
        next: parse_ipv4.$split_0
      0x6*:
        0..3: TW4
            # - bit[0..3] -> TW4 bit[31..28]: egress::hdr.ipv6.version
            # - bit[4..11] -> TW4 bit[27..20]: egress::hdr.ipv6.traffic_class
            # - bit[12..31] -> TW4 bit[19..0]: egress::hdr.ipv6.flow_label
        4..7: TW20
            # - bit[32..47] -> TW20 bit[31..16]: egress::hdr.ipv6.payload_len
            # - bit[48..55] -> TW20 bit[15..8]: egress::hdr.ipv6.next_hdr
            # - bit[56..63] -> TW20 bit[7..0]: egress::hdr.ipv6.hop_limit
        8..9: H22  # egress::hdr.ipv6.src_addr[127:112].112-127
        10..11: TH46  # egress::hdr.ipv6.src_addr[111:96].96-111
        12..15: TW22  # egress::hdr.ipv6.src_addr[95:64].64-95
        16..17: TH45  # egress::hdr.ipv6.src_addr[63:48].48-63
        18..19: TH44  # egress::hdr.ipv6.src_addr[47:32].32-47
        24..27: W47  # egress::hdr.ipv6.dst_addr[127:96].96-127
        W48: 67108864  # value 1 -> W48 bit[26]: egress::hdr.ipv6.$valid
        load: { byte1 : 6 }
        shift: 20
        buf_req: 28
        next: parse_ipv6.$split_0
      0x**:
        buf_req: 0
        next: end
    parse_fabric:
      match: [ half ]
      0x0800:
        0..3: W16
            # - bit[0] -> W16 bit[31]: egress::hdr.fabric.pad1
            # - bit[1] -> W16 bit[30]: egress::hdr.fabric.is_hit
            # - bit[2] -> W16 bit[29]: egress::hdr.fabric.is_to_cn78
            # - bit[3] -> W16 bit[28]: egress::hdr.fabric.is_to_td3
            # - bit[4] -> W16 bit[27]: egress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W16 bit[26..24]: egress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W16 bit[23..18]: egress::hdr.fabric.pad2
            # - bit[14..31] -> W16 bit[17..0]: egress::hdr.fabric.mac_index
        4..7: W17
            # - bit[32..35] -> W17 bit[31..28]: egress::hdr.fabric.pad4
            # - bit[36] -> W17 bit[27]: egress::hdr.fabric.flags_drop
            # - bit[37] -> W17 bit[26]: egress::hdr.fabric.is_trunc_mir
            # - bit[38..55] -> W17 bit[25..8]: egress::hdr.fabric.count_index
            # - bit[56..63] -> W17 bit[7..0]: egress::hdr.fabric.mc_index[15:8].8-15
        8: B18  # egress::hdr.fabric.mc_index[7:0].0-7
        9..10: H20  # egress::hdr.fabric.vlan_index
        11..12: H17  # egress::hdr.fabric.ether_type
        W48: 134217728  # value 1 -> W48 bit[27]: egress::hdr.fabric.$valid
        shift: 13
        buf_req: 13
        next: parse_ipv4
      0x86dd:
        0..3: W16
            # - bit[0] -> W16 bit[31]: egress::hdr.fabric.pad1
            # - bit[1] -> W16 bit[30]: egress::hdr.fabric.is_hit
            # - bit[2] -> W16 bit[29]: egress::hdr.fabric.is_to_cn78
            # - bit[3] -> W16 bit[28]: egress::hdr.fabric.is_to_td3
            # - bit[4] -> W16 bit[27]: egress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W16 bit[26..24]: egress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W16 bit[23..18]: egress::hdr.fabric.pad2
            # - bit[14..31] -> W16 bit[17..0]: egress::hdr.fabric.mac_index
        4..7: W17
            # - bit[32..35] -> W17 bit[31..28]: egress::hdr.fabric.pad4
            # - bit[36] -> W17 bit[27]: egress::hdr.fabric.flags_drop
            # - bit[37] -> W17 bit[26]: egress::hdr.fabric.is_trunc_mir
            # - bit[38..55] -> W17 bit[25..8]: egress::hdr.fabric.count_index
            # - bit[56..63] -> W17 bit[7..0]: egress::hdr.fabric.mc_index[15:8].8-15
        8: B18  # egress::hdr.fabric.mc_index[7:0].0-7
        9..10: H20  # egress::hdr.fabric.vlan_index
        11..12: H17  # egress::hdr.fabric.ether_type
        W48: 134217728  # value 1 -> W48 bit[27]: egress::hdr.fabric.$valid
        shift: 13
        buf_req: 13
        next: parse_ipv6
      0x8100:
        0..3: W16
            # - bit[0] -> W16 bit[31]: egress::hdr.fabric.pad1
            # - bit[1] -> W16 bit[30]: egress::hdr.fabric.is_hit
            # - bit[2] -> W16 bit[29]: egress::hdr.fabric.is_to_cn78
            # - bit[3] -> W16 bit[28]: egress::hdr.fabric.is_to_td3
            # - bit[4] -> W16 bit[27]: egress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W16 bit[26..24]: egress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W16 bit[23..18]: egress::hdr.fabric.pad2
            # - bit[14..31] -> W16 bit[17..0]: egress::hdr.fabric.mac_index
        4..7: W17
            # - bit[32..35] -> W17 bit[31..28]: egress::hdr.fabric.pad4
            # - bit[36] -> W17 bit[27]: egress::hdr.fabric.flags_drop
            # - bit[37] -> W17 bit[26]: egress::hdr.fabric.is_trunc_mir
            # - bit[38..55] -> W17 bit[25..8]: egress::hdr.fabric.count_index
            # - bit[56..63] -> W17 bit[7..0]: egress::hdr.fabric.mc_index[15:8].8-15
        8: B18  # egress::hdr.fabric.mc_index[7:0].0-7
        9..10: H20  # egress::hdr.fabric.vlan_index
        11..12: H17  # egress::hdr.fabric.ether_type
        W48: 134217728  # value 1 -> W48 bit[27]: egress::hdr.fabric.$valid
        load: { half : 15..16 }
        shift: 13
        buf_req: 17
        next: parse_vlan
      0x8847:
        0..3: W16
            # - bit[0] -> W16 bit[31]: egress::hdr.fabric.pad1
            # - bit[1] -> W16 bit[30]: egress::hdr.fabric.is_hit
            # - bit[2] -> W16 bit[29]: egress::hdr.fabric.is_to_cn78
            # - bit[3] -> W16 bit[28]: egress::hdr.fabric.is_to_td3
            # - bit[4] -> W16 bit[27]: egress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W16 bit[26..24]: egress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W16 bit[23..18]: egress::hdr.fabric.pad2
            # - bit[14..31] -> W16 bit[17..0]: egress::hdr.fabric.mac_index
        4..7: W17
            # - bit[32..35] -> W17 bit[31..28]: egress::hdr.fabric.pad4
            # - bit[36] -> W17 bit[27]: egress::hdr.fabric.flags_drop
            # - bit[37] -> W17 bit[26]: egress::hdr.fabric.is_trunc_mir
            # - bit[38..55] -> W17 bit[25..8]: egress::hdr.fabric.count_index
            # - bit[56..63] -> W17 bit[7..0]: egress::hdr.fabric.mc_index[15:8].8-15
        8: B18  # egress::hdr.fabric.mc_index[7:0].0-7
        9..10: H20  # egress::hdr.fabric.vlan_index
        11..12: H17  # egress::hdr.fabric.ether_type
        W48: 134217728  # value 1 -> W48 bit[27]: egress::hdr.fabric.$valid
        load: { byte1 : 15 }
        shift: 13
        buf_req: 16
        next: parse_mpls
      0x****:
        0..3: W16
            # - bit[0] -> W16 bit[31]: egress::hdr.fabric.pad1
            # - bit[1] -> W16 bit[30]: egress::hdr.fabric.is_hit
            # - bit[2] -> W16 bit[29]: egress::hdr.fabric.is_to_cn78
            # - bit[3] -> W16 bit[28]: egress::hdr.fabric.is_to_td3
            # - bit[4] -> W16 bit[27]: egress::hdr.fabric.is_hdr_decap
            # - bit[5..7] -> W16 bit[26..24]: egress::hdr.fabric.ig_port_type
            # - bit[8..13] -> W16 bit[23..18]: egress::hdr.fabric.pad2
            # - bit[14..31] -> W16 bit[17..0]: egress::hdr.fabric.mac_index
        4..7: W17
            # - bit[32..35] -> W17 bit[31..28]: egress::hdr.fabric.pad4
            # - bit[36] -> W17 bit[27]: egress::hdr.fabric.flags_drop
            # - bit[37] -> W17 bit[26]: egress::hdr.fabric.is_trunc_mir
            # - bit[38..55] -> W17 bit[25..8]: egress::hdr.fabric.count_index
            # - bit[56..63] -> W17 bit[7..0]: egress::hdr.fabric.mc_index[15:8].8-15
        8: B18  # egress::hdr.fabric.mc_index[7:0].0-7
        9..10: H20  # egress::hdr.fabric.vlan_index
        11..12: H17  # egress::hdr.fabric.ether_type
        W48: 134217728  # value 1 -> W48 bit[27]: egress::hdr.fabric.$valid
        shift: 13
        buf_req: 13
        next: end
    parse_truncate_only_metadata:
      *:
        9..12: TW31  # egress::hdr.ethernet.dst_addr[47:16].16-47
        13..14: H24  # egress::hdr.ethernet.dst_addr[15:0].0-15
        15..16: TH42  # egress::hdr.ethernet.src_addr[47:32].32-47
        17..18: TH35  # egress::hdr.ethernet.src_addr[31:16].16-31
        19..20: TH6  # egress::hdr.ethernet.src_addr[15:0].0-15
        W48: 2  # value 1 -> W48 bit[1]: egress::hdr.ethernet.$valid
        load: { half : 21..22 }
        shift: 21
        buf_req: 23
        next: parse_ethernet.$split_0
deparser egress:
  dictionary:
    TW31: W48(1)  # egress::hdr.ethernet.dst_addr.16-47 if egress::hdr.ethernet.$valid
    H24: W48(1)  # egress::hdr.ethernet.dst_addr.0-15 if egress::hdr.ethernet.$valid
    TH42: W48(1)  # egress::hdr.ethernet.src_addr.32-47 if egress::hdr.ethernet.$valid
    TH35: W48(1)  # egress::hdr.ethernet.src_addr.16-31 if egress::hdr.ethernet.$valid
    TH6: W48(1)  # egress::hdr.ethernet.src_addr.0-15 if egress::hdr.ethernet.$valid
    H19: W48(1)  # egress::hdr.ethernet.ether_type if egress::hdr.ethernet.$valid
    W16: W48(27)
        # - bit[31]: egress::hdr.fabric.pad1 if egress::hdr.fabric.$valid
        # - bit[30]: egress::hdr.fabric.is_hit if egress::hdr.fabric.$valid
        # - bit[29]: egress::hdr.fabric.is_to_cn78 if egress::hdr.fabric.$valid
        # - bit[28]: egress::hdr.fabric.is_to_td3 if egress::hdr.fabric.$valid
        # - bit[27]: egress::hdr.fabric.is_hdr_decap if egress::hdr.fabric.$valid
        # - bit[26..24]: egress::hdr.fabric.ig_port_type if egress::hdr.fabric.$valid
        # - bit[23..18]: egress::hdr.fabric.pad2 if egress::hdr.fabric.$valid
        # - bit[17..0]: egress::hdr.fabric.mac_index if egress::hdr.fabric.$valid
    W17: W48(27)
        # - bit[31..28]: egress::hdr.fabric.pad4 if egress::hdr.fabric.$valid
        # - bit[27]: egress::hdr.fabric.flags_drop if egress::hdr.fabric.$valid
        # - bit[26]: egress::hdr.fabric.is_trunc_mir if egress::hdr.fabric.$valid
        # - bit[25..8]: egress::hdr.fabric.count_index if egress::hdr.fabric.$valid
        # - bit[7..0]: egress::hdr.fabric.mc_index.8-15 if egress::hdr.fabric.$valid
    B18: W48(27)  # egress::hdr.fabric.mc_index.0-7 if egress::hdr.fabric.$valid
    H20: W48(27)  # egress::hdr.fabric.vlan_index if egress::hdr.fabric.$valid
    H17: W48(27)  # egress::hdr.fabric.ether_type if egress::hdr.fabric.$valid
    H23: W48(0)
        # - bit[15..8]: egress::hdr.fabric_to_cn78.pkt_proto_type if egress::hdr.fabric_to_cn78.$valid
        # - bit[7..0]: egress::hdr.fabric_to_cn78.ip_hdr_location if egress::hdr.fabric_to_cn78.$valid
    TH7: W48(0)  # egress::hdr.fabric_to_cn78.payload_crc32 if egress::hdr.fabric_to_cn78.$valid
    H18: W48(0)  # egress::hdr.fabric_to_cn78.ether_type if egress::hdr.fabric_to_cn78.$valid
    H21: B16(4)
        # - bit[15..13]: egress::hdr.vlan_tag[0].pcp if egress::hdr.vlan_tag[0].$valid
        # - bit[12]: egress::hdr.vlan_tag[0].cfi if egress::hdr.vlan_tag[0].$valid
        # - bit[11..0]: egress::hdr.vlan_tag[0].vid if egress::hdr.vlan_tag[0].$valid
    TB7: B16(4)  # egress::hdr.vlan_tag[0].ether_type.8-15 if egress::hdr.vlan_tag[0].$valid
    TB6: B16(4)  # egress::hdr.vlan_tag[0].ether_type.0-7 if egress::hdr.vlan_tag[0].$valid
    TW12: B16(3)
        # - bit[31..29]: egress::hdr.vlan_tag[1].pcp if egress::hdr.vlan_tag[1].$valid
        # - bit[28]: egress::hdr.vlan_tag[1].cfi if egress::hdr.vlan_tag[1].$valid
        # - bit[27..16]: egress::hdr.vlan_tag[1].vid if egress::hdr.vlan_tag[1].$valid
        # - bit[15..0]: egress::hdr.vlan_tag[1].ether_type if egress::hdr.vlan_tag[1].$valid
    TW13: B16(2)
        # - bit[31..29]: egress::hdr.vlan_tag[2].pcp if egress::hdr.vlan_tag[2].$valid
        # - bit[28]: egress::hdr.vlan_tag[2].cfi if egress::hdr.vlan_tag[2].$valid
        # - bit[27..16]: egress::hdr.vlan_tag[2].vid if egress::hdr.vlan_tag[2].$valid
        # - bit[15..0]: egress::hdr.vlan_tag[2].ether_type if egress::hdr.vlan_tag[2].$valid
    TW14: B16(1)
        # - bit[31..29]: egress::hdr.vlan_tag[3].pcp if egress::hdr.vlan_tag[3].$valid
        # - bit[28]: egress::hdr.vlan_tag[3].cfi if egress::hdr.vlan_tag[3].$valid
        # - bit[27..16]: egress::hdr.vlan_tag[3].vid if egress::hdr.vlan_tag[3].$valid
        # - bit[15..0]: egress::hdr.vlan_tag[3].ether_type if egress::hdr.vlan_tag[3].$valid
    TW15: B16(0)
        # - bit[31..29]: egress::hdr.vlan_tag[4].pcp if egress::hdr.vlan_tag[4].$valid
        # - bit[28]: egress::hdr.vlan_tag[4].cfi if egress::hdr.vlan_tag[4].$valid
        # - bit[27..16]: egress::hdr.vlan_tag[4].vid if egress::hdr.vlan_tag[4].$valid
        # - bit[15..0]: egress::hdr.vlan_tag[4].ether_type if egress::hdr.vlan_tag[4].$valid
    TH19: B17(3)  # egress::hdr.mpls[0].label.4-19 if egress::hdr.mpls[0].$valid
    TH18: B17(3)
        # - bit[15..12]: egress::hdr.mpls[0].label.0-3 if egress::hdr.mpls[0].$valid
        # - bit[11..9]: egress::hdr.mpls[0].exp if egress::hdr.mpls[0].$valid
        # - bit[8]: egress::hdr.mpls[0].bos if egress::hdr.mpls[0].$valid
        # - bit[7..0]: egress::hdr.mpls[0].ttl if egress::hdr.mpls[0].$valid
    TH21: B17(2)  # egress::hdr.mpls[1].label.4-19 if egress::hdr.mpls[1].$valid
    TH20: B17(2)
        # - bit[15..12]: egress::hdr.mpls[1].label.0-3 if egress::hdr.mpls[1].$valid
        # - bit[11..9]: egress::hdr.mpls[1].exp if egress::hdr.mpls[1].$valid
        # - bit[8]: egress::hdr.mpls[1].bos if egress::hdr.mpls[1].$valid
        # - bit[7..0]: egress::hdr.mpls[1].ttl if egress::hdr.mpls[1].$valid
    TH23: B17(1)  # egress::hdr.mpls[2].label.4-19 if egress::hdr.mpls[2].$valid
    TH22: B17(1)
        # - bit[15..12]: egress::hdr.mpls[2].label.0-3 if egress::hdr.mpls[2].$valid
        # - bit[11..9]: egress::hdr.mpls[2].exp if egress::hdr.mpls[2].$valid
        # - bit[8]: egress::hdr.mpls[2].bos if egress::hdr.mpls[2].$valid
        # - bit[7..0]: egress::hdr.mpls[2].ttl if egress::hdr.mpls[2].$valid
    TB15: B17(0)  # egress::hdr.mpls[3].label.12-19 if egress::hdr.mpls[3].$valid
    TB14: B17(0)  # egress::hdr.mpls[3].label.4-11 if egress::hdr.mpls[3].$valid
    TB12: B17(0)
        # - bit[7..4]: egress::hdr.mpls[3].label.0-3 if egress::hdr.mpls[3].$valid
        # - bit[3..1]: egress::hdr.mpls[3].exp if egress::hdr.mpls[3].$valid
        # - bit[0]: egress::hdr.mpls[3].bos if egress::hdr.mpls[3].$valid
    TB13: B17(0)  # egress::hdr.mpls[3].ttl if egress::hdr.mpls[3].$valid
    TW4: W48(2)
        # - bit[31..28]: egress::hdr.ipv4.version if egress::hdr.ipv4.$valid
        # - bit[27..24]: egress::hdr.ipv4.ihl if egress::hdr.ipv4.$valid
        # - bit[23..16]: egress::hdr.ipv4.diffserv if egress::hdr.ipv4.$valid
        # - bit[15..0]: egress::hdr.ipv4.total_len if egress::hdr.ipv4.$valid
    TW20: W48(2)
        # - bit[31..16]: egress::hdr.ipv4.identification if egress::hdr.ipv4.$valid
        # - bit[15..13]: egress::hdr.ipv4.flags if egress::hdr.ipv4.$valid
        # - bit[12..0]: egress::hdr.ipv4.frag_offset if egress::hdr.ipv4.$valid
    TH31: W48(2)
        # - bit[15..8]: egress::hdr.ipv4.ttl if egress::hdr.ipv4.$valid
        # - bit[7..0]: egress::hdr.ipv4.protocol if egress::hdr.ipv4.$valid
    TH44: W48(2)  # egress::hdr.ipv4.src_addr.16-31 if egress::hdr.ipv4.$valid
    TH43: W48(2)  # egress::hdr.ipv4.src_addr.0-15 if egress::hdr.ipv4.$valid
    TH46: W48(2)  # egress::hdr.ipv4.dst_addr.16-31 if egress::hdr.ipv4.$valid
    TH45: W48(2)  # egress::hdr.ipv4.dst_addr.0-15 if egress::hdr.ipv4.$valid
    TW4: W48(26)
        # - bit[31..28]: egress::hdr.ipv6.version if egress::hdr.ipv6.$valid
        # - bit[27..20]: egress::hdr.ipv6.traffic_class if egress::hdr.ipv6.$valid
        # - bit[19..0]: egress::hdr.ipv6.flow_label if egress::hdr.ipv6.$valid
    TW20: W48(26)
        # - bit[31..16]: egress::hdr.ipv6.payload_len if egress::hdr.ipv6.$valid
        # - bit[15..8]: egress::hdr.ipv6.next_hdr if egress::hdr.ipv6.$valid
        # - bit[7..0]: egress::hdr.ipv6.hop_limit if egress::hdr.ipv6.$valid
    H22: W48(26)  # egress::hdr.ipv6.src_addr.112-127 if egress::hdr.ipv6.$valid
    TH46: W48(26)  # egress::hdr.ipv6.src_addr.96-111 if egress::hdr.ipv6.$valid
    TW22: W48(26)  # egress::hdr.ipv6.src_addr.64-95 if egress::hdr.ipv6.$valid
    TH45: W48(26)  # egress::hdr.ipv6.src_addr.48-63 if egress::hdr.ipv6.$valid
    TH44: W48(26)  # egress::hdr.ipv6.src_addr.32-47 if egress::hdr.ipv6.$valid
    TH43: W48(26)  # egress::hdr.ipv6.src_addr.16-31 if egress::hdr.ipv6.$valid
    TH31: W48(26)  # egress::hdr.ipv6.src_addr.0-15 if egress::hdr.ipv6.$valid
    W47: W48(26)  # egress::hdr.ipv6.dst_addr.96-127 if egress::hdr.ipv6.$valid
    W46: W48(26)  # egress::hdr.ipv6.dst_addr.64-95 if egress::hdr.ipv6.$valid
    W45: W48(26)  # egress::hdr.ipv6.dst_addr.32-63 if egress::hdr.ipv6.$valid
    W44: W48(26)  # egress::hdr.ipv6.dst_addr.0-31 if egress::hdr.ipv6.$valid
    TW23: W48(16)
        # - bit[31..16]: egress::hdr.udp.src_port if egress::hdr.udp.$valid
        # - bit[15..0]: egress::hdr.udp.dst_port if egress::hdr.udp.$valid
    TH32: W48(16)  # egress::hdr.udp.hdr_length if egress::hdr.udp.$valid
    TB23: W48(16)  # egress::hdr.udp.checksum.8-15 if egress::hdr.udp.$valid
    TB22: W48(16)  # egress::hdr.udp.checksum.0-7 if egress::hdr.udp.$valid
    TW23: W48(3)
        # - bit[31..16]: egress::hdr.tcp.src_port if egress::hdr.tcp.$valid
        # - bit[15..0]: egress::hdr.tcp.dst_port if egress::hdr.tcp.$valid
    TW30: W48(3)  # egress::hdr.tcp.seq_no if egress::hdr.tcp.$valid
    TH47: W48(3)  # egress::hdr.tcp.ack_no.16-31 if egress::hdr.tcp.$valid
    TB28: W48(3)  # egress::hdr.tcp.ack_no.8-15 if egress::hdr.tcp.$valid
    TB23: W48(3)  # egress::hdr.tcp.ack_no.0-7 if egress::hdr.tcp.$valid
    TW5: W48(3)
        # - bit[31..28]: egress::hdr.tcp.data_offset if egress::hdr.tcp.$valid
        # - bit[27..24]: egress::hdr.tcp.res if egress::hdr.tcp.$valid
        # - bit[23..16]: egress::hdr.tcp.flags if egress::hdr.tcp.$valid
        # - bit[15..0]: egress::hdr.tcp.window if egress::hdr.tcp.$valid
    TH32: W48(3)  # egress::hdr.tcp.checksum if egress::hdr.tcp.$valid
    TB22: W48(3)  # egress::hdr.tcp.urgent_ptr.8-15 if egress::hdr.tcp.$valid
    TB21: W48(3)  # egress::hdr.tcp.urgent_ptr.0-7 if egress::hdr.tcp.$valid
    TW5: W48(23)
        # - bit[31..24]: egress::hdr.icmp.type_ if egress::hdr.icmp.$valid
        # - bit[23..16]: egress::hdr.icmp.code if egress::hdr.icmp.$valid
        # - bit[15..0]: egress::hdr.icmp.hdr_checksum if egress::hdr.icmp.$valid
    TW5: W48(24)
        # - bit[31..16]: egress::hdr.sctp.src_port if egress::hdr.sctp.$valid
        # - bit[15..0]: egress::hdr.sctp.dst_port if egress::hdr.sctp.$valid
    TW6: W48(24)  # egress::hdr.sctp.verifTag if egress::hdr.sctp.$valid
    TH8: W48(24)  # egress::hdr.sctp.checksum if egress::hdr.sctp.$valid
    TW5: W48(21)
        # - bit[31..20]: egress::hdr.l2tp.TLxxSxOP if egress::hdr.l2tp.$valid
        # - bit[19..16]: egress::hdr.l2tp.version if egress::hdr.l2tp.$valid
        # - bit[15..8]: egress::hdr.l2tp.l2tp_length if egress::hdr.l2tp.$valid
        # - bit[7..0]: egress::hdr.l2tp.tunnel_id.8-15 if egress::hdr.l2tp.$valid
    TB4: W48(21)  # egress::hdr.l2tp.tunnel_id.0-7 if egress::hdr.l2tp.$valid
    TH34: W48(21)  # egress::hdr.l2tp.session_id if egress::hdr.l2tp.$valid
    TH33: W48(21)  # egress::hdr.l2tp.Ns if egress::hdr.l2tp.$valid
    TH8: W48(21)  # egress::hdr.l2tp.Nr if egress::hdr.l2tp.$valid
    TB21: W48(21)  # egress::hdr.l2tp.offset_size if egress::hdr.l2tp.$valid
    TB5: W48(21)  # egress::hdr.l2tp.offset_pad if egress::hdr.l2tp.$valid
    TH9: W48(22)
        # - bit[15..12]: egress::hdr.pppoe.version if egress::hdr.pppoe.$valid
        # - bit[11..8]: egress::hdr.pppoe.type if egress::hdr.pppoe.$valid
        # - bit[7..0]: egress::hdr.pppoe.code if egress::hdr.pppoe.$valid
    TH10: W48(22)  # egress::hdr.pppoe.session_id if egress::hdr.pppoe.$valid
    TW30: W48(22)
        # - bit[31..16]: egress::hdr.pppoe.pppoe_length if egress::hdr.pppoe.$valid
        # - bit[15..0]: egress::hdr.pppoe.ppp_proto if egress::hdr.pppoe.$valid
    TH9: W48(22)
        # - bit[15..12]: egress::hdr.pppoe.version if egress::hdr.pppoe.$valid
        # - bit[11..8]: egress::hdr.pppoe.type if egress::hdr.pppoe.$valid
        # - bit[7..0]: egress::hdr.pppoe.code if egress::hdr.pppoe.$valid
    TH10: W48(22)  # egress::hdr.pppoe.session_id if egress::hdr.pppoe.$valid
    TW30: W48(22)
        # - bit[31..16]: egress::hdr.pppoe.pppoe_length if egress::hdr.pppoe.$valid
        # - bit[15..0]: egress::hdr.pppoe.ppp_proto if egress::hdr.pppoe.$valid
    TH8: W48(25)
        # - bit[15]: egress::hdr.gre.C if egress::hdr.gre.$valid
        # - bit[14]: egress::hdr.gre.R if egress::hdr.gre.$valid
        # - bit[13]: egress::hdr.gre.K if egress::hdr.gre.$valid
        # - bit[12]: egress::hdr.gre.S if egress::hdr.gre.$valid
        # - bit[11]: egress::hdr.gre.s if egress::hdr.gre.$valid
        # - bit[10..8]: egress::hdr.gre.recurse if egress::hdr.gre.$valid
        # - bit[7..3]: egress::hdr.gre.flags if egress::hdr.gre.$valid
        # - bit[2..0]: egress::hdr.gre.version if egress::hdr.gre.$valid
    TB5: W48(25)  # egress::hdr.gre.proto.8-15 if egress::hdr.gre.$valid
    TB4: W48(25)  # egress::hdr.gre.proto.0-7 if egress::hdr.gre.$valid
    TH8: W48(19)
        # - bit[15..13]: egress::hdr.gtpv1_8b.version if egress::hdr.gtpv1_8b.$valid
        # - bit[12]: egress::hdr.gtpv1_8b.pt if egress::hdr.gtpv1_8b.$valid
        # - bit[11]: egress::hdr.gtpv1_8b.reserved if egress::hdr.gtpv1_8b.$valid
        # - bit[10]: egress::hdr.gtpv1_8b.e if egress::hdr.gtpv1_8b.$valid
        # - bit[9]: egress::hdr.gtpv1_8b.s if egress::hdr.gtpv1_8b.$valid
        # - bit[8]: egress::hdr.gtpv1_8b.pn if egress::hdr.gtpv1_8b.$valid
        # - bit[7..0]: egress::hdr.gtpv1_8b.message_type if egress::hdr.gtpv1_8b.$valid
    TH9: W48(19)  # egress::hdr.gtpv1_8b.message_len if egress::hdr.gtpv1_8b.$valid
    TW5: W48(19)  # egress::hdr.gtpv1_8b.teid if egress::hdr.gtpv1_8b.$valid
    TH8: W48(20)
        # - bit[15..13]: egress::hdr.gtpv1_12b.version if egress::hdr.gtpv1_12b.$valid
        # - bit[12]: egress::hdr.gtpv1_12b.pt if egress::hdr.gtpv1_12b.$valid
        # - bit[11]: egress::hdr.gtpv1_12b.reserved if egress::hdr.gtpv1_12b.$valid
        # - bit[10]: egress::hdr.gtpv1_12b.e if egress::hdr.gtpv1_12b.$valid
        # - bit[9]: egress::hdr.gtpv1_12b.s if egress::hdr.gtpv1_12b.$valid
        # - bit[8]: egress::hdr.gtpv1_12b.pn if egress::hdr.gtpv1_12b.$valid
        # - bit[7..0]: egress::hdr.gtpv1_12b.message_type if egress::hdr.gtpv1_12b.$valid
    TH9: W48(20)  # egress::hdr.gtpv1_12b.message_len if egress::hdr.gtpv1_12b.$valid
    TW30: W48(20)  # egress::hdr.gtpv1_12b.teid if egress::hdr.gtpv1_12b.$valid
    TW5: W48(20)
        # - bit[31..16]: egress::hdr.gtpv1_12b.seq_no if egress::hdr.gtpv1_12b.$valid
        # - bit[15..8]: egress::hdr.gtpv1_12b.n_pdu_no if egress::hdr.gtpv1_12b.$valid
        # - bit[7..0]: egress::hdr.gtpv1_12b.next_ex_hdr_t if egress::hdr.gtpv1_12b.$valid
    TH8: W48(4)
        # - bit[15..13]: egress::hdr.gtpv2_8b.version if egress::hdr.gtpv2_8b.$valid
        # - bit[12]: egress::hdr.gtpv2_8b.pb if egress::hdr.gtpv2_8b.$valid
        # - bit[11]: egress::hdr.gtpv2_8b.tf if egress::hdr.gtpv2_8b.$valid
        # - bit[10..8]: egress::hdr.gtpv2_8b.spare1 if egress::hdr.gtpv2_8b.$valid
        # - bit[7..0]: egress::hdr.gtpv2_8b.message_type if egress::hdr.gtpv2_8b.$valid
    TH9: W48(4)  # egress::hdr.gtpv2_8b.total_len if egress::hdr.gtpv2_8b.$valid
    TH34: W48(4)  # egress::hdr.gtpv2_8b.seq_no.8-23 if egress::hdr.gtpv2_8b.$valid
    TH33: W48(4)
        # - bit[15..8]: egress::hdr.gtpv2_8b.seq_no.0-7 if egress::hdr.gtpv2_8b.$valid
        # - bit[7..0]: egress::hdr.gtpv2_8b.spare2 if egress::hdr.gtpv2_8b.$valid
    TH8: W48(15)
        # - bit[15..13]: egress::hdr.gtpv2_12b.version if egress::hdr.gtpv2_12b.$valid
        # - bit[12]: egress::hdr.gtpv2_12b.pb if egress::hdr.gtpv2_12b.$valid
        # - bit[11]: egress::hdr.gtpv2_12b.tf if egress::hdr.gtpv2_12b.$valid
        # - bit[10..8]: egress::hdr.gtpv2_12b.spare1 if egress::hdr.gtpv2_12b.$valid
        # - bit[7..0]: egress::hdr.gtpv2_12b.message_type if egress::hdr.gtpv2_12b.$valid
    TH9: W48(15)  # egress::hdr.gtpv2_12b.total_len if egress::hdr.gtpv2_12b.$valid
    W31: W48(15)  # egress::hdr.gtpv2_12b.teid if egress::hdr.gtpv2_12b.$valid
    TH34: W48(15)  # egress::hdr.gtpv2_12b.seq_no.8-23 if egress::hdr.gtpv2_12b.$valid
    TH33: W48(15)
        # - bit[15..8]: egress::hdr.gtpv2_12b.seq_no.0-7 if egress::hdr.gtpv2_12b.$valid
        # - bit[7..0]: egress::hdr.gtpv2_12b.spare2 if egress::hdr.gtpv2_12b.$valid
    TB5: W48(6)  # egress::hdr.cause_ie_6b.type if egress::hdr.cause_ie_6b.$valid
    TW7: W48(6)
        # - bit[31..16]: egress::hdr.cause_ie_6b.len if egress::hdr.cause_ie_6b.$valid
        # - bit[15..12]: egress::hdr.cause_ie_6b.spare1 if egress::hdr.cause_ie_6b.$valid
        # - bit[11..8]: egress::hdr.cause_ie_6b.instance if egress::hdr.cause_ie_6b.$valid
        # - bit[7..0]: egress::hdr.cause_ie_6b.cause_value if egress::hdr.cause_ie_6b.$valid
    TB4: W48(6)
        # - bit[7..3]: egress::hdr.cause_ie_6b.spare2 if egress::hdr.cause_ie_6b.$valid
        # - bit[2]: egress::hdr.cause_ie_6b.pce if egress::hdr.cause_ie_6b.$valid
        # - bit[1]: egress::hdr.cause_ie_6b.bce if egress::hdr.cause_ie_6b.$valid
        # - bit[0]: egress::hdr.cause_ie_6b.cs if egress::hdr.cause_ie_6b.$valid
    TB5: W48(7)  # egress::hdr.cause_ie_10b.type if egress::hdr.cause_ie_10b.$valid
    TW7: W48(7)
        # - bit[31..16]: egress::hdr.cause_ie_10b.len if egress::hdr.cause_ie_10b.$valid
        # - bit[15..12]: egress::hdr.cause_ie_10b.spare1 if egress::hdr.cause_ie_10b.$valid
        # - bit[11..8]: egress::hdr.cause_ie_10b.instance if egress::hdr.cause_ie_10b.$valid
        # - bit[7..0]: egress::hdr.cause_ie_10b.cause_value if egress::hdr.cause_ie_10b.$valid
    TB4: W48(7)
        # - bit[7..3]: egress::hdr.cause_ie_10b.spare2 if egress::hdr.cause_ie_10b.$valid
        # - bit[2]: egress::hdr.cause_ie_10b.pce if egress::hdr.cause_ie_10b.$valid
        # - bit[1]: egress::hdr.cause_ie_10b.bce if egress::hdr.cause_ie_10b.$valid
        # - bit[0]: egress::hdr.cause_ie_10b.cs if egress::hdr.cause_ie_10b.$valid
    TH11: W48(7)
        # - bit[15..8]: egress::hdr.cause_ie_10b.type_oe if egress::hdr.cause_ie_10b.$valid
        # - bit[7..0]: egress::hdr.cause_ie_10b.len_oe.8-15 if egress::hdr.cause_ie_10b.$valid
    TH10: W48(7)
        # - bit[15..8]: egress::hdr.cause_ie_10b.len_oe.0-7 if egress::hdr.cause_ie_10b.$valid
        # - bit[7..4]: egress::hdr.cause_ie_10b.spare_oe if egress::hdr.cause_ie_10b.$valid
        # - bit[3..0]: egress::hdr.cause_ie_10b.instance_oe if egress::hdr.cause_ie_10b.$valid
    TW6: W48(5)
        # - bit[31..24]: egress::hdr.imsi.type if egress::hdr.imsi.$valid
        # - bit[23..8]: egress::hdr.imsi.len if egress::hdr.imsi.$valid
        # - bit[7..4]: egress::hdr.imsi.spare if egress::hdr.imsi.$valid
        # - bit[3..0]: egress::hdr.imsi.instance if egress::hdr.imsi.$valid
    TH30: W48(5)  # egress::hdr.imsi.num_digit.112-127 if egress::hdr.imsi.$valid
    TB29: W48(5)  # egress::hdr.imsi.num_digit.104-111 if egress::hdr.imsi.$valid
    TB20: W48(5)  # egress::hdr.imsi.num_digit.96-103 if egress::hdr.imsi.$valid
    TW29: W48(5)  # egress::hdr.imsi.num_digit.64-95 if egress::hdr.imsi.$valid
    TW28: W48(5)  # egress::hdr.imsi.num_digit.32-63 if egress::hdr.imsi.$valid
    TW21: W48(5)  # egress::hdr.imsi.num_digit.0-31 if egress::hdr.imsi.$valid
    TW5: W48(17)
        # - bit[31..24]: egress::hdr.vxlan.flags if egress::hdr.vxlan.$valid
        # - bit[23..0]: egress::hdr.vxlan.reserved if egress::hdr.vxlan.$valid
    TH9: W48(17)  # egress::hdr.vxlan.vni.8-23 if egress::hdr.vxlan.$valid
    TH8: W48(17)
        # - bit[15..8]: egress::hdr.vxlan.vni.0-7 if egress::hdr.vxlan.$valid
        # - bit[7..0]: egress::hdr.vxlan.reserved2 if egress::hdr.vxlan.$valid
    TW30: W48(18)  # egress::hdr.inner_ethernet.dst_addr.16-47 if egress::hdr.inner_ethernet.$valid
    TB5: W48(18)  # egress::hdr.inner_ethernet.dst_addr.8-15 if egress::hdr.inner_ethernet.$valid
    TB4: W48(18)  # egress::hdr.inner_ethernet.dst_addr.0-7 if egress::hdr.inner_ethernet.$valid
    TH47: W48(18)  # egress::hdr.inner_ethernet.src_addr.32-47 if egress::hdr.inner_ethernet.$valid
    TH34: W48(18)  # egress::hdr.inner_ethernet.src_addr.16-31 if egress::hdr.inner_ethernet.$valid
    TH33: W48(18)  # egress::hdr.inner_ethernet.src_addr.0-15 if egress::hdr.inner_ethernet.$valid
    TH10: W48(18)  # egress::hdr.inner_ethernet.ether_type if egress::hdr.inner_ethernet.$valid
    TW6: W48(8)
        # - bit[31..28]: egress::hdr.inner_ipv4.version if egress::hdr.inner_ipv4.$valid
        # - bit[27..24]: egress::hdr.inner_ipv4.ihl if egress::hdr.inner_ipv4.$valid
        # - bit[23..16]: egress::hdr.inner_ipv4.diffserv if egress::hdr.inner_ipv4.$valid
        # - bit[15..0]: egress::hdr.inner_ipv4.total_len if egress::hdr.inner_ipv4.$valid
    TH30: W48(8)  # egress::hdr.inner_ipv4.identification if egress::hdr.inner_ipv4.$valid
    TH11: W48(8)
        # - bit[15..13]: egress::hdr.inner_ipv4.flags if egress::hdr.inner_ipv4.$valid
        # - bit[12..0]: egress::hdr.inner_ipv4.frag_offset if egress::hdr.inner_ipv4.$valid
    TW21: W48(8)
        # - bit[31..24]: egress::hdr.inner_ipv4.ttl if egress::hdr.inner_ipv4.$valid
        # - bit[23..16]: egress::hdr.inner_ipv4.protocol if egress::hdr.inner_ipv4.$valid
        # - bit[15..0]: egress::hdr.inner_ipv4.hdr_checksum if egress::hdr.inner_ipv4.$valid
    TB31: W48(8)  # egress::hdr.inner_ipv4.src_addr.24-31 if egress::hdr.inner_ipv4.$valid
    TB30: W48(8)  # egress::hdr.inner_ipv4.src_addr.16-23 if egress::hdr.inner_ipv4.$valid
    TB29: W48(8)  # egress::hdr.inner_ipv4.src_addr.8-15 if egress::hdr.inner_ipv4.$valid
    TB20: W48(8)  # egress::hdr.inner_ipv4.src_addr.0-7 if egress::hdr.inner_ipv4.$valid
    W18: W48(8)  # egress::hdr.inner_ipv4.dst_addr if egress::hdr.inner_ipv4.$valid
    TW6: W48(14)
        # - bit[31..28]: egress::hdr.inner_ipv6.version if egress::hdr.inner_ipv6.$valid
        # - bit[27..20]: egress::hdr.inner_ipv6.traffic_class if egress::hdr.inner_ipv6.$valid
        # - bit[19..0]: egress::hdr.inner_ipv6.flow_label if egress::hdr.inner_ipv6.$valid
    TH11: W48(14)  # egress::hdr.inner_ipv6.payload_len if egress::hdr.inner_ipv6.$valid
    B19: W48(14)  # egress::hdr.inner_ipv6.next_hdr if egress::hdr.inner_ipv6.$valid
    TB20: W48(14)  # egress::hdr.inner_ipv6.hop_limit if egress::hdr.inner_ipv6.$valid
    W26: W48(14)  # egress::hdr.inner_ipv6.src_addr.96-127 if egress::hdr.inner_ipv6.$valid
    W25: W48(14)  # egress::hdr.inner_ipv6.src_addr.64-95 if egress::hdr.inner_ipv6.$valid
    W24: W48(14)  # egress::hdr.inner_ipv6.src_addr.32-63 if egress::hdr.inner_ipv6.$valid
    W18: W48(14)  # egress::hdr.inner_ipv6.src_addr.0-31 if egress::hdr.inner_ipv6.$valid
    W30: W48(14)  # egress::hdr.inner_ipv6.dst_addr.96-127 if egress::hdr.inner_ipv6.$valid
    W29: W48(14)  # egress::hdr.inner_ipv6.dst_addr.64-95 if egress::hdr.inner_ipv6.$valid
    W28: W48(14)  # egress::hdr.inner_ipv6.dst_addr.32-63 if egress::hdr.inner_ipv6.$valid
    W27: W48(14)  # egress::hdr.inner_ipv6.dst_addr.0-31 if egress::hdr.inner_ipv6.$valid
    TW7: W48(11)
        # - bit[31..16]: egress::hdr.inner_udp.src_port if egress::hdr.inner_udp.$valid
        # - bit[15..0]: egress::hdr.inner_udp.dst_port if egress::hdr.inner_udp.$valid
    TW28: W48(11)
        # - bit[31..16]: egress::hdr.inner_udp.hdr_length if egress::hdr.inner_udp.$valid
        # - bit[15..0]: egress::hdr.inner_udp.checksum if egress::hdr.inner_udp.$valid
    TW28: W48(9)
        # - bit[31..16]: egress::hdr.inner_tcp.src_port if egress::hdr.inner_tcp.$valid
        # - bit[15..0]: egress::hdr.inner_tcp.dst_port if egress::hdr.inner_tcp.$valid
    W19: W48(9)  # egress::hdr.inner_tcp.seq_no if egress::hdr.inner_tcp.$valid
    W20: W48(9)  # egress::hdr.inner_tcp.ack_no if egress::hdr.inner_tcp.$valid
    TW7: W48(9)
        # - bit[31..28]: egress::hdr.inner_tcp.data_offset if egress::hdr.inner_tcp.$valid
        # - bit[27..24]: egress::hdr.inner_tcp.res if egress::hdr.inner_tcp.$valid
        # - bit[23..16]: egress::hdr.inner_tcp.flags if egress::hdr.inner_tcp.$valid
        # - bit[15..0]: egress::hdr.inner_tcp.window if egress::hdr.inner_tcp.$valid
    TW29: W48(9)
        # - bit[31..16]: egress::hdr.inner_tcp.checksum if egress::hdr.inner_tcp.$valid
        # - bit[15..0]: egress::hdr.inner_tcp.urgent_ptr if egress::hdr.inner_tcp.$valid
    TW7: W48(12)
        # - bit[31..24]: egress::hdr.inner_icmp.type_ if egress::hdr.inner_icmp.$valid
        # - bit[23..16]: egress::hdr.inner_icmp.code if egress::hdr.inner_icmp.$valid
        # - bit[15..0]: egress::hdr.inner_icmp.hdr_checksum if egress::hdr.inner_icmp.$valid
    W22: W48(13)  # egress::hdr.ipsec_esp.spi if egress::hdr.ipsec_esp.$valid
    W23: W48(13)  # egress::hdr.ipsec_esp.sn if egress::hdr.ipsec_esp.$valid
    W21: W48(10)  # egress::hdr.sip.data if egress::hdr.sip.$valid
  egress_unicast_port: H16(0..8)  # bit[8..0]: egress::eg_intr_md.egress_port
stage 0 ingress:
  dependency: match
  phase0_match IgParser_inner_2.$PORT_METADATA:
    p4:
      name: IgParser_inner_2.$PORT_METADATA
      size: 288
      preferred_match_type: exact
      match_type: exact
    size: 288
    p4_param_order:
      ig_intr_md.ingress_port: { type: exact, size: 9 }
    format: {ig_port_type: 56..58}
    constant_value: 0
    actions:
      set_port_metadata:
      - handle: 0x20020000
      - p4_param_order: { ig_port_type: 3 } 
  hash_action tbl_compute_ip_hash 0:
    p4: { name: tbl_compute_ip_hash, hidden: true }
    row: 0
    bus: 0
    hash_dist:
      0: { hash: 0, mask: 0xffff, shift: 0 }
      1: { hash: 0, mask: 0xffff, shift: 0 }
    input_xbar:
      exact group 0: { 0: ig_md.lkp.ip_src_addr.0-31, 32: ig_md.lkp.ip_src_addr.32-63, 64: ig_md.lkp.ip_src_addr.64-95, 96: ig_md.lkp.ip_src_addr.96-127 }
      exact group 1: { 0: ig_md.lkp.ip_dst_addr.0-31, 32: ig_md.lkp.ip_dst_addr.32-63, 64: ig_md.lkp.ip_dst_addr.64-95, 96: ig_md.lkp.ip_dst_addr.96-127 }
      exact group 2: { 0: ig_md.lkp.l4_dst_port, 16: ig_md.lkp.l4_src_port, 32: ig_md.lkp.ip_proto }
      hash 0:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 168: ig_md.lkp.ip_src_addr.0-31, 200: ig_md.lkp.ip_src_addr.32-63 }, { })), 0..15)
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 232: ig_md.lkp.ip_src_addr.64-95, 264: ig_md.lkp.ip_src_addr.96-127 }, { })), 0..15)
      hash 2:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 40: ig_md.lkp.ip_dst_addr.0-31, 72: ig_md.lkp.ip_dst_addr.32-63 }, { })), 0..15)
      hash 3:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 104: ig_md.lkp.ip_dst_addr.64-95, 136: ig_md.lkp.ip_dst_addr.96-127 }, { })), 0..15)
      hash 4:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 0: ig_md.lkp.l4_src_port, 16: ig_md.lkp.l4_dst_port, 32: ig_md.lkp.ip_proto }, { })), 0..15)
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0x7f64
      exact group 0: { 0: ig_md.lkp.ip_src_addr.0-31, 32: ig_md.lkp.ip_src_addr.32-63, 64: ig_md.lkp.ip_src_addr.64-95, 96: ig_md.lkp.ip_src_addr.96-127 }
      exact group 1: { 0: ig_md.lkp.ip_dst_addr.0-31, 32: ig_md.lkp.ip_dst_addr.32-63, 64: ig_md.lkp.ip_dst_addr.64-95, 96: ig_md.lkp.ip_dst_addr.96-127 }
      exact group 2: { 0: ig_md.lkp.l4_dst_port, 16: ig_md.lkp.l4_src_port, 32: ig_md.lkp.ip_proto }
      hash 0:
        16..31: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 168: ig_md.lkp.ip_src_addr.0-31, 200: ig_md.lkp.ip_src_addr.32-63 }, { })), 16..31)
      hash 1:
        16..31: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 232: ig_md.lkp.ip_src_addr.64-95, 264: ig_md.lkp.ip_src_addr.96-127 }, { })), 16..31)
      hash 2:
        16..31: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 40: ig_md.lkp.ip_dst_addr.0-31, 72: ig_md.lkp.ip_dst_addr.32-63 }, { })), 16..31)
      hash 3:
        16..31: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 104: ig_md.lkp.ip_dst_addr.64-95, 136: ig_md.lkp.ip_dst_addr.96-127 }, { })), 16..31)
      hash 4:
        16..31: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 296, { 0: ig_md.lkp.l4_src_port, 16: ig_md.lkp.l4_dst_port, 32: ig_md.lkp.ip_proto }, { })), 16..31)
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0x24d10000
    gateway:
      name: tbl_compute_ip_hash-gateway
      row: 2
      bus: 0
      unit: 1
      0x0:  cond-73
      miss:  cond-73
      condition: 
        expression: "true(always hit)"
        true:  cond-73
        false:  cond-73
    next: []
    action_bus: { 96..99 : hash_dist(0, 1) }
    instruction: tbl_compute_ip_hash($DEFAULT, $DEFAULT)
    actions:
      compute_ip_hash(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000015
      - next_table: 0
      - set W2, hash_dist(0, 1, 0..31)
    default_action: compute_ip_hash
  gateway cond-73 1:
    name: cond-73
    input_xbar:
      exact group 2: { 64: ig_md.in_ig_port_type }
    row: 4
    bus: 1
    unit: 0
    match: { 0: ig_md.in_ig_port_type }
    0b*****010:  cn78_decap_inner_fabric_bfn_from_cn78
    miss:  tbl_network_tap331
    condition: 
      expression: "(ig_md.in_ig_port_type == 2)"
      true:  cn78_decap_inner_fabric_bfn_from_cn78
      false:  tbl_network_tap331
  ternary_match cn78_decap_inner_fabric_bfn_from_cn78 2:
    p4: { name: Ig_inner_2.cn78_decap_inner.fabric_bfn_from_cn78, size: 1024 }
    gateway:
      name: cond-74
      input_xbar:
        exact group 2: { 92: hdr.fabric_from_cn78.$valid }
      row: 3
      bus: 1
      unit: 0
      match: { 4: hdr.fabric_from_cn78.$valid }
      0b***1: run_table
      miss:  cn78_decap_inner_handle_from_cn78_normal
      condition: 
        expression: "(hdr.fabric_from_cn78.$valid == 1)"
        true:  cn78_decap_inner_fabric_bfn_from_cn78
        false:  cn78_decap_inner_handle_from_cn78_normal
    hit: [  cn78_decap_inner_handle_from_cn78_normal ]
    miss:  cn78_decap_inner_handle_from_cn78_normal
    indirect: cn78_decap_inner_fabric_bfn_from_cn78$tind
  ternary_indirect cn78_decap_inner_fabric_bfn_from_cn78$tind:
    row: 1
    bus: 1
    format: { action: 0..0 }
    instruction: cn78_decap_inner_fabric_bfn_from_cn78$tind(action, $DEFAULT)
    actions:
      Ig_inner_2.cn78_decap_inner.terminate_from_cn78_and_add_fabric(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000001
      - next_table: 0
      - set hdr.fabric.$valid, 1
      - set hdr.ethernet.ether_type, 33278
      - set hdr.fabric.mc_index, 0
      - set hdr.fabric.is_hdr_decap, 0
      - set hdr.fabric.is_trunc_mir, 0
      - set ig_md.action_type, hdr.fabric_from_cn78.action_type
      - set ig_md.port_group_id, hdr.fabric_from_cn78.port_group_id
      - deposit-field W4(16..31), 0, W3
    default_action: Ig_inner_2.cn78_decap_inner.terminate_from_cn78_and_add_fabric
  ternary_match tbl_network_tap331 3:
    p4: { name: tbl_network_tap331 }
    gateway:
      name: cond-75
      input_xbar:
        exact group 2: { 64: ig_md.in_ig_port_type }
      row: 2
      bus: 1
      unit: 0
      match: { 0: ig_md.in_ig_port_type }
      0b*****011: run_table
      miss:  in_ipv6_t_acl$st0
      condition: 
        expression: "(ig_md.in_ig_port_type == 3)"
        true:  tbl_network_tap331
        false:  in_ipv6_t_acl$st0
    hit: [  ip_hdr_location_locate ]
    miss:  ip_hdr_location_locate
    indirect: tbl_network_tap331$tind
  ternary_indirect tbl_network_tap331$tind:
    row: 1
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_network_tap331$tind(action, $DEFAULT)
    actions:
      network_tap331(1, 3):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000007
      - next_table: 0
      - set ig_intr_md_for_tm.bypass_egress, 1
    default_action: network_tap331
  ternary_match in_ipv6_t_acl$st0 4:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    gateway:
      name: cond-76
      input_xbar:
        exact group 2: { 78: hdr.inner_ipv6.$valid, 84: hdr.vlan_tag$0.$valid, 120: hdr.fabric.ig_port_type }
      row: 1
      bus: 1
      unit: 1
      match: { 0: hdr.fabric.ig_port_type, 12: hdr.vlan_tag$0.$valid, 22: hdr.inner_ipv6.$valid }
      0b*1*********1*********001: run_table
      miss:  ip_hdr_location_locate
      condition: 
        expression: "(hdr.fabric.ig_port_type == 1 && hdr.vlan_tag[0].$valid == 1 && hdr.inner_ipv6.$valid == 1)"
        true:  in_ipv6_t_acl$st0
        false:  ip_hdr_location_locate
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st1
    indirect: in_ipv6_t_acl$st0$tind
  ternary_indirect in_ipv6_t_acl$st0$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st0$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(4, 4):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(6, 6):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(8, 8):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(10, 10):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(12, 12):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(14, 14):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(16, 16):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(18, 18):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(22, 22):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(24, 24):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(26, 26):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st0$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 104..107 : $adf_f2, 108..111 : $adf_f3, 112..115 : $adf_f0, 116..119 : $adf_f1 }
stage 1 ingress:
  dependency: match
  exact_match cn78_decap_inner_handle_from_cn78_normal 1:
    p4: { name: Ig_inner_2.cn78_decap_inner.handle_from_cn78_normal, size: 1024 }
    p4_param_order: 
      ig_md.action_type: { type: exact, size: 8, full_size: 8 }
    row: 4
    search_bus: 1
    result_bus: 0
    column: 11
    stash: 
      row: [ 4 ]
      col: [ 11 ]
      unit: [ 0 ]
    ways:
      - [0, 0, 0x0, [4, 11]]
    input_xbar:
      exact group 0: { 13: ig_md.action_type }
      hash 0:
        0..2: ig_md.action_type(0..2)
        3..7: ig_md.action_type(3..7)
      hash group 0:
        table: [0]
        seed: 0x0
    format: { action(0): 0..2, version(0): 112..115 }
    match_group_map: [ [ 0 ] ]
    hit: [  ip_hdr_location_locate ]
    miss:  ip_hdr_location_locate
    action: cn78_decap_inner_handle_from_cn78_normal$action_data($DIRECT, $DEFAULT)
    instruction: cn78_decap_inner_handle_from_cn78_normal(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000002
      - next_table: 0
      - {  }
      Ig_inner_2.cn78_decap_inner.set_duplication(1, 24):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000003
      - next_table: 0
      - {  }
      - set hdr.fabric.is_hit, 1
      - set hdr.fabric.mc_index, ig_md.port_group_id
      Ig_inner_2.cn78_decap_inner.set_redirect(2, 26):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000004
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, ig_md.port_group_id
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.cn78_decap_inner.set_hdr_decap(3, 28):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000005
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.cn78_decap_inner.set_trunc_mir(4, 30):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000006
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action cn78_decap_inner_handle_from_cn78_normal$action_data:
    p4: { name: Ig_inner_2.cn78_decap_inner.handle_from_cn78_normal$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.cn78_decap_inner.set_redirect: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.cn78_decap_inner.set_hdr_decap: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.cn78_decap_inner.set_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63 }
    action_bus: { 112..115 : $adf_f0, 116..119 : $adf_f1 }
  ternary_match in_ipv6_t_acl$st1 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st2
    indirect: in_ipv6_t_acl$st1$tind
  ternary_indirect in_ipv6_t_acl$st1$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st1$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st1$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 2
    column: 2
    vpns: [ 0 ]
    home_row:
    - 2
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 2 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st2 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st3
    indirect: in_ipv6_t_acl$st2$tind
  ternary_indirect in_ipv6_t_acl$st2$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st2$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st2$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st2$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 3 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st3 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st4
    indirect: in_ipv6_t_acl$st3$tind
  ternary_indirect in_ipv6_t_acl$st3$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st3$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st3$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st3$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 4 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st4 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st5
    indirect: in_ipv6_t_acl$st4$tind
  ternary_indirect in_ipv6_t_acl$st4$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st4$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st4$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st4$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 5 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st5 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st6
    indirect: in_ipv6_t_acl$st5$tind
  ternary_indirect in_ipv6_t_acl$st5$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st5$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st5$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st5$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 6 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st6 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st7
    indirect: in_ipv6_t_acl$st6$tind
  ternary_indirect in_ipv6_t_acl$st6$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st6$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st6$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st6$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 7 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st7 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st8
    indirect: in_ipv6_t_acl$st7$tind
  ternary_indirect in_ipv6_t_acl$st7$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st7$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st7$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st7$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 3
    column: 0
    vpns: [ 0 ]
    home_row:
    - 3
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 8 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st8 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  in_ipv6_t_acl$st9
    indirect: in_ipv6_t_acl$st8$tind
  ternary_indirect in_ipv6_t_acl$st8$tind:
    row: 0
    bus: 0
    column: 4
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st8$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st8$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st8$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 14
    column: 4
    vpns: [ 0 ]
    home_row:
    - 14
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
stage 9 ingress:
  dependency: match
  ternary_match in_ipv6_t_acl$st9 0:
    p4: { name: Ig_inner_2.in_ipv6_t.acl, size: 10240 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: ternary, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: ternary, size: 128, full_size: 128, key_name: "in_dst_addr" }
      ig_md.lkp.inner_l4_src_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      ig_md.lkp.inner_l4_dst_port: { type: ternary, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: ternary, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    match:
    - { group: 0, byte_group: 2, byte_config: 1, dirtcam: 0x555 }
    - { group: 1, byte_config: 3, dirtcam: 0x155 }
    - { group: 2, dirtcam: 0x155 }
    - { group: 3, dirtcam: 0x155 }
    - { group: 4, dirtcam: 0x155 }
    - { group: 5, dirtcam: 0x155 }
    - { group: 6, dirtcam: 0x155 }
    - { group: 7, dirtcam: 0x55 }
    hit: [  ip_hdr_location_locate ]
    miss:  ip_hdr_location_locate
    indirect: in_ipv6_t_acl$st9$tind
  ternary_indirect in_ipv6_t_acl$st9$tind:
    row: 1
    bus: 0
    column: 4
    input_xbar:
      ternary group 0: { 0: hdr.inner_ipv6.src_addr.0-31, 32: hdr.inner_ipv6.src_addr.32-63(0..7) }
      ternary group 1: { 0: hdr.inner_ipv6.src_addr.32-63(16..31), 16: hdr.inner_ipv6.src_addr.64-95(0..7), 24: hdr.inner_ipv6.src_addr.32-63(8..15), 32: hdr.inner_ipv6.src_addr.64-95(16..23) }
      ternary group 2: { 0: hdr.inner_ipv6.src_addr.64-95(24..31), 8: hdr.inner_ipv6.src_addr.96-127(0..7), 16: hdr.inner_ipv6.src_addr.64-95(8..15), 24: hdr.inner_ipv6.src_addr.96-127(16..31) }
      ternary group 3: { 0: hdr.inner_ipv6.src_addr.96-127(8..15), 8: hdr.inner_ipv6.dst_addr.0-31(16..31), 24: hdr.inner_ipv6.dst_addr.0-31(0..15) }
      ternary group 4: { 0: hdr.inner_ipv6.dst_addr.32-63(16..31), 16: hdr.inner_ipv6.dst_addr.32-63(0..15), 32: hdr.inner_ipv6.dst_addr.64-95(16..23) }
      ternary group 5: { 0: hdr.inner_ipv6.dst_addr.64-95(0..15), 16: hdr.inner_ipv6.dst_addr.96-127(16..23), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.96-127(0..7) }
      ternary group 6: { 0: hdr.inner_ipv6.dst_addr.96-127(8..15), 8: ig_md.lkp.inner_l4_src_port(0..7), 16: hdr.inner_ipv6.dst_addr.96-127(24..31), 24: ig_md.lkp.inner_l4_dst_port(0..7), 32: ig_md.lkp.inner_l4_src_port(8..15) }
      ternary group 7: { 0: ig_md.lkp.inner_l4_dst_port(8..15), 8: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.next_hdr }
      byte group 2: { 6: hdr.fabric.is_hit }
    format: { action: 0..5 }
    action: in_ipv6_t_acl$st9$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_t_acl$st9$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000008
      - next_table: 0
      - {  }
      Ig_inner_2.in_ipv6_t.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000009
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000a
      - next_table: 0
      - { count_idx.0-15: $adf_f0(0..15), $data0: $adf_b2(0..3), count_idx.16-17: $data0(0..1), $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_b3(0..3), $constant1: $mask0(0..1), $constant1: 3, $constant2: $mask0(3..3), $constant2: 1, $data1: $adf_f2(28..30), $constant4: $data1(0..0), $constant4: 1, $constant3: $data1(2..2), $constant3: 1, $mask1: $adf_f3(28..30), $constant5: $mask1(0..0), $constant5: 1, $constant6: $mask1(2..2), $constant6: 1 }
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - bitmasked-set B4, $data0, B4
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000b
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000c
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000d
      - next_table: 0
      - {  }
      - set W5(29..30), 3
      Ig_inner_2.in_ipv6_t.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000e
      - next_table: 0
      - { $data0: $adf_f0(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f1(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000000f
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000010
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, mc_idx: $adf_f2(0..15) }
      - set hdr.fabric.mc_index, mc_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000011
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000012
      - next_table: 0
      - { $data0: $adf_b0(0..2), count_idx.16-17: $data0(0..1), $constant0: $data0(2..2), $constant0: 1, $data1: $adf_f2(28..30), $constant2: $data1(0..0), $constant2: 1, $constant1: $data1(2..2), $constant1: 1, $mask0: $adf_f3(28..30), $constant3: $mask0(0..0), $constant3: 1, $constant4: $mask0(2..2), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set B4(0..2), $data0
      - bitmasked-set W5, $data1, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000013
      - next_table: 0
      - { $data0: $adf_f0(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f1(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f2(0..15) }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W5, $data0, W5
      Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000014
      - next_table: 0
      - { count_idx.16-17: $adf_b0(0..1), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, vlan_idx: $adf_f1(0..15), count_idx.0-15: $adf_f1(16..31) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index.0-15, count_idx.0-15
      - set hdr.fabric.count_index.16-17, count_idx.16-17
      - bitmasked-set W5, $data0, W5
    default_action: NoAction
  action in_ipv6_t_acl$st9$action_data:
    p4: { name: Ig_inner_2.in_ipv6_t.acl$action }
    row: 14
    column: 4
    vpns: [ 0 ]
    home_row:
    - 14
    format Ig_inner_2.in_ipv6_t.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.drop_and_count: { $adf_f0: 0..31, $adf_b2: 16..23, $adf_b3: 24..31, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Ig_inner_2.in_ipv6_t.redirect_port: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.redirect_port_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_modify_mac: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_modify_mac_and_count: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.set_mc: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_trunc_mir_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95 }
    format Ig_inner_2.in_ipv6_t.forward_and_decap_pkt_hdr_and_cnt: { $adf_b0: 0..7, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 16 : $adf_b0, 18 : $adf_b2, 19 : $adf_b3, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }
  ternary_match ip_hdr_location_locate 1:
    p4: { name: Ig_inner_2.ip_hdr_location.locate, size: 2048 }
    p4_param_order: 
      hdr.ethernet.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.vlan_tag$0.$valid: { type: ternary, size: 1, full_size: 1 }
      hdr.vlan_tag$1.$valid: { type: ternary, size: 1, full_size: 1 }
      hdr.vlan_tag$2.$valid: { type: ternary, size: 1, full_size: 1 }
      hdr.vlan_tag$3.$valid: { type: ternary, size: 1, full_size: 1 }
      hdr.mpls$0.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.ipv4.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.ipv6.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.tcp.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.udp.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.sctp.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.gre.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.pppoe.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.gtpv1_8b.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.gtpv1_12b.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.gtpv2_8b.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.gtpv2_12b.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.vxlan.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.inner_ethernet.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.inner_ipv4.$valid: { type: exact, size: 1, full_size: 1 }
      hdr.inner_ipv6.$valid: { type: exact, size: 1, full_size: 1 }
    row: [ 8, 9, 10, 11, 8, 9, 10, 11 ]
    bus: [ 0, 0, 0, 0, 1, 1, 1, 1 ]
    column:
    - 0
    - 0
    - 0
    - 0
    - 1
    - 1
    - 1
    - 1
    input_xbar:
      ternary group 8: { 1: hdr.ethernet.$valid, 2: hdr.ipv4.$valid, 3: hdr.tcp.$valid, 4: hdr.gtpv2_8b.$valid, 8: hdr.inner_ipv4.$valid, 14: hdr.inner_ipv6.$valid, 15: hdr.gtpv2_12b.$valid, 16: hdr.udp.$valid, 17: hdr.vxlan.$valid, 18: hdr.inner_ethernet.$valid, 19: hdr.gtpv1_8b.$valid, 20: hdr.gtpv1_12b.$valid, 22: hdr.pppoe.$valid, 24: hdr.sctp.$valid, 25: hdr.gre.$valid, 26: hdr.ipv6.$valid, 33: hdr.vlan_tag$3.$valid, 34: hdr.vlan_tag$2.$valid, 35: hdr.vlan_tag$1.$valid, 36: hdr.vlan_tag$0.$valid }
      byte group 0: { 3: hdr.mpls$0.$valid }
    match:
    - { group: 8, byte_group: 0, byte_config: 0, dirtcam: 0x555 }
    - { byte_config: 3, dirtcam: 0x0 }
    hit: [  tbl_add_bridged_md_pipe_2 ]
    miss:  tbl_add_bridged_md_pipe_2
    indirect: ip_hdr_location_locate$tind
  ternary_indirect ip_hdr_location_locate$tind:
    row: 0
    bus: 0
    column: 4
    input_xbar:
      ternary group 8: { 1: hdr.ethernet.$valid, 2: hdr.ipv4.$valid, 3: hdr.tcp.$valid, 4: hdr.gtpv2_8b.$valid, 8: hdr.inner_ipv4.$valid, 14: hdr.inner_ipv6.$valid, 15: hdr.gtpv2_12b.$valid, 16: hdr.udp.$valid, 17: hdr.vxlan.$valid, 18: hdr.inner_ethernet.$valid, 19: hdr.gtpv1_8b.$valid, 20: hdr.gtpv1_12b.$valid, 22: hdr.pppoe.$valid, 24: hdr.sctp.$valid, 25: hdr.gre.$valid, 26: hdr.ipv6.$valid, 33: hdr.vlan_tag$3.$valid, 34: hdr.vlan_tag$2.$valid, 35: hdr.vlan_tag$1.$valid, 36: hdr.vlan_tag$0.$valid }
      byte group 0: { 3: hdr.mpls$0.$valid }
    format: { action: 0..0, immediate: 1..24 }
    action_bus: { 2 : immediate(16..23), 32..33 : immediate(0..15) }
    instruction: ip_hdr_location_locate$tind(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000016
      - next_table: 0
      - {  }
      Ig_inner_2.ip_hdr_location.set_ip_hdr_location(1, 3):
      - p4_param_order: { len_before_ip: 8, proto_type: 8, tunnel_type: 6, trunc_type: 2 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000017
      - next_table: 0
      - { $data0: immediate(0..15), len_before_ip: $data0(0..7), proto_type: $data0(8..15), tunnel_type.0-4: immediate(16..20), trunc_type: immediate(21..22), tunnel_type.5-5: immediate(23..23) }
      - set ig_md.tunnel_type.0-4, tunnel_type.0-4
      - set ig_md.tunnel_type.5-5, tunnel_type.5-5
      - set ig_md.trunc_type, trunc_type
      - set H3, $data0
    default_action: NoAction
  ternary_match tbl_add_bridged_md_pipe_2 2:
    p4: { name: tbl_add_bridged_md_pipe_2 }
    gateway:
      name: cond-79
      input_xbar:
        exact group 0: { 5: ig_intr_md_for_tm.bypass_egress }
      row: 0
      bus: 1
      unit: 0
      match: { 5: ig_intr_md_for_tm.bypass_egress }
      0b**0: run_table
      miss:  lag_inner_last_lag
      condition: 
        expression: "(ig_intr_md_for_tm.bypass_egress == 0)"
        true:  tbl_add_bridged_md_pipe_2
        false:  lag_inner_last_lag
    hit: [  lag_inner_last_lag ]
    miss:  lag_inner_last_lag
    indirect: tbl_add_bridged_md_pipe_2$tind
  ternary_indirect tbl_add_bridged_md_pipe_2$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: tbl_add_bridged_md_pipe_2$tind(action, $DEFAULT)
    actions:
      add_bridged_md_pipe(1, 5):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000001e
      - next_table: 0
      - set hdr.bridged_md.$valid, 1
    default_action: add_bridged_md_pipe
stage 10 ingress:
  dependency: match
  exact_match lag_inner_last_lag 1:
    p4: { name: Ig_inner_2.lag_inner_last.lag, size: 256, action_profile: Ig_inner_2.lag_inner_last.lag_selector }
    p4_param_order: 
      hdr.fabric.is_to_cn78: { type: exact, size: 1, full_size: 1, key_name: "is_to_cn78" }
      hdr.fabric.is_to_td3: { type: exact, size: 1, full_size: 1, key_name: "is_to_td3" }
    row: 1
    search_bus: 1
    result_bus: 0
    column: 6
    stash: 
      row: [ 1 ]
      col: [ 6 ]
      unit: [ 0 ]
    ways:
      - [1, 0, 0x0, [1, 6]]
    input_xbar:
      exact group 1: { 92: hdr.fabric.is_to_td3, 93: hdr.fabric.is_to_cn78 }
      hash 3:
        0: hdr.fabric.is_to_td3
        1: hdr.fabric.is_to_cn78
      hash group 1:
        table: [3]
        seed: 0x0
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 2..11, meter_pfe(0): 12..12, action_addr(0): 13..23 }
    match_group_map: [ [ 0 ] ]
    gateway:
      name: cond-78
      input_xbar:
        exact group 1: { 32: hdr.fabric.mc_index }
      row: 1
      bus: 1
      unit: 0
      match: { 0: hdr.fabric.mc_index(0..7), 8: hdr.fabric.mc_index(8..15) }
      0x0000: run_table
      miss:  truncate_mirror
      condition: 
        expression: "(hdr.fabric.mc_index == 0)"
        true:  lag_inner_last_lag
        false:  truncate_mirror
    hit: [  truncate_mirror ]
    miss:  truncate_mirror
    selector: lag_inner_last_lag$selector.Ig_inner_2.lag_inner_last.lag_selector_sel(meter_addr, meter_pfe, $DEFAULT)
    selector_length: lag_inner_last_lag$selector.Ig_inner_2.lag_inner_last.lag_selector_sel($DEFAULT, $DEFAULT)
    action: lag_inner_last_lag$action_data.Ig_inner_2.lag_inner_last.lag_selector(action_addr, $DEFAULT)
    instruction: lag_inner_last_lag(action, $DEFAULT)
    actions:
      Ig_inner_2.lag_inner_last.lag_miss(1, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000001c
      - next_table: 0
      - {  }
      Ig_inner_2.lag_inner_last.set_lag_port(2, 1):
      - p4_param_order: { port: 9 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000001d
      - next_table: 0
      - { port: $adf_h0(0..8) }
      - set ig_intr_md_for_tm.ucast_egress_port, port
    default_action: Ig_inner_2.lag_inner_last.lag_miss
  selection lag_inner_last_lag$selector.Ig_inner_2.lag_inner_last.lag_selector_sel:
    p4: { name: Ig_inner_2.lag_inner_last.lag_selector_sel, size: 4 }
    row: 15
    column: [ 3, 4 ]
    maprams: [ 3, 4 ]
    input_xbar:
      exact group 2: { 0: ig_md.hash(0..15) }
      hash 4:
        0..13: ig_md.hash(0..13)
      hash group 2:
        table: [4]
        seed: 0x0
    mode: fair 0
    non_linear: true
    pool_sizes: [120]
  action lag_inner_last_lag$action_data.Ig_inner_2.lag_inner_last.lag_selector:
    p4: { name: Ig_inner_2.lag_inner_last.lag_selector, size: 1024 }
    row: 13
    column: 3
    vpns: [ 0 ]
    home_row:
    - 13
    format Ig_inner_2.lag_inner_last.set_lag_port: { $adf_h0: 0..15 }
    action_bus: { 36..37 : $adf_h0 }
  stateful lag_inner_last_lag$salu.Ig_inner_2.lag_inner_last.lag_selector_sel$salu:
    p4: { name: Ig_inner_2.lag_inner_last.lag_selector_sel$salu, size: 131072, hidden: true }
    selection_table: lag_inner_last_lag$selector.Ig_inner_2.lag_inner_last.lag_selector_sel
    row: 15
    column: [ 3, 4 ]
    maprams: [ 3, 4 ]
    format: { lo: 1 }
    actions:
      set_bit_at_alu$0:
      - set_bit_at
      clr_bit_at_alu$0:
      - clr_bit_at
stage 11 ingress:
  dependency: concurrent
  exact_match truncate_mirror 0:
    p4: { name: Ig_inner_2.truncate.mirror, size: 512, action_profile: Ig_inner_2.truncate.lag_selector }
    p4_param_order: 
      ig_md.trunc_type: { type: exact, size: 2, full_size: 2, key_name: "trunc_type" }
    row: 5
    bus: 1
    column: 4
    stash: 
      row: [ 5 ]
      col: [ 4 ]
      unit: [ 0 ]
    ways:
      - [0, 0, 0x0, [5, 4]]
    input_xbar:
      exact group 0: { 6: ig_md.trunc_type }
      hash 0:
        0..1: ig_md.trunc_type
      hash group 0:
        table: [0]
        seed: 0x0
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 2..11, meter_pfe(0): 12..12, action_addr(0): 13..23 }
    match_group_map: [ [ 0 ] ]
    gateway:
      name: cond-77
      input_xbar:
        exact group 0: { 10: hdr.fabric.is_trunc_mir }
      row: 5
      bus: 1
      unit: 0
      match: { 2: hdr.fabric.is_trunc_mir }
      0b*****1: run_table
      miss:  mc_duplicate
      condition: 
        expression: "(hdr.fabric.is_trunc_mir == 1)"
        true:  truncate_mirror
        false:  mc_duplicate
    hit: [  mc_duplicate ]
    miss:  mc_duplicate
    selector: truncate_mirror$selector.Ig_inner_2.truncate.lag_selector_sel(meter_addr, meter_pfe, $DEFAULT)
    selector_length: truncate_mirror$selector.Ig_inner_2.truncate.lag_selector_sel($DEFAULT, $DEFAULT)
    action: truncate_mirror$action_data.Ig_inner_2.truncate.lag_selector(action_addr, $DEFAULT)
    instruction: truncate_mirror(action, $DEFAULT)
    actions:
      NoAction(1, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000001a
      - next_table: 0
      - {  }
      Ig_inner_2.truncate.set_lag_session(2, 1):
      - p4_param_order: { session_id: 10 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000001b
      - next_table: 0
      - { session_id: $adf_h0(0..9) }
      - set ig_intr_md_for_dprsr.drop_ctl, 1
      - set ig_md.mirror.src, 1
      - set ig_md.mirror.type, 5
      - set ig_md.mirror.session_id, session_id
      - set ig_intr_md_for_dprsr.mirror_type, 5
    default_action: NoAction
  selection truncate_mirror$selector.Ig_inner_2.truncate.lag_selector_sel:
    p4: { name: Ig_inner_2.truncate.lag_selector_sel, size: 4 }
    row: 15
    column: [ 2, 3 ]
    maprams: [ 2, 3 ]
    input_xbar:
      exact group 0: { 64: ig_md.hash(0..15) }
      hash 1:
        0..13: ig_md.hash(0..13)
      hash group 1:
        table: [1]
        seed: 0x0
    mode: fair 0
    non_linear: true
    pool_sizes: [120]
  action truncate_mirror$action_data.Ig_inner_2.truncate.lag_selector:
    p4: { name: Ig_inner_2.truncate.lag_selector, size: 1024 }
    row: 13
    column: 2
    vpns: [ 0 ]
    home_row:
    - 13
    format Ig_inner_2.truncate.set_lag_session: { $adf_h0: 0..15 }
    action_bus: { 32..33 : $adf_h0 }
  stateful truncate_mirror$salu.Ig_inner_2.truncate.lag_selector_sel$salu:
    p4: { name: Ig_inner_2.truncate.lag_selector_sel$salu, size: 131072, hidden: true }
    selection_table: truncate_mirror$selector.Ig_inner_2.truncate.lag_selector_sel
    row: 15
    column: [ 2, 3 ]
    maprams: [ 2, 3 ]
    format: { lo: 1 }
    actions:
      set_bit_at_alu$0:
      - set_bit_at
      clr_bit_at_alu$0:
      - clr_bit_at
  exact_match mc_duplicate 1:
    p4: { name: Ig_inner_2.mc.duplicate, size: 65536 }
    p4_param_order: 
      hdr.fabric.mc_index: { type: exact, size: 16, full_size: 16 }
    row: [ 7, 6, 5 ]
    bus: [ 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7 ]
    - [ 2, 3, 4, 5, 6, 7 ]
    - [ 2, 3 ]
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - [2, 0, 0x1, [7, 2], [7, 3]]
      - [2, 1, 0x2, [7, 4], [7, 5]]
      - [2, 2, 0x4, [7, 6], [7, 7]]
      - [2, 3, 0x8, [6, 2], [6, 3]]
      - [2, 0, 0x1, [6, 4], [6, 5]]
      - [2, 1, 0x2, [6, 6], [6, 7]]
      - [2, 2, 0x4, [5, 2], [5, 3]]
    input_xbar:
      exact group 1: { 0: hdr.fabric.mc_index }
      hash 2:
        0..7: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(0..7)
        8..9: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(8..9)
        40: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(10)
        11..18: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(0..7)
        19: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(8)
        10: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(10)
        41: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(9)
        22..29: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(0..7)
        20..21: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(9..10)
        42: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(8)
        33..39: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(0..6)
        30..32: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(8..10)
        43: random(hdr.fabric.mc_index(11..15)) ^ hdr.fabric.mc_index(7)
      hash group 2:
        table: [2]
        seed: 0xf63800a4eec
    format: { action(0): 0..0, version(0): 112..115, match(0): 35..39, action(1): 1..1, version(1): 116..119, match(1): 43..47, action(2): 2..2, version(2): 120..123, match(2): 51..55, action(3): 3..3, version(3): 124..127, match(3): 59..63, action(4): 4..4, version(4): 8..11, match(4): 67..71 }
    match: [ hdr.fabric.mc_index(11..15) ]
    match_group_map: [ [ 0, 1, 2, 3, 4 ] ]
    hit: [  END ]
    miss:  END
    action: mc_duplicate$action_data($DIRECT, $DEFAULT)
    instruction: mc_duplicate(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000018
      - next_table: 0
      - {  }
      Ig_inner_2.mc.set_mgid(1, 2):
      - p4_param_order: { mgid: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000019
      - next_table: 0
      - { mgid: $adf_h0(0..15) }
      - set ig_intr_md_for_tm.mcast_grp_b, mgid
      - set ig_intr_md_for_tm.level1_mcast_hash, ig_md.hash(0..12)
      - set ig_intr_md_for_tm.level2_mcast_hash, ig_md.hash(16..28)
    default_action: NoAction
  action mc_duplicate$action_data:
    p4: { name: Ig_inner_2.mc.duplicate$action }
    row: [ 15, 13, 11 ]
    word: [ 0, 0, 0 ]
    column:
    - [ 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 0, 1, 2, 3 ]
    vpns: 
    - [ 0, 1 ]
    - [ 2, 3, 4 ]
    - [ 5, 6, 7, 8 ]
    home_row:
    - 15
    format Ig_inner_2.mc.set_mgid: { $adf_h0: 0..15 }
    action_bus: { 36..37 : $adf_h0 }
stage 0 egress:
  dependency: match
  gateway cond-80 5:
    name: cond-80
    input_xbar:
      exact group 2: { 96: eg_md.in_ig_port_type }
    row: 1
    bus: 0
    unit: 0
    match: { 0: eg_md.in_ig_port_type }
    0b*****101:  fabric_decap_inner_decap
    miss:  in_ipv6_e_acl_2$st0
    condition: 
      expression: "(eg_md.in_ig_port_type == 5)"
      true:  fabric_decap_inner_decap
      false:  in_ipv6_e_acl_2$st0
  ternary_match fabric_decap_inner_decap 6:
    p4: { name: Eg_inner_2.fabric_decap_inner.decap, size: 128 }
    gateway:
      name: cond-81
      input_xbar:
        exact group 3: { 27: hdr.fabric.$valid }
      row: 0
      bus: 1
      unit: 1
      match: { 3: hdr.fabric.$valid }
      0b****1: run_table
      miss:  cn78_encap_inner_fabric_bfn_to_cn78
      condition: 
        expression: "(hdr.fabric.$valid == 1)"
        true:  fabric_decap_inner_decap
        false:  cn78_encap_inner_fabric_bfn_to_cn78
    hit: [  cn78_encap_inner_fabric_bfn_to_cn78 ]
    miss:  cn78_encap_inner_fabric_bfn_to_cn78
    indirect: fabric_decap_inner_decap$tind
  ternary_indirect fabric_decap_inner_decap$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: fabric_decap_inner_decap$tind(action, $DEFAULT)
    actions:
      Eg_inner_2.fabric_decap_inner.remove_fabric(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000001f
      - next_table: 0
      - set hdr.fabric.$valid, 0
      - set hdr.ethernet.ether_type, hdr.fabric.ether_type
    default_action: Eg_inner_2.fabric_decap_inner.remove_fabric
  exact_match in_ipv6_e_acl_2$st0 7:
    p4: { name: Eg_inner_2.in_ipv6_e.acl, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
      eg_md.lkp.inner_l4_src_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      eg_md.lkp.inner_l4_dst_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: exact, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [1, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [1, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [1, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [1, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [1, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [1, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 3: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 32: hdr.inner_ipv6.src_addr.32-63(0..23), 62: hdr.fabric.is_hit, 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.0-31(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.32-63(24..31) }
      exact group 4: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.64-95(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.96-127(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.0-31(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.32-63(24..31) }
      exact group 5: { 0: hdr.vlan_tag$0.vid, 16: eg_md.lkp.inner_l4_src_port(0..7), 24: hdr.inner_ipv6.dst_addr.64-95(24..31), 32: eg_md.lkp.inner_l4_dst_port(0..7), 40: eg_md.lkp.inner_l4_src_port(8..15), 48: hdr.inner_ipv6.next_hdr, 56: hdr.inner_ipv6.dst_addr.96-127(24..31), 72: eg_md.lkp.inner_l4_dst_port(8..15) }
      hash 6:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.fabric.is_hit)
      hash 7:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.32-63(24..31))
      hash 8:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.src_addr.96-127(24..31))
      hash 9:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31))
      hash 10:
        0..3: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        4..9: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..5)
        40..41: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        11..14: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        15..19: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..4)
        10: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(5)
        42..43: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        22..25: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        26..29: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..3)
        20..21: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(4..5)
        44..45: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        33..36: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        37..39: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..2)
        30..32: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(3..5)
        46..47: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.64-95(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
      hash 11:
        0..9: random(eg_md.lkp.inner_l4_dst_port(8..15))
        40..41: random(eg_md.lkp.inner_l4_dst_port(8..15))
        10..19: random(eg_md.lkp.inner_l4_dst_port(8..15))
        42..43: random(eg_md.lkp.inner_l4_dst_port(8..15))
        20..29: random(eg_md.lkp.inner_l4_dst_port(8..15))
        44..45: random(eg_md.lkp.inner_l4_dst_port(8..15))
        30..39: random(eg_md.lkp.inner_l4_dst_port(8..15))
        46..47: random(eg_md.lkp.inner_l4_dst_port(8..15))
      hash group 1:
        table: [6, 7, 8, 9, 10, 11]
        seed: 0x923c1cbfc7f
    format: { action(0): 0..5, version(0): 88..91, match(0): [94..95, 32..71, 246..246, 160..239, 128..135, 288..295, 136..159, 296..367, 256..279, 72..79, 280..287, 368..383, 80..87 ] }
    match: [ hdr.inner_ipv6.next_hdr(6..7), hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_dst_port(8..15), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    gateway:
      name: cond-83
      input_xbar:
        exact group 5: { 68: hdr.vlan_tag$0.$valid, 88: hdr.fabric.ig_port_type, 110: hdr.inner_ipv6.$valid }
      row: 0
      bus: 0
      unit: 0
      match: { 0: hdr.fabric.ig_port_type, 12: hdr.vlan_tag$0.$valid, 22: hdr.inner_ipv6.$valid }
      0b*1*********1*********001: run_table
      miss:  END
      condition: 
        expression: "(hdr.fabric.ig_port_type == 1 && hdr.vlan_tag[0].$valid == 1 && hdr.inner_ipv6.$valid == 1)"
        true:  in_ipv6_e_acl_2$st0
        false:  END
    hit: [  END ]
    miss:  in_ipv6_e_acl_2$st1
    action: in_ipv6_e_acl_2$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_2$st0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000021
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(2, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000022
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(4, 4):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000023
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(6, 6):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000024
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(8, 8):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000025
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(10, 10):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000026
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000027
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(14, 14):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000028
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(16, 16):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000029
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(18, 18):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002a
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(20, 20):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002b
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(22, 22):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002c
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(24, 24):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002d
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_2$st0$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 120..123 : $adf_f2, 124..127 : $adf_f3, 64..67 : $adf_f0, 68..71 : $adf_f1 }
stage 1 egress:
  dependency: match
  ternary_match cn78_encap_inner_fabric_bfn_to_cn78 2:
    p4: { name: Eg_inner_2.cn78_encap_inner.fabric_bfn_to_cn78, size: 1024 }
    gateway:
      name: cond-82
      input_xbar:
        exact group 0: { 29: hdr.fabric.is_to_cn78 }
      row: 4
      bus: 1
      unit: 0
      match: { 5: hdr.fabric.is_to_cn78 }
      0b**1: run_table
      miss:  END
      condition: 
        expression: "(hdr.fabric.is_to_cn78 == 1)"
        true:  cn78_encap_inner_fabric_bfn_to_cn78
        false:  END
    hit: [  END ]
    miss:  END
    indirect: cn78_encap_inner_fabric_bfn_to_cn78$tind
  ternary_indirect cn78_encap_inner_fabric_bfn_to_cn78$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: cn78_encap_inner_fabric_bfn_to_cn78$tind(action, $DEFAULT)
    actions:
      Eg_inner_2.cn78_encap_inner.bfn_to_cn78(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000020
      - next_table: 0
      - set hdr.fabric_to_cn78.$valid, 1
      - set hdr.fabric_to_cn78.ether_type, hdr.ethernet.ether_type
      - set hdr.ethernet.ether_type, 33279
    default_action: Eg_inner_2.cn78_encap_inner.bfn_to_cn78
  exact_match in_ipv6_e_acl_2$st1 3:
    p4: { name: Eg_inner_2.in_ipv6_e.acl, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
      eg_md.lkp.inner_l4_src_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      eg_md.lkp.inner_l4_dst_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
      hdr.inner_ipv6.next_hdr: { type: exact, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [1, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [1, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [1, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [1, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [1, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [1, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 1: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 2: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 3: { 0: hdr.vlan_tag$0.vid, 16: eg_md.lkp.inner_l4_src_port(0..7), 24: hdr.inner_ipv6.dst_addr.96-127(24..31), 32: eg_md.lkp.inner_l4_dst_port(0..7), 40: eg_md.lkp.inner_l4_src_port(8..15), 48: hdr.inner_ipv6.next_hdr, 56: eg_md.lkp.inner_l4_dst_port(8..15) }
      hash 2:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 4:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 5:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 6:
        0..3: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..11)
        4..9: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(0..5)
        40..41: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15))
        11..14: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..11)
        15..19: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(0..4)
        10: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(5)
        42..43: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15))
        22..25: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..11)
        26..29: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(0..3)
        20..21: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(4..5)
        44..45: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15))
        33..36: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..11)
        37..39: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(0..2)
        30..32: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.inner_ipv6.next_hdr(3..5)
        46..47: random(hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), hdr.inner_ipv6.next_hdr(6..7), eg_md.lkp.inner_l4_dst_port(8..15))
      hash group 1:
        table: [2, 3, 4, 5, 6]
        seed: 0x1d01fd8930e
    format: { action(0): 0..5, version(0): 80..83, match(0): [86..87, 32..71, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 72..79 ] }
    match: [ hdr.inner_ipv6.next_hdr(6..7), hdr.vlan_tag$0.vid(0..7), eg_md.lkp.inner_l4_src_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_dst_port(8..15), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_1$st0
    action: in_ipv6_e_acl_2$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_2$st1(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000021
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(2, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000022
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(4, 4):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000023
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(6, 6):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000024
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(8, 8):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000025
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(10, 10):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000026
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000027
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(14, 14):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000028
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(16, 16):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000029
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(18, 18):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002a
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(20, 20):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002b
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(22, 22):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002c
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(24, 24):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002d
      - next_table_miss:  in_ipv6_e_acl_1$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_2$st1$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl$action }
    row: [ 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 3, 4, 5 ]
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2, 3, 4, 5, 6 ]
    - [ 7, 8, 9 ]
    - [ 10, 11, 12, 13, 14, 15 ]
    - [ 16, 17, 18 ]
    home_row:
    - 7
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 120..123 : $adf_f2, 124..127 : $adf_f3, 64..67 : $adf_f0, 68..71 : $adf_f1 }
stage 2 egress:
  dependency: match
  exact_match in_ipv6_e_acl_1$st0 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_4, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
      eg_md.lkp.inner_l4_src_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      eg_md.lkp.inner_l4_dst_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [0, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [0, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [0, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [0, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 2: { 0: hdr.vlan_tag$0.vid, 16: eg_md.lkp.inner_l4_src_port(0..7), 24: hdr.inner_ipv6.dst_addr.96-127(24..31), 32: eg_md.lkp.inner_l4_dst_port(0..7), 40: eg_md.lkp.inner_l4_src_port(8..15), 56: eg_md.lkp.inner_l4_dst_port(8..15) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 4:
        0..5: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        6..9: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..11)
        40..41: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
        11..16: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        17..19: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..10)
        10: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(11)
        42..43: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
        22..27: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        28..29: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..9)
        20..21: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(10..11)
        44..45: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
        33..38: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        39: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8)
        30..32: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(9..11)
        46..47: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0x7f91152fffff
    format: { action(0): 0..5, version(0): 72..75, match(0): [78..79, 32..63, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 64..71 ] }
    match: [ hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_dst_port(8..15), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_1$st1
    action: in_ipv6_e_acl_1$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_1$st0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000002e
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002f
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000030
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000031
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000032
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000033
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000034
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000035
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000036
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000037
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000038
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000039
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003a
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_1$st0$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_4$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 3 egress:
  dependency: match
  exact_match in_ipv6_e_acl_1$st1 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_4, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
      eg_md.lkp.inner_l4_src_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_src_port" }
      eg_md.lkp.inner_l4_dst_port: { type: exact, size: 16, full_size: 16, key_name: "in_l4_dst_port" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [0, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [0, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [0, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [0, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 2: { 0: hdr.vlan_tag$0.vid, 16: eg_md.lkp.inner_l4_src_port(0..7), 24: hdr.inner_ipv6.dst_addr.96-127(24..31), 32: eg_md.lkp.inner_l4_dst_port(0..7), 40: eg_md.lkp.inner_l4_src_port(8..15), 56: eg_md.lkp.inner_l4_dst_port(8..15) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 4:
        0..5: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        6..9: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..11)
        40..41: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
        11..16: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        17..19: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..10)
        10: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(11)
        42..43: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
        22..27: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        28..29: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8..9)
        20..21: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(10..11)
        44..45: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
        33..38: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(0..5)
        39: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(8)
        30..32: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15)) ^ hdr.vlan_tag$0.vid(9..11)
        46..47: random(hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), hdr.inner_ipv6.dst_addr.96-127(24..31), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(8..15))
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0x472a058ede7f
    format: { action(0): 0..5, version(0): 72..75, match(0): [78..79, 32..63, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 64..71 ] }
    match: [ hdr.vlan_tag$0.vid(6..7), eg_md.lkp.inner_l4_src_port(0..7), eg_md.lkp.inner_l4_src_port(8..15), eg_md.lkp.inner_l4_dst_port(0..7), eg_md.lkp.inner_l4_dst_port(8..15), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_0$st0
    action: in_ipv6_e_acl_1$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_1$st1(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000002e
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000002f
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000030
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000031
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000032
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000033
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000034
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000035
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000036
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000037
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000038
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000039
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003a
      - next_table_miss:  in_ipv6_e_acl_0$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_1$st1$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_4$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 4 egress:
  dependency: match
  exact_match in_ipv6_e_acl_0$st0 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_3, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
      hdr.inner_ipv6.next_hdr: { type: exact, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [0, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [0, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [0, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [0, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 2: { 0: hdr.vlan_tag$0.vid, 16: hdr.inner_ipv6.next_hdr, 24: hdr.inner_ipv6.dst_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 4:
        0..3: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        4..9: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..5)
        40..41: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        11..14: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        15..19: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..4)
        10: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(5)
        42..43: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        22..25: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        26..29: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..3)
        20..21: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(4..5)
        44..45: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        33..36: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        37..39: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..2)
        30..32: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(3..5)
        46..47: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0xfd025c2f5bff
    format: { action(0): 0..5, version(0): 48..51, match(0): [54..55, 32..39, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 40..47 ] }
    match: [ hdr.inner_ipv6.next_hdr(6..7), hdr.vlan_tag$0.vid(0..7), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_0$st1
    action: in_ipv6_e_acl_0$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_0$st0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000003b
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003c
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003d
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003e
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003f
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000040
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000041
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000042
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000043
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000044
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000045
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000046
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000047
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_0$st0$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_3$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 5 egress:
  dependency: match
  exact_match in_ipv6_e_acl_0$st1 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_3, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
      hdr.inner_ipv6.next_hdr: { type: exact, size: 8, full_size: 8, key_name: "in_ip_proto" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [0, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [0, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [0, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [0, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 2: { 0: hdr.vlan_tag$0.vid, 16: hdr.inner_ipv6.next_hdr, 24: hdr.inner_ipv6.dst_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 4:
        0..3: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        4..9: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..5)
        40..41: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        11..14: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        15..19: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..4)
        10: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(5)
        42..43: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        22..25: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        26..29: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..3)
        20..21: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(4..5)
        44..45: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        33..36: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        37..39: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(0..2)
        30..32: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.inner_ipv6.next_hdr(3..5)
        46..47: random(hdr.vlan_tag$0.vid(0..7), hdr.inner_ipv6.next_hdr(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0xa77436bffcbf
    format: { action(0): 0..5, version(0): 48..51, match(0): [54..55, 32..39, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 40..47 ] }
    match: [ hdr.inner_ipv6.next_hdr(6..7), hdr.vlan_tag$0.vid(0..7), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl$st0
    action: in_ipv6_e_acl_0$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_0$st1(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000003b
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003c
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003d
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003e
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000003f
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000040
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000041
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000042
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000043
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000044
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000045
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000046
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000047
      - next_table_miss:  in_ipv6_e_acl$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_0$st1$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_3$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 6 egress:
  dependency: match
  exact_match in_ipv6_e_acl$st0 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_2, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [0, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [0, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [0, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [0, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 2: { 0: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.dst_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 4:
        0..5: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        6..9: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        40..41: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        11..16: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        17..19: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..10)
        10: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(11)
        42..43: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        22..27: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        28..29: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..9)
        20..21: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(10..11)
        44..45: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        33..38: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        39: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8)
        30..32: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(9..11)
        46..47: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0x93751dcdffef
    format: { action(0): 0..5, version(0): 40..43, match(0): [46..47, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 32..39 ] }
    match: [ hdr.vlan_tag$0.vid(6..7), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl$st1
    action: in_ipv6_e_acl$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl$st0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000048
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000049
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004a
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004b
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004c
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004d
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004e
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004f
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000050
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000051
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000052
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000053
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000054
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl$st0$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_2$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 7 egress:
  dependency: match
  exact_match in_ipv6_e_acl$st1 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_2, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
    row: [ 5, 6, 7, 2, 3, 4 ]
    bus: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 5, 6, 7 ]
      col: [ 2, 2, 2 ]
      unit: [ 0, 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [5, 2], [7, 3], [6, 3], [5, 3], [7, 4], [6, 4], [5, 4], [7, 5], [6, 5], [5, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [5, 6], [7, 7], [6, 7], [5, 7], [7, 8], [6, 8], [5, 8], [7, 9], [6, 9], [5, 9]]
      - [0, 2, 0x30, [7, 10], [6, 10], [5, 10], [7, 11], [6, 11], [5, 11], [4, 2], [3, 2], [2, 2], [4, 3], [3, 3], [2, 3]]
      - [0, 3, 0xc0, [4, 4], [3, 4], [2, 4], [4, 5], [3, 5], [2, 5], [4, 6], [3, 6], [2, 6], [4, 7], [3, 7], [2, 7]]
      - [0, 0, 0x1, [4, 8], [3, 8], [2, 8], [4, 9], [3, 9], [2, 9]]
      - [0, 1, 0x0, [4, 10], [3, 10], [2, 10]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 24: hdr.inner_ipv6.src_addr.96-127(24..31), 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 2: { 0: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.dst_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 3:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 4:
        0..5: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        6..9: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        40..41: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        11..16: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        17..19: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..10)
        10: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(11)
        42..43: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        22..27: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        28..29: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..9)
        20..21: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(10..11)
        44..45: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        33..38: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        39: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8)
        30..32: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(9..11)
        46..47: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.dst_addr.96-127(24..31))
      hash group 0:
        table: [0, 1, 2, 3, 4]
        seed: 0x84055d6bf57e
    format: { action(0): 0..5, version(0): 40..43, match(0): [46..47, 254..254, 160..239, 128..159, 240..247, 288..367, 256..287, 368..383, 32..39 ] }
    match: [ hdr.vlan_tag$0.vid(6..7), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31), hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_dip$st0
    action: in_ipv6_e_acl$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl$st1(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000048
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000049
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004a
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004b
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004c
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004d
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004e
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000004f
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000050
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000051
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000052
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000053
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000054
      - next_table_miss:  in_ipv6_e_acl_dip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl$st1$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_2$action }
    row: [ 9, 7, 5, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 1, 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4, 5 ]
    - 3
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4, 5, 6, 7 ]
    - [ 8, 9, 10, 11 ]
    - [ 12, 13, 14, 15, 16, 17 ]
    - [ 18 ]
    home_row:
    - 9
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 8 egress:
  dependency: match
  exact_match in_ipv6_e_acl_dip$st0 1:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_dip, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
    row: [ 6, 7, 4, 5, 2, 3, 0, 1 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8 ]
    - [ 2, 3, 6, 7, 8 ]
    stash: 
      row: [ 6, 7 ]
      col: [ 2, 2 ]
      unit: [ 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [7, 3], [6, 3], [7, 6], [6, 6], [7, 7], [6, 7]]
      - [0, 1, 0xc, [7, 8], [6, 8], [7, 9], [6, 9], [7, 10], [6, 10], [5, 2], [4, 2]]
      - [0, 2, 0x30, [5, 3], [4, 3], [5, 6], [4, 6], [5, 7], [4, 7], [5, 8], [4, 8]]
      - [0, 3, 0xc0, [5, 9], [4, 9], [5, 10], [4, 10], [3, 2], [2, 2], [3, 3], [2, 3]]
      - [0, 0, 0x3, [3, 6], [2, 6], [3, 7], [2, 7], [3, 8], [2, 8], [3, 9], [2, 9]]
      - [0, 1, 0xc, [3, 10], [2, 10], [1, 2], [0, 2], [1, 3], [0, 3], [1, 6], [0, 6]]
      - [0, 2, 0x10, [1, 7], [0, 7], [1, 8], [0, 8]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.dst_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.dst_addr.32-63(0..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.64-95(0..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.96-127(0..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 1: { 0: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.dst_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.32-63(0..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.dst_addr.64-95(0..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.96-127(0..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 2:
        0..6: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..6)
        7..9: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..10)
        41: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        40: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(11)
        11..17: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..6)
        18..19: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..9)
        10: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(11)
        43: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        42: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(10)
        22..28: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..6)
        29: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8)
        20..21: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(10..11)
        45: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        44: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(9)
        33..39: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..6)
        30..32: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(9..11)
        47: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31))
        46: random(hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8)
      hash group 0:
        table: [0, 1, 2]
        seed: 0x457c7df0a5eb
    format: { action(0): 0..5, version(0): 40..43, match(0): [47..47, 254..254, 160..239, 128..159, 240..247, 32..39 ] }
    match: [ hdr.vlan_tag$0.vid(7), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_dip$st1
    action: in_ipv6_e_acl_dip$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_dip$st0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000055
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000056
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000057
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000058
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000059
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005a
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005b
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005c
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005d
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005e
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005f
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000060
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000061
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_dip$st0$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_dip$action }
    row: [ 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 ]
    word: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 4, 5 ]
    - 5
    - [ 4, 5 ]
    - 5
    - [ 4, 5 ]
    - 5
    - [ 4, 5 ]
    - 5
    - [ 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 4, 5 ]
    - [ 3, 4, 5 ]
    - 5
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4 ]
    - [ 5 ]
    - [ 6, 7 ]
    - [ 8 ]
    - [ 9, 10 ]
    - [ 11 ]
    - [ 12, 13 ]
    - [ 14 ]
    - [ 15, 16 ]
    - [ 17, 18, 19 ]
    - [ 20, 21 ]
    - [ 22, 23, 24 ]
    - [ 25 ]
    home_row:
    - [ 15, 3 ]
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
stage 9 egress:
  dependency: match
  exact_match in_ipv6_e_acl_dip$st1 3:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_dip, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.dst_addr: { type: exact, size: 128, full_size: 128, key_name: "in_dst_addr" }
    row: [ 6, 7, 4, 5 ]
    bus: [ 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8 ]
    - [ 2, 3, 6, 7, 8 ]
    stash: 
      row: [ 6, 7 ]
      col: [ 2, 2 ]
      unit: [ 0, 0 ]
    ways:
      - [0, 0, 0x1, [7, 2], [6, 2], [7, 3], [6, 3]]
      - [0, 1, 0x2, [7, 6], [6, 6], [7, 7], [6, 7]]
      - [0, 2, 0x4, [7, 8], [6, 8], [7, 9], [6, 9]]
      - [0, 3, 0x8, [7, 10], [6, 10], [5, 2], [4, 2]]
      - [0, 0, 0x1, [5, 3], [4, 3], [5, 6], [4, 6]]
      - [0, 1, 0x2, [5, 7], [4, 7], [5, 8], [4, 8]]
    input_xbar:
      exact group 0: { 8: hdr.inner_ipv6.dst_addr.0-31(8..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.dst_addr.0-31(0..7), 40: hdr.inner_ipv6.dst_addr.32-63(8..23), 56: hdr.inner_ipv6.dst_addr.0-31(24..31), 64: hdr.inner_ipv6.dst_addr.32-63(0..7), 72: hdr.inner_ipv6.dst_addr.64-95(8..23), 88: hdr.inner_ipv6.dst_addr.32-63(24..31), 96: hdr.inner_ipv6.dst_addr.64-95(0..7), 104: hdr.inner_ipv6.dst_addr.96-127(8..23), 120: hdr.inner_ipv6.dst_addr.64-95(24..31) }
      exact group 1: { 0: hdr.inner_ipv6.dst_addr.96-127(0..7), 8: hdr.vlan_tag$0.vid(8..11), 16: hdr.vlan_tag$0.vid(0..7), 24: hdr.inner_ipv6.dst_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        40: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        41: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        42: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
        43: random(hdr.inner_ipv6.dst_addr.0-31(8..23), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.32-63(8..23), hdr.inner_ipv6.dst_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        40: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        41: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        42: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
        43: random(hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.64-95(8..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.96-127(8..23), hdr.inner_ipv6.dst_addr.64-95(24..31))
      hash 2:
        0..3: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        4..9: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        40: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(6)
        11..14: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        15..19: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..4)
        10: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(6)
        41: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(5)
        22..25: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        26..29: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..3)
        20..21: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(5..6)
        42: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(4)
        33..36: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        37..39: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..2)
        30..32: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(4..6)
        43: random(hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.vlan_tag$0.vid(7), hdr.inner_ipv6.dst_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(3)
      hash group 0:
        table: [0, 1, 2]
        seed: 0x74b6340977c
    format: { action(0): 0..5, version(0): 48..51, match(0): [55..55, 246..246, 160..239, 128..143, 32..39, 144..159, 40..47 ] }
    match: [ hdr.vlan_tag$0.vid(7), hdr.fabric.is_hit, hdr.inner_ipv6.dst_addr.0-31(0..7), hdr.inner_ipv6.dst_addr.0-31(8..15), hdr.inner_ipv6.dst_addr.0-31(16..23), hdr.inner_ipv6.dst_addr.0-31(24..31), hdr.inner_ipv6.dst_addr.32-63(0..7), hdr.inner_ipv6.dst_addr.32-63(8..15), hdr.inner_ipv6.dst_addr.32-63(16..23), hdr.inner_ipv6.dst_addr.32-63(24..31), hdr.inner_ipv6.dst_addr.64-95(0..7), hdr.inner_ipv6.dst_addr.64-95(8..15), hdr.inner_ipv6.dst_addr.64-95(16..23), hdr.inner_ipv6.dst_addr.64-95(24..31), hdr.inner_ipv6.dst_addr.96-127(0..7), hdr.inner_ipv6.dst_addr.96-127(8..15), hdr.inner_ipv6.dst_addr.96-127(16..23), hdr.inner_ipv6.dst_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_sip$st0
    action: in_ipv6_e_acl_dip$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_dip$st1(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000055
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000056
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000057
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000058
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000059
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005a
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005b
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005c
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005d
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005e
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000005f
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000060
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000061
      - next_table_miss:  in_ipv6_e_acl_sip$st0
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_dip$st1$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_dip$action }
    row: [ 6, 5, 4, 3, 2, 1 ]
    word: [ 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - [ 4, 5 ]
    - [ 2, 3, 4, 5 ]
    - 5
    - [ 2, 3, 4 ]
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2, 3 ]
    - [ 4, 5, 6, 7 ]
    - [ 8 ]
    - [ 9, 10, 11 ]
    home_row:
    - 6
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 36..37 : $adf_h0, 112..115 : $adf_f2, 116..119 : $adf_f3, 120..123 : $adf_f0, 124..127 : $adf_f1 }
  exact_match in_ipv6_e_acl_sip$st0 4:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_sip, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
    row: [ 4, 5, 2, 3, 0, 1 ]
    bus: [ 1, 1, 0, 0, 0, 0 ]
    column:
    - [ 9, 10 ]
    - [ 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 6, 7 ]
    - [ 2, 3, 6, 7 ]
    stash: 
      row: [ 4, 5 ]
      col: [ 9, 9 ]
      unit: [ 0, 0 ]
    ways:
      - [1, 0, 0x1, [5, 9], [4, 9], [5, 10], [4, 10]]
      - [1, 1, 0x2, [3, 2], [2, 2], [3, 3], [2, 3]]
      - [1, 2, 0x4, [3, 6], [2, 6], [3, 7], [2, 7]]
      - [1, 3, 0x8, [3, 8], [2, 8], [3, 9], [2, 9]]
      - [1, 0, 0x1, [3, 10], [2, 10], [1, 2], [0, 2]]
      - [1, 1, 0x2, [1, 3], [0, 3], [1, 6], [0, 6]]
      - [1, 2, 0x0, [1, 7], [0, 7]]
    input_xbar:
      exact group 1: { 64: hdr.inner_ipv6.src_addr.0-31(0..23), 94: hdr.fabric.is_hit, 96: hdr.inner_ipv6.src_addr.32-63(0..23), 120: hdr.inner_ipv6.src_addr.0-31(24..31) }
      exact group 2: { 0: hdr.inner_ipv6.src_addr.64-95(0..23), 24: hdr.inner_ipv6.src_addr.32-63(24..31), 32: hdr.inner_ipv6.src_addr.96-127(0..23), 56: hdr.inner_ipv6.src_addr.64-95(24..31), 64: hdr.vlan_tag$0.vid, 88: hdr.inner_ipv6.src_addr.96-127(24..31) }
      hash 3:
        0..7: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(0..7)
        8: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(8)
        9: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.fabric.is_hit
        40: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        11..18: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(0..7)
        19: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(8)
        10: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.fabric.is_hit
        41: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        22..29: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(0..7)
        20: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(8)
        21: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.fabric.is_hit
        42: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        33..39: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(0..6)
        30: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(7)
        31: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.inner_ipv6.src_addr.0-31(8)
        32: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31)) ^ hdr.fabric.is_hit
        43: random(hdr.inner_ipv6.src_addr.0-31(9..23), hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 4:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 5:
        0..9: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        40: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        10..19: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        41: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        20..29: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        42: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        30..39: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
        43: random(hdr.vlan_tag$0.vid, hdr.inner_ipv6.src_addr.96-127(24..31))
      hash group 1:
        table: [3, 4, 5]
        seed: 0x93dbbf23750
    format: { action(0): 0..5, version(0): 112..115, match(0): [160..167, 128..131, 73..79, 32..71, 168..239 ] }
    match: [ hdr.vlan_tag$0.vid(0..7), hdr.vlan_tag$0.vid(8..11), hdr.inner_ipv6.src_addr.0-31(9..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  in_ipv6_e_acl_sip$st1
    action: in_ipv6_e_acl_sip$st0$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_sip$st0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000062
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(24, 24):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000063
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(26, 26):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000064
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(28, 28):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000065
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(30, 30):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000066
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(32, 32):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000067
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(34, 34):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000068
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(36, 36):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000069
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(38, 38):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006a
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(40, 40):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006b
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(42, 42):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006c
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(44, 44):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006d
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(46, 46):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006e
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_sip$st0$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_sip$action }
    row: [ 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 ]
    word: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - [ 4, 5 ]
    - 5
    - [ 4, 5 ]
    - 5
    - [ 4, 5 ]
    - 5
    - 4
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3, 4 ]
    - [ 5 ]
    - [ 6, 7 ]
    - [ 8 ]
    - [ 9, 10 ]
    - [ 11 ]
    - [ 12 ]
    home_row:
    - 15
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 5 : $adf_b1, 40..41 : $adf_h0, 64..67 : $adf_f2, 68..71 : $adf_f3, 72..75 : $adf_f0, 76..79 : $adf_f1 }
stage 10 egress:
  dependency: match
  exact_match in_ipv6_e_acl_sip$st1 0:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_sip, size: 38912 }
    p4_param_order: 
      hdr.fabric.is_hit: { type: exact, size: 1, full_size: 1, key_name: "is_hit" }
      hdr.vlan_tag$0.vid: { type: exact, size: 12, full_size: 12, key_name: "vid" }
      hdr.inner_ipv6.src_addr: { type: exact, size: 128, full_size: 128, key_name: "in_src_addr" }
    row: [ 6, 7, 4, 5, 2, 3, 0, 1 ]
    bus: [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 5, 6, 7, 8 ]
    - [ 2, 3, 4, 5, 6, 7, 8 ]
    - [ 2, 3, 4, 5, 6, 7, 8 ]
    - [ 2, 3, 4, 5, 6, 7, 8 ]
    - [ 2, 3, 4, 5, 6, 7, 8 ]
    - [ 2, 3, 4, 5, 6, 7, 8 ]
    - [ 2, 3, 4, 5 ]
    - [ 2, 3, 4, 5 ]
    stash: 
      row: [ 6, 7 ]
      col: [ 2, 2 ]
      unit: [ 0, 0 ]
    ways:
      - [0, 0, 0x3, [7, 2], [6, 2], [7, 3], [6, 3], [7, 4], [6, 4], [7, 5], [6, 5]]
      - [0, 1, 0xc, [7, 6], [6, 6], [7, 7], [6, 7], [7, 8], [6, 8], [5, 2], [4, 2]]
      - [0, 2, 0x30, [5, 3], [4, 3], [5, 4], [4, 4], [5, 5], [4, 5], [5, 6], [4, 6]]
      - [0, 3, 0xc0, [5, 7], [4, 7], [5, 8], [4, 8], [3, 2], [2, 2], [3, 3], [2, 3]]
      - [0, 0, 0x3, [3, 4], [2, 4], [3, 5], [2, 5], [3, 6], [2, 6], [3, 7], [2, 7]]
      - [0, 1, 0xc, [3, 8], [2, 8], [1, 2], [0, 2], [1, 3], [0, 3], [1, 4], [0, 4]]
      - [0, 2, 0x0, [1, 5], [0, 5]]
    input_xbar:
      exact group 0: { 0: hdr.inner_ipv6.src_addr.0-31(0..23), 30: hdr.fabric.is_hit, 32: hdr.inner_ipv6.src_addr.32-63(0..23), 56: hdr.inner_ipv6.src_addr.0-31(24..31), 64: hdr.inner_ipv6.src_addr.64-95(0..23), 88: hdr.inner_ipv6.src_addr.32-63(24..31), 96: hdr.inner_ipv6.src_addr.96-127(0..23), 120: hdr.inner_ipv6.src_addr.64-95(24..31) }
      exact group 1: { 0: hdr.vlan_tag$0.vid, 24: hdr.inner_ipv6.src_addr.96-127(24..31) }
      hash 0:
        0..9: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.0-31(0..23), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.32-63(0..23), hdr.inner_ipv6.src_addr.0-31(24..31))
      hash 1:
        0..9: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        40..41: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        10..19: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        42..43: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        20..29: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        44..45: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        30..39: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
        46..47: random(hdr.inner_ipv6.src_addr.64-95(0..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.96-127(0..23), hdr.inner_ipv6.src_addr.64-95(24..31))
      hash 2:
        0..5: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        6..9: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..11)
        40..41: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31))
        11..16: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        17..19: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..10)
        10: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(11)
        42..43: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31))
        22..27: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        28..29: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8..9)
        20..21: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(10..11)
        44..45: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31))
        33..38: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(0..5)
        39: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(8)
        30..32: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31)) ^ hdr.vlan_tag$0.vid(9..11)
        46..47: random(hdr.vlan_tag$0.vid(6..7), hdr.inner_ipv6.src_addr.96-127(24..31))
      hash group 0:
        table: [0, 1, 2]
        seed: 0xa950ff70f805
    format: { action(0): 0..5, version(0): 40..43, match(0): [46..47, 254..254, 160..239, 128..159, 240..247, 32..39 ] }
    match: [ hdr.vlan_tag$0.vid(6..7), hdr.fabric.is_hit, hdr.inner_ipv6.src_addr.0-31(0..7), hdr.inner_ipv6.src_addr.0-31(8..15), hdr.inner_ipv6.src_addr.0-31(16..23), hdr.inner_ipv6.src_addr.0-31(24..31), hdr.inner_ipv6.src_addr.32-63(0..7), hdr.inner_ipv6.src_addr.32-63(8..15), hdr.inner_ipv6.src_addr.32-63(16..23), hdr.inner_ipv6.src_addr.32-63(24..31), hdr.inner_ipv6.src_addr.64-95(0..7), hdr.inner_ipv6.src_addr.64-95(8..15), hdr.inner_ipv6.src_addr.64-95(16..23), hdr.inner_ipv6.src_addr.64-95(24..31), hdr.inner_ipv6.src_addr.96-127(0..7), hdr.inner_ipv6.src_addr.96-127(8..15), hdr.inner_ipv6.src_addr.96-127(16..23), hdr.inner_ipv6.src_addr.96-127(24..31) ]
    match_group_map: [ [ 0 ], [ 0 ] ]
    hit: [  END ]
    miss:  END
    action: in_ipv6_e_acl_sip$st1$action_data($DIRECT, $DEFAULT)
    instruction: in_ipv6_e_acl_sip$st1(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000062
      - next_table: 0
      - {  }
      Eg_inner_2.in_ipv6_e.drop(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000063
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.flags_drop, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.drop_and_count(2, 2):
      - p4_param_order: { count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000064
      - next_table: 0
      - { $data0: $adf_f0(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f1(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f2(8..27), count_idx: $data1(0..17), $constant4: $data1(19..19), $constant4: 1, $mask1: $adf_f3(8..27), $constant5: $mask1(0..17), $constant5: 262143, $constant6: $mask1(19..19), $constant6: 1 }
      - bitmasked-set W16, $data0, W16
      - bitmasked-set W17, $data1, W17
      Eg_inner_2.in_ipv6_e.redirect_port(4, 4):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000065
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.redirect_port_and_count(6, 6):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000066
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_to_eg(8, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000067
      - next_table: 0
      - {  }
      - set W16(29..30), 3
      Eg_inner_2.in_ipv6_e.forward_and_modify_mac(10, 10):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000068
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count(12, 12):
      - p4_param_order: { mac_idx: 18, vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000069
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(0..30), mac_idx: $data0(0..17), $constant1: $data0(28..28), $constant1: 1, $constant0: $data0(30..30), $constant0: 1, $mask0: $adf_f3(0..30), $constant2: $mask0(0..17), $constant2: 262143, $constant3: $mask0(28..28), $constant3: 1, $constant4: $mask0(30..30), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.set_mc(14, 14):
      - p4_param_order: { mc_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006a
      - next_table: 0
      - { mc_idx.8-15: $adf_f0(0..7), mc_idx.0-7: $adf_b1(0..7), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.mc_index.0-7, mc_idx.0-7
      - set hdr.fabric.mc_index.8-15, mc_idx.8-15
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir(16, 16):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006b
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.is_trunc_mir, 1
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt(18, 18):
      - p4_param_order: { count_idx: 18, vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006c
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(28..30), $constant1: $data0(0..0), $constant1: 1, $constant0: $data0(2..2), $constant0: 1, $mask0: $adf_f3(28..30), $constant2: $mask0(0..0), $constant2: 1, $constant3: $mask0(2..2), $constant3: 1, $data1: $adf_f1(0..18), count_idx: $data1(0..17), $constant4: $data1(18..18), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      - set W17(8..26), $data1
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr(20, 20):
      - p4_param_order: { vlan_idx: 16 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006d
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1 }
      - set hdr.fabric.vlan_index, vlan_idx
      - bitmasked-set W16, $data0, W16
      Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt(22, 22):
      - p4_param_order: { vlan_idx: 16, count_idx: 18 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x2000006e
      - next_table: 0
      - { vlan_idx: $adf_h0(0..15), $data0: $adf_f2(27..30), $constant1: $data0(0..0), $constant1: 1, $constant2: $data0(1..1), $constant2: 1, $constant0: $data0(3..3), $constant0: 1, $mask0: $adf_f3(27..30), $constant3: $mask0(0..1), $constant3: 3, $constant4: $mask0(3..3), $constant4: 1, count_idx: $adf_f1(0..17) }
      - set hdr.fabric.vlan_index, vlan_idx
      - set hdr.fabric.count_index, count_idx
      - bitmasked-set W16, $data0, W16
    default_action: NoAction
  action in_ipv6_e_acl_sip$st1$action_data:
    p4: { name: Eg_inner_2.in_ipv6_e.acl_sip$action }
    row: [ 15, 13, 11, 9, 7, 5, 3, 1 ]
    word: [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - [ 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 3, 4, 5 ]
    - [ 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2, 3, 4 ]
    vpns: 
    - [ 0 ]
    - [ 1, 2 ]
    - [ 3, 4, 5 ]
    - [ 6, 7, 8 ]
    - [ 9, 10, 11 ]
    - [ 12, 13, 14 ]
    - [ 15, 16, 17, 18, 19 ]
    - [ 20, 21, 22, 23, 24 ]
    home_row:
    - [ 15, 3 ]
    format Eg_inner_2.in_ipv6_e.drop: { $adf_f0: 0..31, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.drop_and_count: { $adf_f0: 0..31, $adf_f1: 32..63, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.redirect_port_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_modify_mac: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_modify_mac_and_count: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.set_mc: { $adf_f0: 0..31, $adf_b1: 8..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_trunc_mir_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127 }
    format Eg_inner_2.in_ipv6_e.forward_and_decap_pkt_hdr_and_cnt: { $adf_h0: 0..15, $adf_f2: 64..95, $adf_f3: 96..127, $adf_f1: 32..63 }
    action_bus: { 1 : $adf_b1, 32..33 : $adf_h0, 96..99 : $adf_f2, 100..103 : $adf_f3, 104..107 : $adf_f0, 108..111 : $adf_f1 }


primitives: "./network_tap/pp_inner_2//network_tap.prim.json"
dynhash: "./network_tap/pp_inner_2//network_tap.dynhash.json"
