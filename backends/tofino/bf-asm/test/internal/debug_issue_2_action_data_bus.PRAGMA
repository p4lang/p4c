#include "tofino/intrinsic_metadata.p4"

/* Sample P4 program */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header_type vlan_tag_t {
    fields {
        pri     : 3;
        cfi     : 1;
        vlan_id : 12;
        etherType : 16;
    }
}

header_type ipv4_t {
    fields {
        version : 4;
        ihl : 4;
        diffserv : 8;
        totalLen : 16;
        identification : 16;
        flags : 3;
        fragOffset : 13;
        ttl : 8;
        protocol : 8;
        hdrChecksum : 16;
        srcAddr : 32;
        dstAddr: 32;
    }
}

header_type tcp_t {
    fields {
        srcPort : 16;
        dstPort : 16;
        seqNo : 32;
        ackNo : 32;
        dataOffset : 4;
        res : 3;
        ecn : 3;
        ctrl : 6;
        window : 16;
        checksum : 16;
        urgentPtr : 16;
    }
}

header_type udp_t {
    fields {
        srcPort : 16;
        dstPort : 16;
        hdr_length : 16;
        checksum : 16;
    }
}

parser start {
    return parse_ethernet;
}

header ethernet_t ethernet;

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        0x8100 : parse_vlan_tag;
        0x800 : parse_ipv4;
        default: ingress;
    }
}

#define IP_PROTOCOLS_TCP 6
#define IP_PROTOCOLS_UDP 17

header ipv4_t ipv4;

parser parse_ipv4 {
    extract(ipv4);
    return select(latest.fragOffset, latest.protocol) {
        IP_PROTOCOLS_TCP : parse_tcp;
        IP_PROTOCOLS_UDP : parse_udp;
        default: ingress;
    }
}

header vlan_tag_t vlan_tag;

parser parse_vlan_tag {
    extract(vlan_tag);
    return select(latest.etherType) {
        0x800 : parse_ipv4;
        default : ingress;
    }
}

header tcp_t tcp;

parser parse_tcp {
    extract(tcp);
    return ingress;
}

header udp_t udp;

parser parse_udp {
    extract(udp);
    return ingress;
}

header_type routing_metadata_t {
    fields {
        drop: 1;
    }
}

metadata routing_metadata_t /*metadata*/ routing_metadata;

field_list ipv4_field_list {
    ipv4.version;
    ipv4.ihl;
    ipv4.diffserv;
    ipv4.totalLen;
    ipv4.identification;
    ipv4.flags;
    ipv4.fragOffset;
    ipv4.ttl;
    ipv4.protocol;
    ipv4.srcAddr;
    ipv4.dstAddr;
}

field_list_calculation ipv4_chksum_calc {
    input {
        ipv4_field_list;
    }
    algorithm: csum16;
    output_width: 16;
}

calculated_field ipv4.hdrChecksum {
    update ipv4_chksum_calc;
}

action nop() {
}

action hop(ttl, egress_port) {
    add_to_field(ttl, -1);
    //modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
}

action hop_ipv4(egress_port /*,srcmac, dstmac*/) {
    hop(ipv4.ttl, egress_port);
//    modify_field(ethernet.srcAddr, srcmac);
//    modify_field(ethernet.dstAddr, dstmac);
}

action drop_ipv4 () {
    drop();
}

action next_hop_ipv4(egress_port ,srcmac, dstmac) {
    hop(ipv4.ttl, egress_port);
    //modify_field(ethernet.srcAddr, srcmac);
    modify_field(ethernet.dstAddr, dstmac);
}

action ig_drop() {
//    modify_field(routing_metadata.drop, 1);
    add_to_field(ipv4.ttl, -1);
    //modify_field(ig_intr_md_for_tm.ucast_egress_port, 1);
}

action mod_mac_adr(egress_port, srcmac, dstmac) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
    //modify_field(ethernet.srcAddr, srcmac);
    modify_field(ethernet.dstAddr, dstmac);
}

action udp_hdr_add (egress_port) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
    add_header(udp);
    modify_field(ipv4.protocol, IP_PROTOCOLS_UDP);
    add_to_field(ipv4.totalLen, 8);
}

action tcp_hdr_rm (egress_port) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
    remove_header(tcp);
    modify_field(ipv4.protocol, 0);
//    add_to_field(ipv4.totalLen, -20);
//    modify_field(ipv4.totalLen, 66);
}

action modify_tcp_dst_port(dstPort) {
    modify_field(tcp.dstPort, dstPort);
}

action modify_tcp_dst_port_1(dstPort, egress_port) {
    modify_field(tcp.dstPort, dstPort);
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
}

action custom_action_1(egress_port, ipAddr, dstAddr, tcpPort)
{
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
    modify_field(ipv4.srcAddr, ipAddr);
    modify_field(ethernet.dstAddr, dstAddr);
    modify_field(tcp.dstPort, tcpPort);
}

action custom_action_2(egress_port, ipAddr, tcpPort)
{
    modify_field(ipv4.srcAddr, ipAddr);
    modify_field(tcp.dstPort, tcpPort);
    hop(ipv4.ttl, egress_port);
}

action custom_action_3(egress_port, dstAddr, dstIp)
{
    modify_field(ipv4.dstAddr, dstIp);
    modify_field(ethernet.dstAddr, dstAddr);
    hop(ipv4.ttl, egress_port);
}

action modify_l2 (egress_port, srcAddr, dstAddr) {
    // Trying for 128 bit action data
    hop(ipv4.ttl, egress_port);
    //modify_field(ethernet.srcAddr, srcAddr);
    modify_field(ethernet.dstAddr, dstAddr);
}

action switching_action_1(egress_port/*, vlan_id */)
{
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
    //modify_field(vlan_tag.vlan_id, vlan_id);
}

@pragma immediate 1
table ipv4_routing {
    reads {
        ipv4.dstAddr : lpm;
    }
    actions {
      nop;
      hop_ipv4;
      drop_ipv4;
    }
}

table ipv4_routing_exm_ways_3_pack_5 {
    reads {
        ipv4.dstAddr : exact;
        ipv4.srcAddr : exact;
    }
    actions {
        nop;
        modify_tcp_dst_port_1;
    }
}


table ipv4_routing_exm_ways_3_pack_3 {
    reads {
        ipv4.dstAddr : exact;
        ethernet.dstAddr : exact;
    }
    actions {
      nop;
      custom_action_1;
    }
}

table ipv4_routing_exm_ways_4_pack_3_stage_1 {
    reads {
        ipv4.dstAddr : exact;
        ipv4.srcAddr : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}

@pragma immediate 1
table ipv4_routing_stage_1 {
    reads {
        ipv4.dstAddr : lpm;
        ipv4.srcAddr : exact;
    }
    actions {
      nop;
      hop_ipv4;
    }
    size : 1024;
}

@pragma immediate 1
table tcam_tbl_stage_2 {
    reads {
        ipv4.dstAddr : lpm;
    }
    actions {
      nop;
      mod_mac_adr;
    }
}

table ipv4_routing_exm_ways_4_pack_7_stage_2 {
    reads {
        ipv4.dstAddr : exact;
        ipv4.srcAddr : exact;
        tcp.dstPort  : exact;
        tcp.srcPort  : exact;
    }
    actions {
      nop;
      custom_action_2;
    }
}

table ipv4_routing_exm_ways_3_pack_7_stage_2 {
    reads {
        ipv4.dstAddr : exact;
    }
    actions {
      nop;
      custom_action_3;
    }
}

table ipv4_routing_exm_ways_5_pack_3_stage_3 {
    reads {
        ipv4.dstAddr     : exact;
        ethernet.srcAddr : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}

@pragma immediate 1
table udp_add_tbl_stage_3 {
    reads {
        ethernet.srcAddr : ternary;
    }
    actions {
        nop;
        udp_hdr_add;
    }
}

table ipv4_routing_exm_ways_6_pack_3_stage_4 {
    reads {
        ipv4.dstAddr : exact;
        ethernet.dstAddr : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}


@pragma immediate 1
table tcp_rm_tbl_stage_4 {
    reads {
        ethernet.srcAddr : ternary;
    }
    actions {
        nop;
        tcp_hdr_rm;
    }
}

table ipv4_routing_exm_ways_3_pack_4_stage_5 {
    reads {
        ipv4.srcAddr : exact;
        ethernet.dstAddr : exact;
        tcp.dstPort : exact;
    }
    actions {
      nop;
      modify_tcp_dst_port_1;
    }
}

table switching_exm_ways_3_pack_6_stage_5 {
    reads {
        ethernet.dstAddr : exact;
        vlan_tag.vlan_id : exact;
    }
    actions {
      nop;
      switching_action_1;
    }
}

table ipv4_routing_exm_ways_4_pack_4_stage_6 {
    reads {
        ethernet.srcAddr : exact;
        ethernet.dstAddr : exact;
        tcp.srcPort : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}

table ipv4_routing_exm_ways_4_pack_6_stage_6 {
    reads {
        ethernet.srcAddr : exact;
        ipv4.dstAddr     : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}

table ipv4_routing_exm_ways_5_pack_4_stage_7 {
    reads {
        ipv4.dstAddr : exact;
        ethernet.srcAddr : exact;
    }
    actions {
      nop;
      custom_action_3;
    }
}

table ipv4_routing_exm_ways_5_pack_6_stage_7 {
    reads {
        ipv4.dstAddr  : exact;
        tcp.srcPort   : exact;
    }
    actions {
      nop;
      custom_action_2;
    }
}

table ipv4_routing_exm_ways_4_pack_5_stage_8 {
    reads {
        ipv4.srcAddr     : exact;
        ethernet.dstAddr : exact;
        tcp.srcPort      : exact;
        tcp.dstPort      : exact;
    }
    actions {
        nop;
        custom_action_2;
    }
}


table ipv4_routing_exm_ways_5_pack_5_stage_9 {
    reads {
        ipv4.dstAddr     : exact;
        ethernet.srcAddr : exact;
        tcp.srcPort      : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}


table ipv4_routing_exm_ways_6_pack_5_stage_10 {
    reads {
        ethernet.dstAddr : exact;
        ethernet.srcAddr : exact;
    }
    actions {
      nop;
      custom_action_2;
    }
}

table ipv4_routing_exm_ways_5_pack_7_stage_10 {
    reads {
        ethernet.srcAddr : exact;
        ipv4.dstAddr     : exact;
    }
    actions {
      nop;
      tcp_hdr_rm;
    }
}

@pragma immediate 1
table tcam_adt_deep_stage_10 {
    reads {
        ethernet.srcAddr : ternary;
        ethernet.dstAddr : ternary;
        ipv4.srcAddr     : ternary;
        ipv4.dstAddr     : ternary;
    }
    actions {
        nop;
        modify_l2;
    }
    size : 2048;
}

table ipv4_routing_exm_stage_11 {
    reads {
        ethernet.srcAddr : exact;
        ethernet.dstAddr : exact;
        ipv4.dstAddr     : exact;
        ipv4.srcAddr     : exact;
    }
    actions {
      nop;
      custom_action_2;
    }
}

table ipv4_routing_exm_ways_6_pack_6_stage_11 {
    reads {
        ipv4.dstAddr  : exact;
        ipv4.srcAddr  : exact;
    }
    actions {
      nop;
      custom_action_3;
    }
}

table ipv4_routing_exm_ways_6_pack_4_stage_11 {
    reads {
        ipv4.dstAddr : exact;
        tcp.dstPort  : exact;
    }
    actions {
      nop;
      next_hop_ipv4;
    }
}


/* Main control flow */
control ingress {
    /* A general principle : Always keep the exact match tables ahead of the 
     * ternary tables in the same stage, except first stage. Logic relating to next-table
     * will cause the Tofino model not to launch a lookup on th exact match
     * tables if the order is reversed.
     */
    apply(ipv4_routing);
///    apply(ipv4_routing_exm_ways_3_pack_5);
///    apply(ipv4_routing_exm_ways_3_pack_3);
///    apply(ipv4_routing_exm_ways_4_pack_3_stage_1);
    apply(ipv4_routing_stage_1);
    apply(tcam_tbl_stage_2);
///    apply(ipv4_routing_exm_ways_4_pack_7_stage_2);
///    apply(ipv4_routing_exm_ways_3_pack_7_stage_2);
///    apply(ipv4_routing_exm_ways_5_pack_3_stage_3);
    /* Gateway not yet supported */
//    if (ipv4.protocol == 0) {
    apply(udp_add_tbl_stage_3);
//    }
    apply(ipv4_routing_exm_ways_6_pack_3_stage_4);
//    if (valid(tcp)) {
    apply(tcp_rm_tbl_stage_4);
//    }
    apply(ipv4_routing_exm_ways_3_pack_4_stage_5);
    apply(switching_exm_ways_3_pack_6_stage_5);
    apply(ipv4_routing_exm_ways_4_pack_4_stage_6);
    apply(ipv4_routing_exm_ways_4_pack_6_stage_6);
    apply(ipv4_routing_exm_ways_5_pack_4_stage_7);
    apply(ipv4_routing_exm_ways_5_pack_6_stage_7);
    apply(ipv4_routing_exm_ways_4_pack_5_stage_8);
    apply(ipv4_routing_exm_ways_5_pack_5_stage_9);
    apply(ipv4_routing_exm_ways_6_pack_5_stage_10);
    apply(tcam_adt_deep_stage_10);
    //apply(ipv4_routing_exm_ways_6_pack_6_stage_11);
    apply(ipv4_routing_exm_ways_6_pack_4_stage_11);
}

action eg_drop() {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, 0);
    modify_field(eg_intr_md.egress_port, 0);
}

action permit() {
}

table egress_acl {
    reads {
        routing_metadata.drop: ternary;
    }
    actions {
        permit;
        eg_drop;
    }
}


control egress {
//    apply(egress_acl);
}
