interface IDPDKNode {
    virtual std::ostream& toSpec(std::ostream& out) const = 0;
}

class DpdkDeclaration : IDPDKNode {
    Declaration global;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkExternDeclaration :  Declaration_Instance, IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkHeaderType : Type_Header, IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkStructType : Type_Struct, IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

abstract DpdkAsmStatement : IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkAction {
    optional Annotations        annotations = Annotations::empty;
    inline IndexedVector<DpdkAsmStatement> statements;
    inline ID name;
    inline ParameterList para;
    std::ostream& toSpec(std::ostream& out) const;
#nodbprint
}

class DpdkTable {
    inline cstring name;
    Key match_keys;
    ActionList actions;
    Expression default_action;
    TableProperties properties;

    std::ostream& toSpec(std::ostream& out) const;
#nodbprint
#novalidate
}

class DpdkSelector {
    inline cstring name;
    inline cstring group_id;
    inline cstring member_id;
    Key selectors;
    int n_groups_max;
    int n_members_per_group_max;

	std::ostream& toSpec(std::ostream& out) const;
#nodbprint
#novalidate
}

// This class corresponds to the learner table object in dpdk
// which supports adding an table entry upon hit/miss event.
// This special table type is defined in PNA specification
// under the add_on_miss section.
class DpdkLearner {
    inline cstring name;
    Key match_keys;
    ActionList actions;
    Expression default_action;
    TableProperties properties;

    std::ostream& toSpec(std::ostream& out) const;
#nodbprint
#novalidate
}

// Toplevel Assembly representation
class DpdkAsmProgram {
    inline IndexedVector<DpdkHeaderType> headerType;
    inline IndexedVector<DpdkStructType> structType;
    inline IndexedVector<DpdkExternDeclaration> externDeclarations;
    inline IndexedVector<DpdkAction> actions;
    inline IndexedVector<DpdkTable> tables;
    inline IndexedVector<DpdkSelector> selectors;
    inline IndexedVector<DpdkLearner> learners;
    inline IndexedVector<DpdkAsmStatement> statements;
    inline IndexedVector<DpdkDeclaration> globals;
    std::ostream& toSpec(std::ostream& out) const;
}

class DpdkListStatement : DpdkAsmStatement, IDPDKNode {
    optional inline IndexedVector<DpdkAsmStatement> statements;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkApplyStatement : DpdkAsmStatement, IDPDKNode {
    cstring table;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkLearnStatement : DpdkAsmStatement, IDPDKNode {
    cstring action;
    optional Expression argument;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkMirrorStatement : DpdkAsmStatement, IDPDKNode {
    Expression slotId;
    Expression sessionId;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkEmitStatement : DpdkAsmStatement, IDPDKNode {
    Expression header;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkExtractStatement : DpdkAsmStatement, IDPDKNode {
    Expression header;
    NullOK optional Expression length;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkLookaheadStatement : DpdkAsmStatement, IDPDKNode {
    Expression header;
    std::ostream& toSpec(std::ostream& out) const override;
}

abstract DpdkJmpStatement : DpdkAsmStatement {
    cstring instruction;
    cstring label;
    std::ostream& toSpec(std::ostream& out) const override;
#noconstructor
    DpdkJmpStatement(cstring instruction, cstring l) :
        instruction(instruction), label(l.toUpper()) { }
}

class DpdkJmpLabelStatement : DpdkJmpStatement {
#noconstructor
    DpdkJmpLabelStatement(cstring label) :
        DpdkJmpStatement("jmp", label) { }
}

class DpdkJmpHitStatement : DpdkJmpStatement {
#nodbprint
#noconstructor
    DpdkJmpHitStatement(cstring label) :
        DpdkJmpStatement("jmph", label) { }
}

class DpdkJmpMissStatement : DpdkJmpStatement {
#nodbprint
#noconstructor
    DpdkJmpMissStatement(cstring label) :
        DpdkJmpStatement("jmpnh", label) { }
}

abstract DpdkJmpActionStatement : DpdkJmpStatement {
    cstring action;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
#noconstructor
    DpdkJmpActionStatement(cstring instruction, cstring label, cstring action) :
        DpdkJmpStatement(instruction, label), action(action) { }
}

class DpdkJmpIfActionRunStatement : DpdkJmpActionStatement {
#nodbprint
#noconstructor
    DpdkJmpIfActionRunStatement(cstring label, cstring act) :
        DpdkJmpActionStatement("jmpa", label, act) { }
}

class DpdkJmpIfActionNotRunStatement : DpdkJmpActionStatement {
#nodbprint
#noconstructor
    DpdkJmpIfActionNotRunStatement(cstring label, cstring act) :
        DpdkJmpActionStatement("jmpna", label, act) { }
}

abstract DpdkJmpHeaderStatement : DpdkJmpStatement {
    Expression header;
    std::ostream& toSpec(std::ostream& out) const override;
#noconstructor
    DpdkJmpHeaderStatement(cstring instruction, cstring label, Expression hdr) :
        DpdkJmpStatement(instruction, label), header(hdr) { }
}

class DpdkJmpIfInvalidStatement : DpdkJmpHeaderStatement {
#noconstructor
    DpdkJmpIfInvalidStatement(cstring label, Expression hdr) :
        DpdkJmpHeaderStatement("jmpnv", label, hdr) { }
}

class DpdkJmpIfValidStatement : DpdkJmpHeaderStatement {
#nodbprint
#noconstructor
    DpdkJmpIfValidStatement(cstring label, Expression hdr) :
        DpdkJmpHeaderStatement("jmpv", label, hdr) { }
}

abstract DpdkJmpCondStatement : DpdkJmpStatement {
    Expression src1;
    Expression src2;
    std::ostream& toSpec(std::ostream& out) const override;
#noconstructor
    DpdkJmpCondStatement(cstring instruction, cstring label, Expression src1, Expression src2) :
        DpdkJmpStatement(instruction, label), src1(src1), src2(src2) { }
}

class DpdkJmpEqualStatement: DpdkJmpCondStatement, IDPDKNode {
    DpdkJmpEqualStatement(cstring label, Expression src1, Expression src2) :
        DpdkJmpCondStatement("jmpeq", label, src1, src2) { }
#noconstructor
}

class DpdkJmpNotEqualStatement: DpdkJmpCondStatement, IDPDKNode {
#noconstructor
    DpdkJmpNotEqualStatement(cstring label, Expression src1, Expression src2) :
        DpdkJmpCondStatement("jmpneq", label, src1, src2) { }
}

class DpdkJmpGreaterEqualStatement: DpdkJmpCondStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkJmpGreaterEqualStatement(cstring label, Expression src1, Expression src2) :
        DpdkJmpCondStatement("jmpge", label, src1, src2) { }
}

class DpdkJmpGreaterStatement: DpdkJmpCondStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkJmpGreaterStatement(cstring label, Expression src1, Expression src2) :
        DpdkJmpCondStatement("jmpgt", label, src1, src2) { }
}

class DpdkJmpLessOrEqualStatement: DpdkJmpCondStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkJmpLessOrEqualStatement(cstring label, Expression src1, Expression src2) :
        DpdkJmpCondStatement("jmple", label, src1, src2) { }
}

class DpdkJmpLessStatement: DpdkJmpCondStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkJmpLessStatement(cstring label, Expression src1, Expression src2) :
        DpdkJmpCondStatement("jmplt", label, src1, src2) { }
}

class DpdkRxStatement : DpdkAsmStatement, IDPDKNode {
    Expression port;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkTxStatement : DpdkAsmStatement, IDPDKNode {
    Expression port;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

abstract DpdkAssignmentStatement : DpdkAsmStatement {
    cstring instruction;
    Expression dst;
#noconstructor
    DpdkAssignmentStatement(cstring instruction, Expression dst) :
        instruction(instruction), dst(dst) { }
}

abstract DpdkUnaryStatement : DpdkAssignmentStatement {
    Expression src;
    std::ostream& toSpec(std::ostream& out) const override;
#noconstructor
    DpdkUnaryStatement(cstring instruction, Expression dst, Expression src) :
        DpdkAssignmentStatement(instruction, dst), src(src) { }
}

class DpdkMovStatement : DpdkUnaryStatement {
    DpdkMovStatement(Expression dst, Expression src) :
        DpdkUnaryStatement("mov", dst, src) { }
#noconstructor
}

class DpdkNegStatement: DpdkUnaryStatement {
#nodbprint
#noconstructor
    DpdkNegStatement(Expression dst, Expression src) :
        DpdkUnaryStatement("neg", dst, src) { }
}

class DpdkCmplStatement: DpdkUnaryStatement {
#nodbprint
#noconstructor
    DpdkCmplStatement(Expression dst, Expression src) :
        DpdkUnaryStatement("compl", dst, src) { }
}

class DpdkLNotStatement: DpdkUnaryStatement {
#nodbprint
#noconstructor
    DpdkLNotStatement(Expression dst, Expression src) :
        DpdkUnaryStatement("lnot", dst, src) { }
}

abstract DpdkBinaryStatement : DpdkAssignmentStatement {
    Expression src1;
    Expression src2;
    std::ostream& toSpec(std::ostream& out) const override;
#noconstructor
    DpdkBinaryStatement(cstring instruction, Expression dst, Expression src1, Expression src2) :
        DpdkAssignmentStatement(instruction, dst), src1(src1), src2(src2) { }
}

class DpdkAddStatement : DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkAddStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("add", dst, src1, src2) { }
}

class DpdkAndStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkAndStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("and", dst, src1, src2) { }
}

class DpdkShlStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkShlStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("shl", dst, src1, src2) { }
}

class DpdkShrStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkShrStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("shr", dst, src1, src2) { }
}

class DpdkSubStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkSubStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("sub", dst, src1, src2) { }
}

class DpdkOrStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkOrStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("or", dst, src1, src2) { }
}

class DpdkEquStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkEquStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("equ", dst, src1, src2) { }
}

class DpdkXorStatement : DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkXorStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("xor", dst, src1, src2) { }
}

class DpdkCmpStatement: DpdkBinaryStatement, IDPDKNode {
#nodbprint
#noconstructor
    DpdkCmpStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("cmp", dst, src1, src2) { }
}

class DpdkLAndStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkLAndStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("land", dst, src1, src2) { }
}

class DpdkLOrStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkLOrStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("lor", dst, src1, src2) { }
}

class DpdkLeqStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkLeqStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("leq", dst, src1, src2) { }
}

class DpdkLssStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkLssStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("lss", dst, src1, src2) { }
}

class DpdkGrtStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkGrtStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("grt", dst, src1, src2) { }
}

class DpdkGeqStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkGeqStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("geq", dst, src1, src2) { }
}

class DpdkNeqStatement: DpdkBinaryStatement {
#nodbprint
#noconstructor
    DpdkNeqStatement(Expression dst, Expression src1, Expression src2) :
        DpdkBinaryStatement("neq", dst, src1, src2) { }
}

class DpdkExternObjStatement : DpdkAsmStatement, IDPDKNode {
    Expression methodCall;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkExternFuncStatement : DpdkAsmStatement, IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkReturnStatement : DpdkAsmStatement, IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkLabelStatement : DpdkAsmStatement, IDPDKNode {
    cstring label;
    std::ostream& toSpec(std::ostream& out) const override;
#noconstructor
    DpdkLabelStatement(cstring l) : label(l.toUpper()) { }
}

class DpdkChecksumAddStatement : DpdkAsmStatement, IDPDKNode {
    cstring csum;
    cstring intermediate_value;
    Expression field;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkChecksumSubStatement : DpdkAsmStatement, IDPDKNode {
    cstring csum;
    cstring intermediate_value;
    Expression field;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkChecksumClearStatement : DpdkAsmStatement, IDPDKNode {
    cstring csum;
    cstring intermediate_value;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkGetHashStatement : DpdkAsmStatement, IDPDKNode {
    cstring hash;
    Expression fields;
    Expression dst;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkGetChecksumStatement: DpdkAsmStatement, IDPDKNode {
    Expression dst;
    cstring checksum;
    cstring intermediate_value;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkCastStatement: DpdkAsmStatement, IDPDKNode {
    Expression dst;
    Expression src;
    Type type;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkVerifyStatement: DpdkAsmStatement, IDPDKNode {
    Expression condition;
    Expression error;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkMeterDeclStatement: DpdkAsmStatement {
    cstring meter;
    Expression size;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkMeterExecuteStatement: DpdkAsmStatement, IDPDKNode {
    cstring meter;
    Expression index;
    NullOK Expression length;
    Expression color_in;
    Expression color_out;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkCounterCountStatement: DpdkAsmStatement, IDPDKNode {
    cstring counter;
    Expression index;
    NullOK optional Expression incr;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkRegisterDeclStatement: DpdkAsmStatement {
    cstring reg;
    Expression size;
    NullOK optional Expression init_val;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkRegisterReadStatement: DpdkAssignmentStatement {
    cstring reg;
    Expression index;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
#noconstructor
    DpdkRegisterReadStatement(Expression dst, cstring reg, Expression index) :
        DpdkAssignmentStatement("read", dst), reg(reg), index(index) { }
}

class DpdkRegisterWriteStatement: DpdkAsmStatement, IDPDKNode {
    cstring reg;
    Expression index;
    Expression src;
    std::ostream& toSpec(std::ostream& out) const override;
#nodbprint
}

class DpdkValidateStatement: DpdkAsmStatement, IDPDKNode {
    Expression header;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkInvalidateStatement: DpdkAsmStatement, IDPDKNode {
    Expression header;
    std::ostream& toSpec(std::ostream& out) const override;
}

class DpdkDropStatement: DpdkAsmStatement, IDPDKNode {
    std::ostream& toSpec(std::ostream& out) const override;
}

