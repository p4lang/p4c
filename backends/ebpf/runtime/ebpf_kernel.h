/*
Copyright 2018 VMware, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * This file contains all functions and definitions necessary for the kernel target C
 * code to compile. It must be included with any file generated by the p4c-ebpf kernel
 * compiler.
 */

#ifndef BACKENDS_EBPF_RUNTIME_EBPF_KERNEL_H_
#define BACKENDS_EBPF_RUNTIME_EBPF_KERNEL_H_

#include "ebpf_common.h"


/* If we operate in user space we only need to include bpf.h and
 * define the userspace API macros.
 * For kernel programs we need to specify a list of kernel helpers. These are
 * taken from here: https://github.com/torvalds/linux/blob/master/tools/testing/selftests/bpf/bpf_helpers.h
 */
#ifdef CONTROL_PLANE // BEGIN EBPF USER SPACE DEFINITIONS
#include "bpf.h" // bpf_obj_get/pin, bpf_map_update_elem

#define BPF_USER_MAP_UPDATE_ELEM(index, key, value, flags)\
    bpf_map_update_elem(index, key, value, flags)
#define BPF_OBJ_PIN(table, name) bpf_obj_pin(table, name)
#define BPF_OBJ_GET(name) bpf_obj_get(name)

#else // BEGIN EBPF KERNEL DEFINITIONS
#include <linux/pkt_cls.h>  // TC_ACT_OK, TC_ACT_SHOT
#include "linux/bpf.h"  // types, and general bpf definitions

#define bpf_printk(fmt, ...)                                            \
                ({                                                      \
                        char ____fmt[] = fmt;                           \
                        bpf_trace_printk(____fmt, sizeof(____fmt),      \
                                     ##__VA_ARGS__);                    \
                })


/* a helper structure used by an eBPF C program
 * to describe map attributes for the elf_bpf loader
 */
struct bpf_elf_map {
    __u32 type;
    __u32 size_key;
    __u32 size_value;
    __u32 max_elem;
    __u32 flags;
    __u32 id;
    __u32 pinning;
};

/* Helper functions called from eBPF programs written in C
 * These are necessary to compile the kernel portion of the eBPF program.
 * For any new API access, a cast like this has to be created.
 */

static int (*bpf_map_update_elem)(struct bpf_elf_map *map, void *key, void *value, u64 flags) = (void *)BPF_FUNC_map_update_elem;
static void *(*bpf_map_lookup_elem)(struct bpf_elf_map *map, void *key) = (void *)BPF_FUNC_map_lookup_elem;
static void *(*bpf_map_delete_elem)(struct bpf_elf_map *map, void *key) = (void *)BPF_FUNC_map_delete_elem;
static void (*bpf_tail_call)(void *ctx, void *map, int index) = (void *)BPF_FUNC_tail_call;
static int (*probe_read)(void *dst, int size, const void *unsafe_addr) = (void *)BPF_FUNC_probe_read;
static int (*probe_read_str)(void *dst, int size, const void *unsafe_addr) = (void *)BPF_FUNC_probe_read_str;
static int (*perf_event_output)(void *, struct bpf_elf_map *, int, void *, unsigned long) = (void *)BPF_FUNC_perf_event_output;

/** Helper macro to place programs, maps, license in
 * different sections in elf_bpf file. Section names
 * are interpreted by elf_bpf loader
 */
#define SEC(NAME) __attribute__((section(NAME), used))

/* simple descriptor which replaces the kernel sk_buff structure */
#define SK_BUFF struct __sk_buff

#define REGISTER_START()
/* Note: pinning exports the table name globally, do not remove */
#define REGISTER_TABLE(NAME, TYPE, KEY_SIZE, VALUE_SIZE, MAX_ENTRIES) \
struct bpf_elf_map SEC("maps") NAME = {          \
    .type        = TYPE,             \
    .size_key    = KEY_SIZE,         \
    .size_value  = VALUE_SIZE,       \
    .max_elem    = MAX_ENTRIES,      \
    .pinning     = 2,                \
    .flags       = 0,                \
};
#define REGISTER_END()

#define BPF_MAP_LOOKUP_ELEM(table, key) \
    bpf_map_lookup_elem(&table, key)
#define BPF_MAP_UPDATE_ELEM(table, key, value, flags) \
    bpf_map_update_elem(&table, key, value, flags)
#define BPF_USER_MAP_UPDATE_ELEM(index, key, value, flags)\
    bpf_update_elem(index, key, value, flags)
#define BPF_MAP_DELETE_ELEM(table, key) \
    bpf_map_delete_elem(&table, key)
#define BPF_OBJ_PIN(table, name) bpf_obj_pin(table, name)
#define BPF_OBJ_GET(name) bpf_obj_get(name)

#endif // END EBPF KERNEL DEFINITIONS

#endif  // BACKENDS_EBPF_RUNTIME_EBPF_KERNEL_H_
