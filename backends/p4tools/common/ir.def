/// Represents a reference to an object in a P4 program.
///
/// This is a thin wrapper around a 'const Member*' to (1) enforce invariants on which forms of
/// Members can represent state variables and (2) enable the use of StateVariables as map keys.
class StateVariable : Expression {
    #noconstructor

    /// The wrapped reference.
    const Expression *ref;

    /// The expression type is derived from the member.
    /// Implicit conversions to allow implementations to be treated like a Member*.
#emit
    operator const Expression *() const { return ref; }
#end
    Expression const &operator*() const { return *ref; }
    Expression operator->() const { return ref; }

    /// StateVariables can be Members, PathExpressions, or ArrayIndices.
    StateVariable(Member member) : Expression(member->getSourceInfo(), member->type), ref(member) {}
    /// The expression type is derived from the path.
    StateVariable(PathExpression path) : Expression(path->getSourceInfo(), path->type), ref(path) {}
    StateVariable(ArrayIndex arr) : Expression(arr->getSourceInfo(), arr->type), ref(arr) {}

    /// Implements comparisons so that StateVariables can be used as map keys.
    // Delegate to IR's notion of equality.
    bool operator==(const StateVariable &other) const override {
        return *ref == *other.ref;
    }

    /// Implements comparisons so that StateVariables can be used as map keys.
    /// Note that we ignore the type of the variable in the comparison.
    equiv {
        // We use a custom compare function.
        // TODO: Is there a faster way to implement this comparison?
        return compare(ref, a.ref) == 0;
    }

    /// Implements comparisons so that StateVariables can be used as map keys.
    /// Note that we ignore the type of the variable in the comparison.
    bool operator<(const StateVariable &other) const {
        // We use a custom compare function.
        // TODO: Is there a faster way to implement this comparison?
        return compare(ref, other.ref) < 0;
    }

    /// Compares two expressions. Returns -1 if e1 < e2, 0 if e1 == e2, and 1 if e1 > e2.
    static int compare(const Expression *e1, const Expression *e2);

    /// Returns the hash of the state variable expression.
    uint64_t hash() const;

    toString { return ref->toString(); }

    dbprint { ref->dbprint(out); }
}

/// Signifies that a particular expression is tainted.
/// This tainted expression must be resolved explicitly.
class TaintExpression : Expression {
    toString { return "TaintedExpression(" + type->toString() + ")"; }

    dbprint { out << "TaintedExpression(" << type << ")"; }
}

/// This type replaces Type_Varbits and can store information about the current size
class Extracted_Varbits : Type_Bits {
 public:
#emit
    void *operator new(size_t size) { return ::operator new(size); }
// FIXME: Remove this #ifdefine check once we switch to C++20
#if defined(__cpp_sized_deallocation) && __cpp_sized_deallocation >= 201309L
    void operator delete(void *p, size_t size) { return ::operator delete(p, size); }
#else
    void operator delete(void *p) { return ::operator delete(p); }
#endif
#end
    /// The assigned size of this varbit (assigned by extract calls).
    int assignedSize;

    /// Returns the current width this variable bit type has.
    int width_bits() const override { return assignedSize; }

    equiv {
        // Ignore the current size and only check for equivalence of the assigned size.
        return size == a.size;
    }

    operator== {
        // Ignore the current size and only check for equivalence of the assigned size.
        return size == a.size;
    }

    cstring baseName() const { return "SizedVarbit"_cs; }

    toString {
        return baseName() + "<"_cs + Util::toString(size) + ">"_cs + "<"_cs + Util::toString(assignedSize) +
               ">"_cs;
    }

    dbprint { out << toString(); }
}

/// Defines a concolic variable that may be part of expressions.
/// This variable must later be resolved and is converted into a symbolic expression.
class ConcolicVariable : SymbolicVariable {
    #noconstructor

private:
    static cstring produceLabel(cstring methodName, int srcIdentifier, int concolicId ) {
        std::stringstream sstr;
        sstr << methodName << "_" << srcIdentifier << "_" << concolicId;
        return sstr.str();
    }

public:
    /// Arguments to the concolic method.
    Vector<Argument> arguments;

    /// The unique identifier of the source the produces this concolic variable.
    int srcIdentifier;

    /// Some identifiers produce multiple concolic variables. This ID keeps track of the offsets.
    int concolicId;

    /// Nodes that are associated with this concolic variable. This may be declarations.
    optional inline IndexedVector<Node> associatedNodes;

    /// The name of the concolic method that this variable targets.
    inline cstring concolicMethodName = cstring::empty;

    toString {
        std::string argumentStr = "";
        std::string sep = "";
        for (const auto *arg : *arguments) {
            argumentStr += sep + arg->toString();
            sep = ", ";
        }
        return "Concolic_" + label + "(" + argumentStr + ")";
    }

    dbprint {
        out << "Concolic_" << label << "(" << arguments << ")";
    }

    visit_children { (void)n; v.visit(type, "type"); }

    ConcolicVariable(const Type *type, cstring methodName,
                     const Vector<Argument> *arguments, int srcIdentifier, int concolicId,
                     const IndexedVector<Node> &associatedNodes)
        : SymbolicVariable(type, produceLabel(methodName, srcIdentifier, concolicId)),
          arguments(arguments),
          srcIdentifier(srcIdentifier),
          concolicId(concolicId),
          associatedNodes(associatedNodes),
          concolicMethodName(methodName) {}

    ConcolicVariable(const Type *type, cstring methodName,
                     const Vector<Argument> *arguments, int srcIdentifier, int concolicId)
        : SymbolicVariable(type, produceLabel(methodName, srcIdentifier, concolicId)),
          arguments(arguments),
          srcIdentifier(srcIdentifier),
          concolicId(concolicId),
          concolicMethodName(methodName) {}
}

/// An extension of a struct expression. Also tracks validity as an expression.
class HeaderExpression : StructExpression {
    /// Whether this struct expression is valid. Mostly relevant to header expressions.
    Expression validity;

    dbprint {
        out <<"{" << Log::endl << IndentCtl::indent;
        out << "$headerValid:" << validity <<";" << Log::endl;
        for (auto &field : components) {
            out << Log::endl << field << ';';
        }
        out << Log::endl << IndentCtl::unindent << "}";
    }

    validate {
        components.check_null(); components.validate();
        BUG_CHECK(structType == nullptr || structType->is<IR::Type_Header>(), "%1%: unexpected header type", structType->node_type_name());
    }
}

/// An wrapper which models an InOut argument.
/// Contains both a copy of the original reference as well as the resolved value of that reference.
class InOutReference : Expression {
/// Because we do not use a reference for "ref" and also inline the member the irgenerator produces
/// a constructor that does not compile. We need to write the constructor manually instead.
#noconstructor
#nomethod_constructor
    /// The original reference.
    inline StateVariable ref;
    /// The value of the reference after it was resolved.
    Expression resolvedRef;

    InOutReference(JSONLoader & json) : Expression(json), ref(json) {
        json.load("resolvedRef", resolvedRef);
    }

    InOutReference(Util::SourceInfo srcInfo, IR::StateVariable &ref, const Expression* resolvedRef) :
        Expression(srcInfo, ref.type), ref(ref), resolvedRef(resolvedRef)
        { validate(); }

    InOutReference(IR::StateVariable &ref, const Expression* resolvedRef) :
        Expression(ref.type), ref(ref), resolvedRef(resolvedRef)
        { validate(); }

    toString { return ref->toString() + "("_cs + resolvedRef->toString() + ")"_cs; }

    dbprint { out << ref << "(" << resolvedRef << ")"; }
}
