{
  "name" : "program",
  "nodes" : [
    {
      "type" : "parser",
      "name" : "ParserImpl",
      "nodes" : [
        {
          "node_nmb" : 0,
          "name" : "parse_ethernet\n(hdr.ethernet.etherType)",
          "type" : "state",
          "type_enum" : 8
        },
        {
          "node_nmb" : 1,
          "name" : "parse_ipv4\n(hdr.ipv4.protocol)",
          "type" : "state",
          "type_enum" : 8
        },
        {
          "node_nmb" : 2,
          "name" : "parse_tcp",
          "type" : "state",
          "type_enum" : 8
        },
        {
          "node_nmb" : 3,
          "name" : "start",
          "type" : "state",
          "type_enum" : 8
        },
        {
          "node_nmb" : 4,
          "name" : "accept",
          "type" : "state",
          "type_enum" : 8
        },
        {
          "node_nmb" : 5,
          "name" : "reject",
          "type" : "state",
          "type_enum" : 8
        }
      ],
      "transitions" : [
        {
          "from" : 0,
          "to" : 1,
          "cond" : ""
        },
        {
          "from" : 0,
          "to" : 4,
          "cond" : ""
        },
        {
          "from" : 1,
          "to" : 2,
          "cond" : ""
        },
        {
          "from" : 1,
          "to" : 4,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 4,
          "cond" : ""
        },
        {
          "from" : 3,
          "to" : 0,
          "cond" : ""
        }
      ]
    },
    {
      "type" : "control",
      "name" : "verifyChecksum",
      "nodes" : [
        {
          "node_nmb" : 0,
          "name" : "__START__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 1,
          "name" : "__EXIT__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 2,
          "name" : "verify_checksum<list<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), {hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr}, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);",
          "type" : "statements",
          "type_enum" : 5
        }
      ],
      "transitions" : [
        {
          "from" : 0,
          "to" : 2,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 1,
          "cond" : ""
        }
      ]
    },
    {
      "type" : "control",
      "name" : "ingress",
      "nodes" : [
        {
          "node_nmb" : 0,
          "name" : "__START__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 1,
          "name" : "__EXIT__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 2,
          "name" : "flowlet_0",
          "type" : "table",
          "type_enum" : 0
        },
        {
          "node_nmb" : 3,
          "name" : "lookup_flowlet_map",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 4,
          "name" : "hash<bit<13>, bit<13>, list<bit<32>, bit<32>, bit<8>, bit<16>, bit<16>>, bit<26>>(meta.ingress_metadata.flowlet_map_index, HashAlgorithm.crc16, 0, {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, hdr.tcp.srcPort, hdr.tcp.dstPort}, 13);\n...\nflowlet_lasttime_0/flowlet_lasttime.write((bit<32>)meta.ingress_metadata.flowlet_map_index, (bit<32>)standard_metadata.ingress_global_timestamp);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 5,
          "name" : "NoAction_5",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 6,
          "name" : "meta.ingress_metadata.flow_ipg > 50000;",
          "type" : "condition",
          "type_enum" : 3
        },
        {
          "node_nmb" : 7,
          "name" : "new_flowlet_0",
          "type" : "table",
          "type_enum" : 0
        },
        {
          "node_nmb" : 8,
          "name" : "update_flowlet_id",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 9,
          "name" : "meta.ingress_metadata.flowlet_id = meta.ingress_metadata.flowlet_id + 1;\nflowlet_id_0/flowlet_id.write((bit<32>)meta.ingress_metadata.flowlet_map_index, meta.ingress_metadata.flowlet_id);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 10,
          "name" : "NoAction_7",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 11,
          "name" : "ecmp_group_0",
          "type" : "table",
          "type_enum" : 0
        },
        {
          "node_nmb" : 12,
          "name" : "lpm: \"hdr.ipv4.dstAddr\"\\n",
          "type" : "key",
          "type_enum" : 1
        },
        {
          "node_nmb" : 13,
          "name" : "_drop_2",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 14,
          "name" : "mark_to_drop(standard_metadata);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 15,
          "name" : "set_ecmp_select",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 16,
          "name" : "hash<bit<14>, bit<10>, list<bit<32>, bit<32>, bit<8>, bit<16>, bit<16>, bit<16>>, bit<20>>(meta.ingress_metadata.ecmp_offset, HashAlgorithm.crc16, (bit<10>)ecmp_base, {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, hdr.tcp.srcPort, hdr.tcp.dstPort, meta.ingress_metadata.flowlet_id}, (bit<20>)ecmp_count);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 17,
          "name" : "NoAction_3",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 18,
          "name" : "ecmp_nhop_0",
          "type" : "table",
          "type_enum" : 0
        },
        {
          "node_nmb" : 19,
          "name" : "exact: \"meta.ingress_metadata.ecmp_offset\"\\n",
          "type" : "key",
          "type_enum" : 1
        },
        {
          "node_nmb" : 20,
          "name" : "_drop_3",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 21,
          "name" : "mark_to_drop(standard_metadata);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 22,
          "name" : "set_nhop",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 23,
          "name" : "meta.ingress_metadata.nhop_ipv4 = nhop_ipv4_1/nhop_ipv4;\n...\nhdr.ipv4.ttl = hdr.ipv4.ttl + 255;",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 24,
          "name" : "NoAction_4",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 25,
          "name" : "forward_0",
          "type" : "table",
          "type_enum" : 0
        },
        {
          "node_nmb" : 26,
          "name" : "exact: \"meta.ingress_metadata.nhop_ipv4\"\\n",
          "type" : "key",
          "type_enum" : 1
        },
        {
          "node_nmb" : 27,
          "name" : "set_dmac",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 28,
          "name" : "hdr.ethernet.dstAddr = dmac;",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 29,
          "name" : "_drop_4",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 30,
          "name" : "mark_to_drop(standard_metadata);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 31,
          "name" : "NoAction_6",
          "type" : "action",
          "type_enum" : 2
        }
      ],
      "transitions" : [
        {
          "from" : 0,
          "to" : 2,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 3,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 5,
          "cond" : ""
        },
        {
          "from" : 3,
          "to" : 4,
          "cond" : ""
        },
        {
          "from" : 4,
          "to" : 6,
          "cond" : ""
        },
        {
          "from" : 5,
          "to" : 6,
          "cond" : ""
        },
        {
          "from" : 6,
          "to" : 7,
          "cond" : ""
        },
        {
          "from" : 6,
          "to" : 11,
          "cond" : ""
        },
        {
          "from" : 7,
          "to" : 8,
          "cond" : ""
        },
        {
          "from" : 7,
          "to" : 10,
          "cond" : ""
        },
        {
          "from" : 8,
          "to" : 9,
          "cond" : ""
        },
        {
          "from" : 9,
          "to" : 11,
          "cond" : ""
        },
        {
          "from" : 10,
          "to" : 11,
          "cond" : ""
        },
        {
          "from" : 11,
          "to" : 12,
          "cond" : ""
        },
        {
          "from" : 12,
          "to" : 13,
          "cond" : ""
        },
        {
          "from" : 12,
          "to" : 15,
          "cond" : ""
        },
        {
          "from" : 12,
          "to" : 17,
          "cond" : ""
        },
        {
          "from" : 13,
          "to" : 14,
          "cond" : ""
        },
        {
          "from" : 14,
          "to" : 18,
          "cond" : ""
        },
        {
          "from" : 15,
          "to" : 16,
          "cond" : ""
        },
        {
          "from" : 16,
          "to" : 18,
          "cond" : ""
        },
        {
          "from" : 17,
          "to" : 18,
          "cond" : ""
        },
        {
          "from" : 18,
          "to" : 19,
          "cond" : ""
        },
        {
          "from" : 19,
          "to" : 20,
          "cond" : ""
        },
        {
          "from" : 19,
          "to" : 22,
          "cond" : ""
        },
        {
          "from" : 19,
          "to" : 24,
          "cond" : ""
        },
        {
          "from" : 20,
          "to" : 21,
          "cond" : ""
        },
        {
          "from" : 21,
          "to" : 25,
          "cond" : ""
        },
        {
          "from" : 22,
          "to" : 23,
          "cond" : ""
        },
        {
          "from" : 23,
          "to" : 25,
          "cond" : ""
        },
        {
          "from" : 24,
          "to" : 25,
          "cond" : ""
        },
        {
          "from" : 25,
          "to" : 26,
          "cond" : ""
        },
        {
          "from" : 26,
          "to" : 27,
          "cond" : ""
        },
        {
          "from" : 26,
          "to" : 29,
          "cond" : ""
        },
        {
          "from" : 26,
          "to" : 31,
          "cond" : ""
        },
        {
          "from" : 27,
          "to" : 28,
          "cond" : ""
        },
        {
          "from" : 28,
          "to" : 1,
          "cond" : ""
        },
        {
          "from" : 29,
          "to" : 30,
          "cond" : ""
        },
        {
          "from" : 30,
          "to" : 1,
          "cond" : ""
        },
        {
          "from" : 31,
          "to" : 1,
          "cond" : ""
        }
      ]
    },
    {
      "type" : "control",
      "name" : "egress",
      "nodes" : [
        {
          "node_nmb" : 0,
          "name" : "__START__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 1,
          "name" : "__EXIT__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 2,
          "name" : "send_frame_0",
          "type" : "table",
          "type_enum" : 0
        },
        {
          "node_nmb" : 3,
          "name" : "exact: \"standard_metadata.egress_port\"\\n",
          "type" : "key",
          "type_enum" : 1
        },
        {
          "node_nmb" : 4,
          "name" : "rewrite_mac",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 5,
          "name" : "hdr.ethernet.srcAddr = smac;",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 6,
          "name" : "_drop",
          "type" : "action",
          "type_enum" : 2
        },
        {
          "node_nmb" : 7,
          "name" : "mark_to_drop(standard_metadata);",
          "type" : "statements",
          "type_enum" : 5
        },
        {
          "node_nmb" : 8,
          "name" : "NoAction_2",
          "type" : "action",
          "type_enum" : 2
        }
      ],
      "transitions" : [
        {
          "from" : 0,
          "to" : 2,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 3,
          "cond" : ""
        },
        {
          "from" : 3,
          "to" : 4,
          "cond" : ""
        },
        {
          "from" : 3,
          "to" : 6,
          "cond" : ""
        },
        {
          "from" : 3,
          "to" : 8,
          "cond" : ""
        },
        {
          "from" : 4,
          "to" : 5,
          "cond" : ""
        },
        {
          "from" : 5,
          "to" : 1,
          "cond" : ""
        },
        {
          "from" : 6,
          "to" : 7,
          "cond" : ""
        },
        {
          "from" : 7,
          "to" : 1,
          "cond" : ""
        },
        {
          "from" : 8,
          "to" : 1,
          "cond" : ""
        }
      ]
    },
    {
      "type" : "control",
      "name" : "computeChecksum",
      "nodes" : [
        {
          "node_nmb" : 0,
          "name" : "__START__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 1,
          "name" : "__EXIT__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 2,
          "name" : "update_checksum<list<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), {hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr}, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);",
          "type" : "statements",
          "type_enum" : 5
        }
      ],
      "transitions" : [
        {
          "from" : 0,
          "to" : 2,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 1,
          "cond" : ""
        }
      ]
    },
    {
      "type" : "control",
      "name" : "DeparserImpl",
      "nodes" : [
        {
          "node_nmb" : 0,
          "name" : "__START__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 1,
          "name" : "__EXIT__",
          "type" : "other",
          "type_enum" : 7
        },
        {
          "node_nmb" : 2,
          "name" : "packet.emit<ethernet_t>(hdr.ethernet);\n...\npacket.emit<tcp_t>(hdr.tcp);",
          "type" : "statements",
          "type_enum" : 5
        }
      ],
      "transitions" : [
        {
          "from" : 0,
          "to" : 2,
          "cond" : ""
        },
        {
          "from" : 2,
          "to" : 1,
          "cond" : ""
        }
      ]
    }
  ]
}
