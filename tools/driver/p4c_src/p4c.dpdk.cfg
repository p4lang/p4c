# Copyright 2013-present Barefoot Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- Python -*-

from p4c_src.driver import BackendDriver

class DPDKBackend(BackendDriver):
    def __init__(self, target, arch, argParser):
        BackendDriver.__init__(self, target, arch, argParser)
        # commands
        self.add_command('preprocessor', 'cc')
        self.add_command('compiler', os.path.join(os.environ['P4C_BIN_DIR'],'p4c-dpdk'))
        self.add_command('cleaner', 'rm')

        # order of commands
        self.enable_commands(['preprocessor', 'compiler', 'cleaner'])

        # options
        self.add_command_option('preprocessor', "-E")

    def process_command_line_options(self, opts):
        BackendDriver.process_command_line_options(self, opts)

        # process the options related to source file
        basepath = "{}/{}".format(self._output_directory, self._source_basename)
        # preprocessor
        dpdk_target.add_command_option('preprocessor', "-o")
        dpdk_target.add_command_option('preprocessor', "{}.p4i".format(basepath))
        dpdk_target.add_command_option('preprocessor', self._source_filename)

        # compiler
        dpdk_target.add_command_option('compiler', "-o")
        dpdk_target.add_command_option('compiler', "{}.spec".format(basepath))
        dpdk_target.add_command_option('compiler', "{}.p4i".format(basepath))

	# cleanup
        dpdk_target.add_command_option('cleaner', "{}.p4i".format(basepath))

# target
dpdk_target = DPDKBackend('dpdk', 'psa', argParser)
config.target.append(dpdk_target)
