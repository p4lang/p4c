/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

%{ /* -*-C++-*- */
// some of these includes are needed by lex-generated file

#include <assert.h>
#include <limits.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include <iostream>
#include <cerrno>
#include <vector>

#include "lib/cstring.h"
#include "lib/stringref.h"
#include "lib/source_file.h"
#include "lib/error.h"
#include "tools/ir-generator/irclass.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#define YYLTYPE Util::SourceInfo
#define YYLLOC_DEFAULT(Cur, Rhs, N)                                     \
    ((Cur) = (N) ? YYRHSLOC(Rhs, 1) + YYRHSLOC(Rhs, N)                  \
                 : Util::SourceInfo(sources, YYRHSLOC(Rhs, 0).getEnd()))

static void yyerror(const char *fmt, ...);
static std::vector<IrElement*> global;
static CommentBlock *currCommentBlock = nullptr;

namespace {  // anonymous namespace
static int yylex();

static Util::InputSources *sources = new Util::InputSources;
static IrNamespace *current_namespace = LookupScope().resolve(0);

%}

%union {
    YYSTYPE() {}
    int                         i;
    cstring                     str;
    IrClass                     *irClass;
    IrElement                   *irElement;
    IrField                     *irField;
    IrMethod                    *irMethod;
    IrNamespace                 *irNamespace;
    ConstFieldInitializer       *constFieldInit;
    LookupScope                 *lookup;
    std::vector<const Type *>   *types;
    Type                        *type;
    NodeKind                    kind;
    struct {
        bool                    impl;
        cstring                 block;
    }                           emit;
}

%token          ABSTRACT APPLY CLASS CONST DBLCOL DEFAULT DELETE INLINE INTERFACE NAMESPACE NEW
                NULLOK OPERATOR OPTIONAL PRIVATE PROTECTED PUBLIC STATIC VIRTUAL
%token<str>     BLOCK COMMENTBLOCK IDENTIFIER INTEGER NO STRING ZERO
%token<emit>    EMITBLOCK

%type<type>                     type nonRefType type_arg
%type<irClass>                  irclass partList
%type<irElement>                part
%type<irField>                  irField
%type<i>                        modifier modifiers optConst optOverride
%type<irMethod>                 method
%type<irNamespace>              scope
%type<constFieldInit>           constFieldInit
%type<kind>                     kind
%type<types>                    parentList nonEmptyParentList type_args optTypeList typeList
%type<str>                      name expression optInitializer fieldName methodName body
%type<lookup>                   lookup_scope

%error-verbose
%locations

%nonassoc COMMENTBLOCK
%nonassoc ABSTRACT CLASS INTERFACE

%{
static void
symbol_print(FILE* file, int type, YYSTYPE value)
{
    switch (type)
    {
    case EMITBLOCK:
        fprintf(file, "%s%s", value.emit.impl ? "/*impl*/ " : "", value.emit.block.c_str());
        break;
    case BLOCK:
    case COMMENTBLOCK:
    case IDENTIFIER:
    case STRING:
    case NO:
    case INTEGER:
    case ZERO:
        fprintf(file, "%s", value.str.c_str());
        break;
    default:
        break;
    }
}

#define YYPRINT(file, type, value)   symbol_print(file, type, value)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
#include "ir-generator-lex.c"
#pragma GCC diagnostic pop

static cstring canon_name(cstring name) {
    /* canonical method names for backwards compatibility */
    if (name == "visitchildren") return "visit_children";
    return name;
}

static void pushCurrentComment() {
    if (currCommentBlock) {
        global.push_back(currCommentBlock);
        currCommentBlock = nullptr;
    }
}

%}

%%

input
    : /* empty */
    | input element
    ;

element
    : irclass {
        if (currCommentBlock) {
            $1->comments.push_back(currCommentBlock);
            currCommentBlock = nullptr;
        }
        global.push_back($1); }
    | COMMENTBLOCK  {
        if (!currCommentBlock) {
            currCommentBlock = new CommentBlock(@1, $1);
        } else {
            currCommentBlock->append($1);
            currCommentBlock->srcInfo += @1; }}
    | EMITBLOCK {
        pushCurrentComment();
        global.push_back(new EmitBlock(@1, $1.impl, $1.block)); }
    | NAMESPACE { BEGIN(PARSE_BRACKET); }
      IDENTIFIER { current_namespace = IrNamespace::get(current_namespace, $3); }
      '{' input '}' {
        current_namespace = current_namespace->parent;
        pushCurrentComment();
        }
    | ';' /* ignore */ { pushCurrentComment(); }
    ;

scope
    : /* empty */       { $$ = current_namespace; }
    | DBLCOL            { $$ = nullptr; }
    | scope IDENTIFIER DBLCOL   { $$ = IrNamespace::get($1, $2); }
    ;

irclass
    : kind scope IDENTIFIER parentList '{'
      { $<irClass>$ = new IrClass(@3, $2, $1, $3, $4); }
      partList '}'
      { $$ = $<irClass>6; }
    ;

parentList
    :  /* empty */              { $$ = nullptr; }
    | ':' nonEmptyParentList    { $$ = $2; }
    ;

nonEmptyParentList
    : type              { ($$ = new std::vector<const Type *>())->push_back($1); }
    | nonEmptyParentList ',' type       { ($$ = $1)->push_back($3); }
    ;

kind
    : INTERFACE         { $$ = NodeKind::Interface; BEGIN(PARSE_BRACKET); }
    | ABSTRACT          { $$ = NodeKind::Abstract; BEGIN(PARSE_BRACKET); }
    | CLASS             { $$ = NodeKind::Concrete; BEGIN(PARSE_BRACKET); }
    ;

partList
    : /* emtpy */         { $$ = $<irClass>0; }
    | partList part       { $$ = $1;
                            if ($2) {
                                $2->access = $$->current_access;
                                $2->clss = $$;
                                $$->elements.push_back($2); } }
    ;

part
    : EMITBLOCK       { $$ = new EmitBlock(@1, $1.impl, $1.block); }
    | NO              { $$ = new IrNo(@1, $1); }
    | PRIVATE ':'     { $$ = nullptr; $<irClass>0->current_access = IrElement::Private; }
    | PROTECTED ':'   { $$ = nullptr; $<irClass>0->current_access = IrElement::Protected; }
    | PUBLIC ':'      { $$ = nullptr; $<irClass>0->current_access = IrElement::Public; }
    | irField         { $$ = $1; }
    | method          { $$ = $1; }
    | constFieldInit  { $$ = $1; }
    | APPLY           { $$ = new IrApply(@1); }
    | CLASS           { BEGIN(PARSE_BRACKET); }
      IDENTIFIER '{'  { $<irClass>$ = new IrClass(@2, &$<irClass>0->local, NodeKind::Nested, $3); }
      partList '}'    { $$ = $<irClass>5; }
    | COMMENTBLOCK    { $$ = new CommentBlock(@1, $1); }
    ;

method
    : modifiers methodName BLOCK
          { $$ = new IrMethod(@2, canon_name($2), $3); }
    | modifiers methodName ';'
          { $$ = new IrMethod(@2, canon_name($2)); }
    | modifiers IDENTIFIER '('
          { if ($2 != $<irClass>0->name)
                yyerror("constructor name %s doesn't match class name %s", $2, $<irClass>0->name);
            if ($1 & ~IrField::Inline)
                yyerror("%s invalid on constructor", IrElement::modifier($1));
            ($<irMethod>$ = new IrMethod(@2, $2))->inImpl = !($1 & IrField::Inline);
            $<irMethod>$->clss = $<irClass>0; }
      optArgList { BEGIN(PARSE_CTOR_INIT); } ')' body
          { ($$ = $<irMethod>4)->body = $8;
            $$->isUser = true;
            BEGIN(NORMAL); }
    | modifiers type methodName '('
          { ($<irMethod>$ = new IrMethod(@3, $3))->rtype = $2;
            $<irMethod>$->inImpl = !($1 & IrField::Inline);
            $<irMethod>$->isStatic = ($1 & IrField::Static);
            $<irMethod>$->isVirtual = ($1 & IrField::Virtual);
            $<irMethod>$->clss = $<irClass>0;
            if ($1 & !(IrField::Inline | IrField::Virtual))
                yyerror("%s invalid on method", IrElement::modifier($1)); }
      optArgList ')' optConst optOverride body
          { ($$ = $<irMethod>5)->body = $10;
            if (!$10 || $10[0] == '=') {
                if (!$$->inImpl)
                    yyerror("inline method %s with no body", $3);
                $$->inImpl = false; }
            $$->isUser = true;
            $$->isConst = $8;
            $$->isOverride = $9; }
    ;

methodName
    : IDENTIFIER
    | OPERATOR '=' '='          { $$ = "operator=="; }
    | OPERATOR '!' '='          { $$ = "operator!="; }
    | OPERATOR '<' '='          { $$ = "operator<="; }
    | OPERATOR '>' '='          { $$ = "operator>="; }
    | OPERATOR '<'              { $$ = "operator<"; }
    | OPERATOR '<' '<'          { $$ = "operator<<"; }
    | OPERATOR '>'              { $$ = "operator>"; }
    | OPERATOR '>' '>'          { $$ = "operator>>"; }
    ;

optArgList : argList | ;

argList
    : type IDENTIFIER optInitializer
            { auto *field = new IrField(@2, $1, $2, $3);
              field->clss = $<irMethod>0->clss;
              $<irMethod>0->args.push_back(field); }
    | argList ',' type IDENTIFIER optInitializer
            { auto *field = new IrField(@4, $3, $4, $5);
              field->clss = $<irMethod>0->clss;
              $<irMethod>0->args.push_back(field); }
    ;

optConst : { $$ = false; } | CONST { $$ = true; }

optOverride
    : { $$ = false; }
    | IDENTIFIER      { if (!($$ = $1 == "override"))
                            yyerror("syntax error, expecting override or method body"); }

body: BLOCK
    | '=' ZERO ';'    { $$ = "= 0;"; }
    | '=' DEFAULT ';' { $$ = "= default;"; }
    | '=' DELETE ';'  { $$ = "= delete;"; }
    | ';'             { $$ = nullptr; }
    ;

irField
    : modifiers type fieldName optInitializer ';'
          { $$ = new IrField(@3, $2, $3, $4, $1);
            if ($1 & IrElement::Virtual)
                yyerror("virtual invalid on field %s", $3); }
    | modifiers CONST nonRefType fieldName optInitializer ';'
          { $$ = new IrField(@4, $3, $4, $5, $1 | IrElement::Const);
            if ($1 & IrElement::Virtual)
                yyerror("virtual invalid on field %s", $4); }
    ;

modifier
    : NULLOK    { $$ = IrElement::NullOK; }
    | INLINE    { $$ = IrElement::Inline; }
    | OPTIONAL  { $$ = IrElement::Optional; }
    | STATIC    { $$ = IrElement::Static; }
    | VIRTUAL   { $$ = IrElement::Virtual; }
    ;

modifiers : { $$ = 0; } | modifiers modifier { $$ = $1 | $2; }

fieldName: IDENTIFIER | OPTIONAL { $$ = "optional"; } ;

optInitializer
    : /* empty */       { $$ = nullptr; }
    | '=' expression    { $$ = $2; }
    | '=' BLOCK         { $$ = $2; }
    ;

lookup_scope
    : DBLCOL                            { $$ = new LookupScope(); }
    | IDENTIFIER DBLCOL                 { $$ = new LookupScope(0, $1); }
    | lookup_scope IDENTIFIER DBLCOL    { $$ = new LookupScope($1, $2); }

nonRefType
    : IDENTIFIER                        { $$ = new NamedType(@1, 0, $1); }
    | lookup_scope IDENTIFIER           { $$ = new NamedType(@2, $1, $2); }
    | lookup_scope OPTIONAL             { $$ = new NamedType(@2, $1, "optional"); }
    | nonRefType '<' type_args '>'      { $$ = new TemplateInstantiation(@1+@4, $1, *$3); }
    | nonRefType '[' INTEGER ']'        { $$ = new ArrayType(@1+@4, $1, atoi($3)); }
    ;

type: nonRefType
    | type '&'                          { $$ = new ReferenceType($1); }
    | type CONST '&'                    { $$ = new ReferenceType($1, true); }
    | CONST nonRefType '&'              { $$ = new ReferenceType($2, true); }
    | type '*'                          { $$ = new PointerType($1); }
    | type CONST '*'                    { $$ = new PointerType($1, true); }
    | CONST nonRefType '*'              { $$ = new PointerType($2, true); }
    ;

type_args
    : type_arg                          { $$ = new std::vector<const Type *>{$1}; }
    | type_args ',' type_arg            { ($$ = $1)->push_back($3); }
    ;

type_arg
    : type                              { $$ = $1; }
    | type '(' optTypeList ')'          { $$ = new FunctionType($1, *$3); }
    ;

optTypeList
    :                                   { $$ = new std::vector<const Type *>(); }
    | typeList                          { $$ = $1; }
    ;

typeList
    : type                              { $$ = new std::vector<const Type *>{$1}; }
    | typeList ',' type                 { ($$ = $1)->push_back($3); }

constFieldInit
    : modifiers IDENTIFIER '=' expression ';'
          { $$ = new ConstFieldInitializer(@2, $2, $4);
            if ($1) yyerror("%s invalid on constant", IrElement::modifier($1)); }
    ;

expression
    : name | STRING | INTEGER | ZERO
    | expression '(' ')'                { $$ = $1 + "()"; }
    | expression '+' '+'                { $$ = $1 + "++"; }
    | NEW name                          { $$ = "new " + $2; }
    ;

name: IDENTIFIER
    | name DBLCOL IDENTIFIER    { $$ = $1 + "::" + $3; }
    | name '<' name '>'         { $$ = $1 + "<" + $3 + ">"; }
    ;

/*****************************************************************************/

%%
}  // end anonymous namespace

void yyerror(const char *fmt, ...) {
    auto& context = BaseCompileContext::get();
    if (!strcmp(fmt, "syntax error, unexpected IDENTIFIER")) {
        context.errorReporter().parser_error(sources,
                                             "syntax error, unexpected IDENTIFIER \"%s\"",
                                             yylval.str.c_str());
        return;
    }
    va_list args;
    va_start(args, fmt);
    context.errorReporter().parser_error(sources, fmt, args);
    va_end(args);
}

IrDefinitions *parse(char** files, int count) {
    int errors = 0;
    class IrgenCompileContext : public BaseCompileContext { } ctxt;
    AutoCompileContext ctxt_ctl(&ctxt);
#ifdef YYDEBUG
    if (const char *p = getenv("YYDEBUG"))
        yydebug = atoi(p);
#endif
    if (count <= 0) {
        ::error("No input files specified");
        errors = 1; }

    for (int i = 0; i < count; i++) {
        if (FILE *fp = fopen(files[i], "r")) {
            sources->mapLine(files[i], 1);
            yyrestart(fp);
            BEGIN(NORMAL);
            errors |= yyparse();
            fclose(fp);
            if (errors & 2) {
                error("out of memory");
                break; }
        } else {
            ::error("Cannot open file %s", files[i]);
            perror("");
            errors |= 1; } }

    return errors ? nullptr : new IrDefinitions(global);
}
