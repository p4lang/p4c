#!/bin/bash

# Script for building in a Docker container on Travis.

set -e  # Exit on error.

export P4C_DEPS="bison \
             build-essential \
             cmake \
             curl \
             flex \
             g++ \
             libboost-dev \
             libboost-graph-dev \
             libboost-iostreams1.58-dev \
             libfl-dev \
             libgc-dev \
             libgmp-dev \
             pkg-config \
             tcpdump"

export P4C_EBPF_DEPS="libpcap-dev \
             libelf-dev \
             llvm \
             clang \
             iproute2 \
             net-tools"

export P4C_RUNTIME_DEPS="cpp \
                     libboost-graph1.58.0 \
                     libboost-iostreams1.58.0 \
                     libgc1c2 \
                     libgmp10 \
                     libgmpxx4ldbl \
                     python"

export P4C_PIP_PACKAGES="ipaddr \
                     pyroute2 \
                     ply==3.8 \
                     scapy==2.4.0"

apt-get update
apt-get install -y --no-install-recommends \
  ${P4C_DEPS} \
  ${P4C_EBPF_DEPS} \
  ${P4C_RUNTIME_DEPS} \
  git

# We install pip with get-pip.py (https://pip.pypa.io/en/stable/installing/)
# since the Ubuntu package manager's version of pip seems to be broken on
# Ubuntu 16.04.
mkdir /tmp/pip
cd /tmp/pip
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python get-pip.py
cd -
rm -rf /tmp/pip

pip install $P4C_PIP_PACKAGES

function build() {
  mkdir build
  cd build

  cmake .. '-DCMAKE_CXX_FLAGS:STRING=-O3' "$@"
  make
}

if [[ "${BUILD_NON_UNIFIED}" == 1 ]] ; then
  build '-DENABLE_UNIFIED_COMPILATION=OFF'

  if [[ "${BUILD_UNIFIED}" == 1 ]] ; then
    # Clean up for the unified build.
    cd ..
    git clean -xfd
  fi
fi

if [[ "${BUILD_UNIFIED}" == 1 || "${BUILD_NON_UNIFIED}" != 1 ]] ; then
  build
fi

make install
/usr/local/bin/ccache -p -s

if [[ "${IMAGE_TYPE}" == "build" ]] ; then
  apt-get purge -y ${P4C_DEPS} git
  apt-get autoremove --purge -y
  rm -rf /p4c /var/cache/apt/* /var/lib/apt/lists/*
  echo 'Build image ready'

elif [[ "${IMAGE_TYPE}" == "test" ]] ; then
  echo 'Test image ready'

fi
