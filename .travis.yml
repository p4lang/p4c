# Travis CI integration for p4c using Docker.

branches:
  only:
  - master
  - stable

os:
  - linux
  - osx

services:
  - docker

cache:
  directories:
  - $HOME/.ccache

env:
  - CTEST_PARALLEL_LEVEL=4
    UNIFIED=ON
    ENABLE_GMP=ON
  - CTEST_PARALLEL_LEVEL=4
    UNIFIED=OFF
    ENABLE_GMP=ON
  - CTEST_PARALLEL_LEVEL=4
    UNIFIED=ON
    ENABLE_GMP=OFF

before_install:
  - tools/install_os_deps.sh
  - if [[ $TRAVIS_OS_NAME == 'osx' ]] ; then export PATH="/usr/local/opt/bison/bin:$PATH" ; fi

install:
  - if [[ $TRAVIS_OS_NAME == 'linux' ]] ; then tools/start_ccache; fi
  # To flush out issues with unified vs. non-unified builds, do a non-unified
  # build before continuing with the rest, which produces a unified build.
  # This is done here on MacOS; for Linux, this is done in Dockerfile.
  - if [[ $TRAVIS_OS_NAME == 'linux' ]] ; then docker build --network ccache_network -t p4c --build-arg IMAGE_TYPE=test --build-arg ENABLE_UNIFIED_COMPILATION=$UNIFIED --build-arg ENABLE_GMP=$ENABLE_GMP . ; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]] ; then ./bootstrap.sh -DCMAKE_BUILD_TYPE=RELEASE -DENABLE_UNIFIED_COMPILATION=$UNIFIED -DENABLE_GMP=$ENABLE_GMP && cd build && make -j2; fi

script:
  - if [[ $TRAVIS_OS_NAME == 'linux' && $UNIFIED == ON ]] ; then docker run -w /p4c/build -e CTEST_PARALLEL_LEVEL p4c ctest --output-on-failure --schedule-random ; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' && $UNIFIED == ON ]] ; then ctest --output-on-failure -j 2 --schedule-random -LE "bpf$" ; fi
