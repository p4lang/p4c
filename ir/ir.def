/* -*-C++-*- */

/*
  P4 compiler IR definition file.
  To understand this you really have to understand the shape of the generated IR code.

  The IR builder "knows" the following methods for a class T:

  cstring toString() const override;
  void dbprint(std::ostream &out) const override;
  bool operator==(const T &a) const;
  void validate() const;
  const char *node_type_name() const;
  void visit_children(Visitor &v);
  void dump_fields(std::ostream& out) const;

  C comments are ignored.
  C++ line comments can appear in some places and are emitted in the output.

  #emit/#end     -> copy text literally to output header file
  #emitimpl/#end -> copy text literally to output C++ file
  #noXXX         -> do not emit the specified implementation for the XXX method
                    e.g., #noconstructor, #nodbprint, #novisit_children
  #apply         -> generate apply overload for visitors
  method{ ... }  -> specifies an implementation for a default method
                    method can be 'operator=='

  Some assignments are turned into methods returning constant values:
  stringOp     -> cstring getStringOp() const
  precedence   -> int getPrecedence() const
 */

class ParserState : ISimpleNamespace, Declaration, IAnnotated {
    Annotations               annotations;
    IndexedVector<StatOrDecl> components;
    // selectExpression can be a SelectExpression, or a PathExpression representing a state
    NullOK Expression         selectExpression;

    Annotations getAnnotations() const override { return annotations; }
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return components->getDeclarations(); }
    const IDeclaration* getDeclByName(cstring name) const override {
        return components->getDeclaration(name); }

    static const cstring accept;
    static const cstring reject;
    static const cstring start;
    static const cstring verify;
    bool isBuiltin() const { return name == ParserState::accept || name == ParserState::reject; }
    validate{
        if (selectExpression != nullptr)
            BUG_CHECK(selectExpression->is<IR::PathExpression>() ||
                      selectExpression->is<IR::SelectExpression>(),
                      "%1%: unexpected select expression", selectExpression);
    }
}

// A parser that contains all states (unlike the P4 v1.0 parser, which is really just a state)
class P4Parser : Type_Declaration, ISimpleNamespace, IApply, IContainer {
    Type_Parser          type;
    ParameterList        constructorParams;
    IndexedVector<Declaration>  parserLocals;
    IndexedVector<ParserState>  states;

    TypeParameters getTypeParameters() const override { return type->getTypeParameters(); }
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return parserLocals->getDeclarations()->concat(states->getDeclarations()); }
    IDeclaration getDeclByName(cstring name) const override {
        auto decl = parserLocals->getDeclaration(name);
        if (decl != nullptr)
            return decl;
        return states->getDeclaration(name); }
    Type_Method getApplyMethodType() const override { return type->getApplyMethodType(); }
    Type_Method getConstructorMethodType() const override;
    ParameterList getConstructorParameters() const override { return constructorParams; }
    void checkDuplicates() const;
#apply
    validate {
        if (!(name == type->name))
            BUG("Name mismatch for %1%: %2% != %3%", this, name, type->name);
        parserLocals->check_null();
        states->check_null();
        checkDuplicates();
    }
    toString { return cstring("parser ") + externalName(); }
}

class P4Control : Type_Declaration, ISimpleNamespace, IApply, IContainer {
    Type_Control         type;
    ParameterList        constructorParams;
    IndexedVector<Declaration>  controlLocals;
    BlockStatement       body;

    TypeParameters getTypeParameters() const override { return type->getTypeParameters(); }
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return controlLocals->getDeclarations(); }
    Type_Method getApplyMethodType() const override { return type->getApplyMethodType(); }
    Type_Method getConstructorMethodType() const override;
    IDeclaration getDeclByName(cstring name) const override {
        return controlLocals->getDeclaration(name); }
    ParameterList getConstructorParameters() const override { return constructorParams; }
#apply
    validate {
        if (!(name == type->name))
            BUG("Name mismatch for %1%: %2% != %3%", this, name, type->name);
        controlLocals->check_null();
    }
    toString { return cstring("control ") + externalName(); }
}

class P4Action : Declaration, ISimpleNamespace, IAnnotated {
    Annotations    annotations;
    ParameterList  parameters;
    BlockStatement body;
    Util::Enumerator<IDeclaration>* getDeclarations() const override;
    IDeclaration getDeclByName(cstring name) const override;
    Annotations getAnnotations() const override { return annotations; }
}

class Type_Error : ISimpleNamespace, Type_Declaration {
    static const cstring error;
    IndexedVector<Declaration_ID> members;
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return members->getDeclarations(); }
    IDeclaration getDeclByName(cstring name) const override {
        return members->getDeclaration(name); }
    validate{ members->check_null(); }
}

// Not a subclass of IDeclaration
class Declaration_MatchKind : ISimpleNamespace {
    IndexedVector<Declaration_ID> members;
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return members->getDeclarations(); }
    IDeclaration getDeclByName(cstring name) const override {
        return members->getDeclaration(name); }
    validate{ members->check_null(); }
}

// Table property value abstract base class
abstract PropertyValue { }

// A property whose value is an expression
class ExpressionValue : PropertyValue {
    Expression expression;
    dbprint { out << expression; }
}

class ExpressionListValue : PropertyValue {
    inline Vector<Expression> expressions;
    dbprint { out << expressions; }
}

// An element in a table actions list
class ActionListElement : IAnnotated, IDeclaration {
    Annotations annotations;
    Expression  expression;  // This can be a PathExpression or a MethodCallExpression
    dbprint { out << annotations << expression; }
    ID getName() const override { return getPath()->name; }
    Path getPath() const;
    Annotations getAnnotations() const override { return annotations; }
    validate {
        BUG_CHECK(expression->is<IR::PathExpression>() ||
                  expression->is<IR::MethodCallExpression>(),
                  "%1%: unexpected expression", expression);
    }
    toString{ return getName().toString(); }
}

// A list of actions (in a table)
class ActionList : PropertyValue {
    IndexedVector<ActionListElement> actionList;
    validate{ actionList->check_null(); }
    size_t size() const { return actionList->size(); }
}

class KeyElement {
    Annotations     annotations;
    Expression      expression;
    PathExpression  matchType;

    const IR::Node *transform_visit(Transform &v) {
        // call this from Transform::preorder(KeyElement) if the transform might split
        // the expression into a Vector<Expression>
        v.visit(annotations, "annotations");
        auto exp = v.apply_visitor(expression, "expression");
        v.visit(matchType, "matchType");
        v.prune();
        if (exp == expression) {
        } else if (auto vec = exp->to<Vector<Expression>>()) {
            auto *rv = new Vector<KeyElement>();
            for (auto el : *vec) {
                auto *kel = clone();
                kel->expression = el;
                rv->push_back(kel); }
            return rv;
        } else {
            expression = exp->to<IR::Expression>(); }
        return this; }
}

// Value of a table key property
class Key : PropertyValue {
    Vector<KeyElement> keyElements;
    validate { keyElements->check_null(); }
}

class Property : Declaration, IAnnotated {
    optional Annotations   annotations = Annotations::empty;
    PropertyValue value;
    bool          isConstant;
    Annotations getAnnotations() const override { return annotations; }
    dbprint { out << annotations << (isConstant ? "const " : "") << name << " = " << value; }
}

class TableProperties : ISimpleNamespace {
    IndexedVector<Property> properties;
    toString{ return "TableProperties(" + Util::toString(properties->size()) + ")"; }
    TableProperties() { properties = new IndexedVector<Property>(); }
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return properties->getDeclarations(); }
    Property getProperty(cstring name) const {
        return properties->getDeclaration<Property>(name); }
    IDeclaration getDeclByName(cstring name) const override {
        return properties->getDeclaration(name); }

    static const cstring actionsPropertyName;
    static const cstring keyPropertyName;
    static const cstring defaultActionPropertyName;
#nodbprint
    validate{ properties->check_null(); }
}

class P4Table : Declaration, IAnnotated, IApply {
    Annotations     annotations;
    TableProperties properties;

    Annotations getAnnotations() const override { return annotations; }
    Type_Method getApplyMethodType() const override;
    ActionList getActionList() const {
        auto ap = properties->getProperty(TableProperties::actionsPropertyName);
        if (ap == nullptr)
            return nullptr;
        if (!ap->value->is<IR::ActionList>()) {
            ::error("%1% must be an action list", ap);
            return nullptr; }
        return ap->value->to<IR::ActionList>(); }
    Key getKey() const {
        auto kp = properties->getProperty(TableProperties::keyPropertyName);
        if (kp == nullptr)
            return nullptr;
        if (!kp->value->is<IR::Key>()) {
            ::error("%1% must be a key", kp);
            return nullptr; }
        return kp->value->to<IR::Key>(); }
    Expression getDefaultAction() const {
        auto d = properties->getProperty(TableProperties::defaultActionPropertyName);
        if (d == nullptr)
            return nullptr;
        if (!d->value->is<IR::ExpressionValue>()) {
            ::error("%1% must be an expression", d);
            return nullptr; }
        return d->value->to<IR::ExpressionValue>()->expression; }
    Constant getConstantProperty(cstring name) const {
        if (auto d = properties->getProperty(name)) {
            if (auto ev = d->value->to<IR::ExpressionValue>()) {
                if (auto k = ev->expression->to<IR::Constant>()) {
                    return k; } }
            error("%1% must be a constant expression", d); }
        return nullptr; }
}

class Declaration_Variable : Declaration, IAnnotated {
    Annotations        annotations;
    Type               type;
    NullOK Expression  initializer;

    Annotations getAnnotations() const override { return annotations; }
    dbprint {
        out << annotations << type << ' ' << name;
        if (initializer) out << " = " << *initializer; }
}

class Declaration_Constant : Declaration, IAnnotated {
    Annotations        annotations;
    Type               type;
    Expression         initializer;

    Annotations getAnnotations() const override { return annotations; }
    toString { return Declaration::toString(); }
    dbprint { out << annotations << type << ' ' << name << " = " << *initializer; }
}

// Like a variable, but for a statically allocated instance.
// The syntax is Contructor(args) name = initializer;
class Declaration_Instance : Declaration, IAnnotated, IInstance {
    optional Annotations  annotations = Annotations::empty;
    Type                  type;  // Either Type_Name or Type_Specialized or Type_Extern
    Vector<Expression>    arguments;
    inline NameMap<Property> properties = {};  // P4_14 externs only, at the moment
    optional NullOK BlockStatement initializer = nullptr;
        // experimental only; contains just declarations, no code

    Annotations getAnnotations() const override { return annotations; }
    Type getType() const override { return type; }
    cstring Name() const override { return name; }
    validate{ BUG_CHECK(type->is<Type_Name>() ||
                        type->is<Type_Specialized>() ||
                        type->is<Type_Extern>(),        // P4_14 only?
                        "%1%: unexpected type", type);
        arguments->check_null(); }
}

// Toplevel program representation
class P4Program : ISimpleNamespace {
    IndexedVector<Node> declarations;
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return declarations->getDeclarations(); }
    IDeclaration getDeclByName(cstring name) const override {
        return declarations->getDeclaration(name); }
    static const cstring main;
#apply
}

///////////////////////////// Statements //////////////////////////

abstract Statement : StatOrDecl {
}

class ExitStatement : Statement {
    toString{ return "exit"; }
    dbprint { out << "exit"; }
}

class ReturnStatement : Statement {
    NullOK Expression expression;
    toString{ return "return"; }
}

class EmptyStatement : Statement {
    dbprint { out << ""; }
}

class AssignmentStatement : Statement {
    Expression left;
    Expression right;
}

class IfStatement : Statement {
    Expression       condition;
    Statement        ifTrue;
    NullOK Statement ifFalse;
    visit_children {
        v.visit(condition, "condition");
        auto &clone(v.flow_clone());
        v.visit(ifTrue, "ifTrue");
        clone.visit(ifFalse, "ifFalse");
        v.flow_merge(clone);
    }
}

class BlockStatement : Statement, ISimpleNamespace {
    Annotations annotations;
    IndexedVector<StatOrDecl> components;
    IDeclaration getDeclByName(cstring name) const override {
        return components->getDeclaration(name); }
    Util::Enumerator<IDeclaration>* getDeclarations() const override {
        return components->getDeclarations(); }
}

class MethodCallStatement : Statement {
    MethodCallExpression methodCall;
}

class SwitchCase {
    Expression       label;  // Can be DefaultExpression or a PathExpression
    NullOK Statement statement;  // If missing then it's a fall-through
#nodbprint
    validate{
        BUG_CHECK(label->is<IR::DefaultExpression>() ||
                  label->is<IR::PathExpression>(),
                  "%1%: Unexpected expression for switch case",
                  label);
        BUG_CHECK(statement == nullptr || statement->is<IR::BlockStatement>(),
                  "%1%: Expected a block statement",
                  statement);
    }
}

// The type system will enforce the fact that
// expression is IR::Member(IR::MethodCallExpression(table_apply), Type_Table::action_run)
class SwitchStatement : Statement {
    Expression expression;
    inline Vector<SwitchCase> cases;
#nodbprint
    visit_children {
        v.visit(expression, "expression");
        cases.parallel_visit_children(v); }
}

class Function : Declaration {
    Type_Method    type;
    BlockStatement body;
}

/////////////////////////////////////////////////////////////

// Block is the base class for IR nodes produced by the evaluator.
// A block represents a compile-time allocated resource.
// Blocks are not visited using visitors, so the visit_children()
// method is empty.  Users have to write custom visitors to
// traverse the constantValue map.
abstract Block : CompileTimeValue {
    Node node;  // Node that evaluates to this block.
    // It's either a Declaration_Instance or a ConstructorCallExpression.

    // One value for each Node inside that evaluates to a compile-time constant.
    // This includes all constructor parameters, and all inner nested blocks.
    ordered_map<Node, CompileTimeValue> constantValue = {};

    virtual void dbprint(std::ostream& out) const override;
    virtual void dbprint_recursive(std::ostream& out) const;
    void setValue(Node node, CompileTimeValue value) {
        CHECK_NULL(node); CHECK_NULL(value);
        auto it = constantValue.find(node);
        BUG_CHECK(it == constantValue.end(), "%1% already set", node);
        constantValue[node] = value; }
    CompileTimeValue getValue(Node node) const {
        CHECK_NULL(node);
        auto it = constantValue.find(node);
        if (it == constantValue.end())
            return nullptr;
        return it->second; }
    visit_children { (void)v; }
}

class TableBlock : Block {
    P4Table container;
#nodbprint
}

// An object that has been instantiated
// The substitution holds the constructor arguments.
abstract InstantiatedBlock : Block {
    Type instanceType;  // May be a SpecializedType

    virtual ParameterList getConstructorParameters() const = 0;
    void instantiate(std::vector<CompileTimeValue> *args);
    CompileTimeValue getParameterValue(cstring paramName) const;
    virtual void dbprint(std::ostream& out) const override;
}

class ParserBlock : InstantiatedBlock {
    P4Parser container;
    ParameterList getConstructorParameters() const override {
        return container->constructorParams; }
#nodbprint
}

class ControlBlock : InstantiatedBlock {
    P4Control container;
    ParameterList getConstructorParameters() const override {
        return container->constructorParams; }
#nodbprint
}

class PackageBlock : InstantiatedBlock {
    Type_Package type;
    ParameterList getConstructorParameters() const override { return type->constructorParams; }
#nodbprint
}

class ExternBlock : InstantiatedBlock {
    Type_Extern type;
    Method      constructor;  // used to instantiate this block
    ParameterList getConstructorParameters() const override {
        return constructor->type->parameters; }
#nodbprint
}

// Represents the program as a whole
class ToplevelBlock : Block {
    P4Program getProgram() const { return node->to<IR::P4Program>(); }
    PackageBlock getMain() const;
#nodbprint
    validate { BUG_CHECK(node->is<IR::P4Program>(), "%1%: expected a P4Program", node); }
}
