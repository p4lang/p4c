/* -*-C++-*- */

/*
  This file contains IR classes needed just for the P4 v1.0/v1.1 front-end.
*/

#emit
namespace IR {
enum class CounterType { NONE, PACKETS, BYTES, BOTH };
}

inline std::ostream& operator<<(std::ostream &out, IR::CounterType d) {
    switch (d) {
        case IR::CounterType::NONE:
            out << "NONE";
            break;
        case IR::CounterType::PACKETS:
            out << "PACKETS";
            break;
        case IR::CounterType::BYTES:
            out << "BYTES";
            break;
        case IR::CounterType::BOTH:
            out << "BOTH";
            break;
        default:
            BUG("Unhandled case");
    }
    return out;
}
#end

abstract HeaderOrMetadata {
    IR::ID                      type_name;
    IR::ID                      name;
    NullOK Type_StructLike      type;
#emit
    HeaderOrMetadata(IR::ID n, const Type_StructLike *t) : type_name(t->name), name(n), type(t) {}
#end
    dbprint { out << type_name << ' ' << name; }
}

class Header : HeaderOrMetadata {
#emit
    Header(IR::ID n, const Type_Header *t) : HeaderOrMetadata(n, t) {}
#end
#nodbprint
}

class HeaderStack : HeaderOrMetadata {
    int size;
#emit
    HeaderStack(IR::ID n, const Type_Header *t, int sz) : HeaderOrMetadata(n, t), size(sz) {}
#end
#nodbprint
}

class Metadata : HeaderOrMetadata {
#emit
    Metadata(IR::ID n, const Type_Struct *t) : HeaderOrMetadata(n, t) {}
#end
#nodbprint
}

abstract HeaderRef : Expression {
#noconstructor
#emit
    HeaderRef() {}
    HeaderRef(Util::SourceInfo si) : Expression(si) {}
    HeaderRef(Util::SourceInfo si, const Type_StructLike *ht) : Expression(si, ht) {}
#end
}

class ConcreteHeaderRef : HeaderRef {
    HeaderOrMetadata    ref;
#noconstructor
#emit
    ConcreteHeaderRef(Util::SourceInfo si, const HeaderOrMetadata *r)
    : HeaderRef(si, r->type), ref(r) {}
    ConcreteHeaderRef(const HeaderOrMetadata *r) : HeaderRef(Util::SourceInfo(), r->type), ref(r) {}
#end
    toString{ return ref->name; }
    dbprint{ out << ref->name; }
}

class HeaderStackItemRef : HeaderRef {
    Expression      base_;
    Expression      index_;
#noconstructor
#emit
    HeaderStackItemRef(Util::SourceInfo si, const Type_Header *t, const Expression *b,
                       const Expression *i)
    : HeaderRef(si, t), base_(b), index_(i) {}
    HeaderStackItemRef(Util::SourceInfo si, const Expression *b, const Expression *i)
    : HeaderRef(si), base_(b), index_(i) {}
    const Expression* base() const { return base_; }
    const Expression* index() const { return index_; }
    void set_base(const Expression *b) { base_ = b; }
#end
    toString{ return base_->toString() + "[" + index_->toString() + "]"; }
}

class NamedRef : Expression {
    ID     name;
#emit
    explicit NamedRef(ID n) : name(n) {}
    NamedRef(const Type *t, ID n) : Expression(t), name(n) {}
#end
    toString{ return name; }
}

class If :  Expression {
    Expression            pred;
    NullOK Vector<Expression>    ifTrue;
    NullOK Vector<Expression>    ifFalse;
#emit
    If(const Expression *p, const Vector<Expression> *T, const Vector<Expression> *F)
            : pred(p), ifTrue(T), ifFalse(F) { validate(); }
#end
    visit_children {
        v.visit(pred, "pred");
        auto &clone(v.flow_clone());
        v.visit(ifTrue, "ifTrue");
        clone.visit(ifFalse, "ifFalse");
        v.flow_merge(clone);
        Expression::visit_children(v);
    }
}

// an if condition tagged with a name so we can refer to it
class NamedCond : If {
    cstring  name;
#emit
    static cstring unique_name();
    NamedCond(const Expression *p, const Vector<Expression> *T,
       const Vector<Expression> *F) : If(p, T, F), name(unique_name()) {}
    explicit NamedCond(const If &i) : If(i), name(unique_name()) {}
#end
    operator== { return If::operator==(a); }
#noconstructor
#nodbprint
}

class Apply : Expression {
    ID                                  name;
    inline NameMap<Vector<Expression>>  actions;
#emit
    Apply() = default;
    explicit Apply(ID n) : name(n) {}
    Apply(const Util::SourceInfo &si, ID n) : Expression(si), name(n) {}
#end
#noconstructor
    visit_children {
        auto &clone(v.flow_clone());
        // HACK -- temp sort actions into program (source) order, so that condition names are
        // generated in the same order as p4-hlir
        typedef std::remove_reference<decltype(actions.at("any"))>::type action_t;
        vector<action_t *> sort_actions;
        for (auto &p : Values(actions)) sort_actions.push_back(&p);
        std::sort(sort_actions.begin(), sort_actions.end(),
            [](action_t *a, action_t *b) {
                return (*a)->srcInfo.getStart() < (*b)->srcInfo.getStart(); });
        for (auto p : sort_actions) {
            auto &clone2(clone.flow_clone());
            clone2.visit(*p);
            v.flow_merge(clone2); }
        Expression::visit_children(v);
    }
}

class Primitive : Operation {
    cstring name;
    inline Vector<Expression> operands;
#emit
    explicit Primitive(cstring n) : name(n) {}
    Primitive(Util::SourceInfo si, cstring n) : Operation(si), name(n) {}
    Primitive(cstring n, const Vector<Expression> *l) : name(n) {
        if (l) for (auto e : *l) operands.push_back(e); }
    Primitive(Util::SourceInfo si, cstring n, const Vector<Expression> *l)
    : Operation(si), name(n) {
        if (l) for (auto e : *l) operands.push_back(e); }
    Primitive(cstring n, const Expression *a1) : name(n) {
        operands.push_back(a1); }
    Primitive(Util::SourceInfo si, cstring n, const Expression *a1) : Operation(si), name(n) {
        operands.push_back(a1); }
    Primitive(cstring n, const Expression *a1, const Expression *a2) : name(n) {
        operands.push_back(a1); operands.push_back(a2); }
    Primitive(Util::SourceInfo si, cstring n, const Expression *a1, const Expression *a2)
    : Operation(si), name(n) {
        operands.push_back(a1); operands.push_back(a2); }
    Primitive(cstring n, const Expression *a1, const Vector<Expression> *a2) : name(n) {
        operands.push_back(a1);
        if (a2) for (auto e : *a2) operands.push_back(e); }
    Primitive(Util::SourceInfo si, cstring n, const Expression *a1, const Vector<Expression> *a2)
    : Operation(si), name(n) {
        operands.push_back(a1);
        if (a2) for (auto e : *a2) operands.push_back(e); }
    Primitive(cstring n, const Expression *a1, const Expression *a2, const Expression *a3)
    : name(n) {
        operands.push_back(a1); operands.push_back(a2); operands.push_back(a3); }
    Primitive(Util::SourceInfo si, cstring n, const Expression *a1, const Expression *a2,
              const Expression *a3) : Operation(si), name(n) {
        operands.push_back(a1); operands.push_back(a2); operands.push_back(a3); }
    virtual bool isOutput(int operand_index) const;
    virtual unsigned inferOperandTypes() const;
    virtual void typecheck() const;
#end
#apply
    stringOp = name;
    precedence = DBPrint::Prec_Postfix;
}

class FieldList {
    ID                          name;
    bool                        payload;
    inline Vector<Expression>   fields;
#noconstructor
#emit
    FieldList() = default;
#end
}

class FieldListCalculation {
    ID                  name;
    NameList            input;
    ID                  algorithm;
    int                 output_width;
#noconstructor
#emit
    FieldListCalculation() = default;
#end
}

class CalculatedField {
    Expression            field;
#noconstructor
#emit
    CalculatedField() = default;
    struct update_or_verify {
        Util::SourceInfo        srcInfo;
        bool                    update;
        ID                      name;
        const Expression       *cond;
        update_or_verify(Util::SourceInfo si, bool u, ID n, const Expression *c)
        : srcInfo(si), update(u), name(n), cond(c) {}
        bool operator==(const update_or_verify &a) const { return update == a.update &&
            name == a.name && cond == a.cond; }
    };
#end
    vector<update_or_verify>    specs;
    visit_children { v.visit(field, "field"); for (auto &s : specs) v.visit(s.cond, s.name.name); }
}

class CaseEntry {
    vector<std::pair<Constant, Constant>>       values;
    ID                                          action;
#emit
    CaseEntry() = default;
#end
}

class V1Parser {
    ID                          name;
    inline Vector<Expression>   stmts;
    NullOK Vector<Expression>   select;
    NullOK Vector<CaseEntry>    cases;
    ID                          default_return;
    ID                          parse_error;
    bool                        drop;
#noconstructor
#emit
    V1Parser() = default;
#end
    toString { return node_type_name() + " " + name; }
}

class ParserException {}

abstract Attached {
    ID     name;
#emit
    Attached() = default;
    virtual const char *kind() const = 0;
    virtual bool indexed() const { return false; }
    Attached *clone_rename(const char *ext) const {
        Attached *rv = clone();
        rv->name = IR::ID(Util::SourceInfo(), rv->name.name + ext);
        return rv; }
#end
    dbprint { out << node_type_name() << " " << name; }
    toString { return node_type_name() + " " + name; }
}

abstract Stateful : Attached {
    ID          table;
    bool        direct;
    bool        saturating;
    int         instance_count = -1;
#emit
    Stateful() = default;
    virtual bool indexed() const { return !direct; }
#end
}

abstract CounterOrMeter : Stateful {
    CounterType   type;
#emit
    CounterOrMeter() = default;
    void settype(cstring t) {
        if (t == "packets") type = CounterType::PACKETS;
        else if (t == "bytes") type = CounterType::BYTES;
        else if (t == "packets_and_bytes") type = CounterType::BOTH;
        else error("%s: Unknown type %s", srcInfo, t); }  // NOLINT
#end
}

class Counter : CounterOrMeter {
    int         max_width = -1;
    int         min_width = -1;
#emit
    Counter() = default;
    const char *kind() const { return "stats"; }
#end
}

class Meter : CounterOrMeter {
    NullOK Expression   result;
    NullOK Expression   pre_color;
    ID                  implementation;
#emit
    Meter() = default;
    const char *kind() const { return "meter"; }
#end
}

class Register : Stateful {
    ID          layout;
    int         width = -1;
    bool        signed_;
 /* bool        saturating; */
#emit
    Register() = default;
    const char *kind() const { return "register"; }
#end
}

class PrimitiveAction {}

class NameList {
    vector<ID>          names;
#emit
    NameList() = default;
    NameList(Util::SourceInfo si, cstring n) { names.emplace_back(si, n); }
#end
}

class ActionArg : Expression {
    ID             name;
    bool           read = false;
    bool           write = false;
#emit
    explicit ActionArg(const ID &n) : Expression(n.srcInfo), name(n) {}
    ActionArg(Util::SourceInfo si, const Type *t, const ID &n) : Expression(si, t), name(n) {}
#end
    dbprint{ out << name; }
    toString{ return name.name; }
}

// Represents a P4 v1.0 action
class ActionFunction {
    ID                          name;
    inline Vector<Primitive>    action;
    vector<ActionArg>           args;
#noconstructor
#emit
    ActionFunction() = default;
    const ActionArg     *arg(cstring n) const {
        for (auto a : args)
            if (a->name == n)
                return a;
        return nullptr; }
#end
    visit_children {
        action.visit_children(v);
        // DANGER -- visiting action first so type inferencing will push types to
        // DANGER -- action args based on use.  This is immoral.
        for (auto &a : args) v.visit(a);
    }
    toString {
        return cstring("action ") + name + " {\n" +
                 cstring::join(action.begin(), action.end(), ";\n") +
                 " }"; }
}

class ActionProfile : Attached {
    ID          selector;
    vector<ID>  actions;
    int         size;
#noconstructor
#emit
    const char *kind() const { return "action_profile"; }
    bool indexed() const { return true; }
#end
}

class ActionSelector : Attached {
    ID key;
    ID mode;
    ID type;
#noconstructor
#emit
    const char *kind() const { return "action_selector"; }
#end
}

class V1Table {
    ID                          name;
    Vector<Expression>          reads = 0;
    vector<ID>                  reads_types;
    int                         min_size = 0;
    int                         max_size = 0;
    int                         size = 0;
    ID                          action_profile;
    vector<ID>                  actions;
    ID                          default_action;
    NullOK Vector<Expression>   default_action_args = 0;
    inline TableProperties      properties;  // non-standard properties
#noconstructor
#emit
    V1Table() = default;
    // inefficient add
    void addProperty(const TableProperty* prop) {
        auto props = new IndexedVector<TableProperty>(*properties.properties);
        props->push_back(prop);
        properties = TableProperties(properties.srcInfo, props); }
#end
    toString { return node_type_name() + " " + name; }
}

class V1Control {
    ID                            name;
    Vector<Expression>            code;
#emit
    explicit V1Control(ID n) : name(n), code(new Vector<Expression>()) {}
    V1Control(Util::SourceInfo si, ID n) : Node(si), name(n), code(new Vector<Expression>()) {}
#end
#apply
    toString { return node_type_name() + " " + name; }
}

#emit
class CompilerOptions;
#end

class V1Program {
    inline NameMap<Node, std::multimap>         scope;
#noconstructor
#emit
    V1Program(const CompilerOptions &);
    template<class T> const T *get(cstring name) const { return scope.get<T>(name); }
    void add(cstring name, const Node *n) { scope.add(name, n); }
#end
#apply
}
