name: "validate-p4c"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel any preceding run on the pull request.
concurrency:
  group: validation-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # We run validation in parallel with the normal tests.
  # Validation ensures that P4C compiles P4-16 programs correctly.
  # We only test the front end and some mid end passes for now.
  validate:
    env:
      UNIFIED: ON
      BUILD_SUCCESS: true
      CTEST_PARALLEL_LEVEL: 4
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: validation-${{ runner.os }}
        max-size: 1000M

    - name: Build (Linux)
      run: |
        docker build -t p4c --build-arg IMAGE_TYPE=test --build-arg ENABLE_UNIFIED_COMPILATION=$UNIFIED --build-arg VALIDATION=ON . || echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
        ./tools/export_ccache.sh || echo "BUILD_SUCCESS=false" >> $GITHUB_ENV

    - name: Validate
      if: env.BUILD_SUCCESS == 'true'
      run: |
          docker run --privileged -w /p4c/build -e $CTEST_PARALLEL_LEVEL p4c ctest  -R toz3-validate-p4c --output-on-failure --schedule-random

    - name: Build Failed
      if: env.BUILD_SUCCESS == 'false'
      run: |
          echo "Building Gauntlet failed."

