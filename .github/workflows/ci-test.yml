name: "test-p4c"

on: [push, pull_request]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        unified: [ON, OFF]
        enable_gmp: [ON, OFF]
        exclude:
          - unified: OFF
            enable_gmp: OFF
    runs-on: ubuntu-16.04
    env:
      CTEST_PARALLEL_LEVEL: 4
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build (Linux)
      run: |
        tools/start_ccache
        # To flush out issues with unified vs. non-unified builds, do a non-unified
        # build before continuing with the rest, which produces a unified build.
        # This is done here on MacOS; for Linux, this is done in Dockerfile.
        docker build --network ccache_network -t p4c --build-arg IMAGE_TYPE=test --build-arg ENABLE_UNIFIED_COMPILATION=${{matrix.unified}} --build-arg ENABLE_GMP=${{ matrix.enable_gmp }} .

    - name: Run tests (Linux)
      run: |
        sudo docker run --privileged -w /p4c/build -e $CTEST_PARALLEL_LEVEL p4c ctest --output-on-failure --schedule-random
      if: matrix.unified == 'ON'

  build-mac-os:
    strategy:
      fail-fast: false
      matrix:
        unified: [ON, OFF]
        enable_gmp: [ON, OFF]
        exclude:
          - unified: OFF
            enable_gmp: OFF
    runs-on: macos-10.15
    env:
      CTEST_PARALLEL_LEVEL: 4
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies (MacOS)
      run: |
           tools/install_mac_deps.sh
           echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH

    - name: Build (MacOS)
      run: |
          ./bootstrap.sh -DCMAKE_BUILD_TYPE=RELEASE -DENABLE_UNIFIED_COMPILATION=${{matrix.unified}} -DENABLE_GMP=${{ matrix.enable_gmp }} && cd build && make -j2

    - name: Run tests (MacOS)
      run: |
        ctest --output-on-failure -j 2 --schedule-random -LE "bpf$"
      if: matrix.unified == 'ON'


  validate:
    strategy:
      fail-fast: false
    env:
      unified: ON
      enable_gmp: ON
      CTEST_PARALLEL_LEVEL: 4
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build (Linux)
      run: |
        tools/start_ccache
        docker build --network ccache_network -t p4c --build-arg IMAGE_TYPE=test --build-arg ENABLE_UNIFIED_COMPILATION=$UNIFIED --build-arg ENABLE_GMP=$ENABLE_GMP --build-arg VALIDATION=ON .

    - name: Validate
      run: |
          docker run -w /gauntlet p4c python3.6 -m pytest test.py -vrf -k "test_p4c" -n $CTEST_PARALLEL_LEVEL --suppress-crashes
      if: success()

    - name: Build_Failure
      if: failure()
      run: |
          echo "Building Gauntlet failed."
