name: "test-p4c"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel any preceding run on the pull request.
concurrency:
  group: test-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Build with gcc and test p4c on Ubuntu 20.04.
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        unified: [ON, OFF]
    runs-on: ubuntu-latest
    env:
      CTEST_PARALLEL_LEVEL: 4
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: test-${{ matrix.unified }}-${{ runner.os }}-gcc
        max-size: 1000M

    - name: Build (Ubuntu Linux, GCC)
      run: |
        docker build -t p4c --build-arg IMAGE_TYPE=test --build-arg ENABLE_UNIFIED_COMPILATION=${{ matrix.unified }} .
        ./tools/export_ccache.sh

      # run with sudo (...) --privileged
      # this is needed to create network namespaces for the ebpf tests.
    - name: Run tests (Ubuntu Linux)
      run: |
        sudo docker run --privileged -w /p4c/build -e $CTEST_PARALLEL_LEVEL p4c ctest --output-on-failure --schedule-random
      if: matrix.unified == 'ON'

  # Build with clang and test p4c on Ubuntu 20.04.
  build-linux-clang:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      CTEST_PARALLEL_LEVEL: 4
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: test-${{ runner.os }}-clang
        max-size: 1000M

    - name: Build (Ubuntu Linux, Clang)
      run: |
        docker build -t p4c --build-arg IMAGE_TYPE=test --build-arg ENABLE_UNIFIED_COMPILATION=ON --build-arg ENABLE_WERROR=OFF --build-arg COMPILE_WITH_CLANG=ON .
        ./tools/export_ccache.sh

      # run with sudo (...) --privileged
      # this is needed to create network namespaces for the ebpf tests.
    - name: Run tests (Ubuntu Linux)
      run: |
        sudo docker run --privileged -w /p4c/build -e $CTEST_PARALLEL_LEVEL p4c ctest --output-on-failure --schedule-random
  
  # Build and test p4c on Fedora.
  build-fedora-linux:
    strategy:
      fail-fast: false
    # This job runs in Fedora container that runs in Ubuntu VM.
    runs-on: ubuntu-latest
    container:
      image: registry.fedoraproject.org/fedora:latest
    env:
      CTEST_PARALLEL_LEVEL: 4
    steps:
    # We need to install git here because it is not provided out of the box in Fedora container.
    - name: Install git
      run: dnf install -y -q git

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies (Fedora Linux)
      run: tools/install_fedora_deps.sh

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: fedora-test-${{ runner.os }}
        max-size: 1000M

    - name: Build p4c (Fedora Linux)
      run: |
        ./bootstrap.sh -DCMAKE_BUILD_TYPE=RELEASE -DENABLE_UNIFIED_COMPILATION=ON
         make -j2 -C build


    - name: Run p4c tests (Fedora Linux)
      run: ctest --output-on-failure --schedule-random
      working-directory: ./build

  # Build and test p4c on MacOS 11
  build-mac-os:
    strategy:
      fail-fast: false
    runs-on: macos-11
    env:
      CTEST_PARALLEL_LEVEL: 4
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: test-${{ runner.os }}
        max-size: 1000M

    - name: Install dependencies (MacOS)
      run: |
           tools/install_mac_deps.sh
           echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH

    - name: Build (MacOS)
      run: |
          ./bootstrap.sh -DENABLE_GC=ON -DCMAKE_BUILD_TYPE=RELEASE -DENABLE_UNIFIED_COMPILATION=ON && cd build && make -j2

    - name: Run tests (MacOS)
      run: |
        ctest --output-on-failure -j 2 --schedule-random -LE "bpf$"
