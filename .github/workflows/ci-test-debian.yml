name: "test-p4c-debian"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    branches: [main]

# Cancel any preceding run on the pull request.
concurrency:
  group: test-p4c-debian-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Build with GCC and test P4C on Ubuntu 22.04.
  test-ubuntu22:
    runs-on: ubuntu-22.04
    env:
      CTEST_PARALLEL_LEVEL: 4
      IMAGE_TYPE: test
      BUILD_GENERATOR: Ninja
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: test-${{ runner.os }}-gcc
          max-size: 1000M

      - name: Build (Ubuntu 22.04, GCC)
        run: |
          tools/ci-build.sh

      - name: Run tests (Ubuntu 22.04)
        # Need to use sudo for the eBPF kernel tests.
        run: sudo -E ctest --output-on-failure --schedule-random
        working-directory: ./build

  # Build with GCC and test P4C on Ubuntu 20.04.
  test-ubuntu20:
    name: test-ubuntu20 (Unity ${{ matrix.unity }})
    strategy:
      fail-fast: false
      matrix:
        unity: [ON, OFF]
    runs-on: ubuntu-20.04
    env:
      CTEST_PARALLEL_LEVEL: 4
      IMAGE_TYPE: test
      CMAKE_UNITY_BUILD: ${{ matrix.unity }}
      BUILD_GENERATOR: Ninja
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: test-${{ matrix.unity }}-${{ runner.os }}-gcc
          max-size: 1000M

      - name: Build (Ubuntu 20.04, GCC)
        run: |
          tools/ci-build.sh

      - name: Run tests (Ubuntu 20.04)
        # Need to use sudo for the eBPF kernel tests.
        run: sudo -E ctest --output-on-failure --schedule-random
        working-directory: ./build
        if: matrix.unity == 'ON'
