/* Automatically generated by p4c-ubpf from /home/mateusz/p4c/testdata/p4_16_samples/simple-firewall_ubpf.p4 on Mon Jan 20 15:27:07 2020
 */
#ifndef _P4_GEN_HEADER_
#define _P4_GEN_HEADER_
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include "ubpf_common.h"


enum HashAlgorithm{
lookup3,
};

struct Ethernet_t {
    uint64_t dstAddr; /* EthernetAddress */
    uint64_t srcAddr; /* EthernetAddress */
    uint16_t etherType; /* bit<16> */
    uint8_t ebpf_valid;
};

struct Ipv4_t {
    uint8_t version; /* bit<4> */
    uint8_t ihl; /* bit<4> */
    uint8_t diffserv; /* bit<8> */
    uint16_t totalLen; /* bit<16> */
    uint16_t identification; /* bit<16> */
    uint8_t flags; /* bit<3> */
    uint16_t fragOffset; /* bit<13> */
    uint8_t ttl; /* bit<8> */
    uint8_t protocol; /* bit<8> */
    uint16_t hdrChecksum; /* bit<16> */
    uint32_t srcAddr; /* bit<32> */
    uint32_t dstAddr; /* bit<32> */
    uint8_t ebpf_valid;
};

struct Tcp_t {
    uint16_t srcPort; /* bit<16> */
    uint16_t dstPort; /* bit<16> */
    uint32_t seqNo; /* bit<32> */
    uint32_t ackNo; /* bit<32> */
    uint8_t dataOffset; /* bit<4> */
    uint8_t res; /* bit<3> */
    uint8_t ecn; /* bit<3> */
    uint8_t urgent; /* bit<1> */
    uint8_t ack; /* bit<1> */
    uint8_t psh; /* bit<1> */
    uint8_t rst; /* bit<1> */
    uint8_t syn; /* bit<1> */
    uint8_t fin; /* bit<1> */
    uint16_t window; /* bit<16> */
    uint16_t checksum; /* bit<16> */
    uint16_t urgentPtr; /* bit<16> */
    uint8_t ebpf_valid;
};

struct Headers_t {
    struct Ethernet_t ethernet; /* Ethernet_t */
    struct Ipv4_t ipv4; /* Ipv4_t */
    struct Tcp_t tcp; /* Tcp_t */
};

struct ConnectionInfo_t {
    uint32_t s; /* bit<32> */
    uint32_t srv_addr; /* bit<32> */
};

struct metadata {
    struct ConnectionInfo_t connInfo; /* ConnectionInfo_t */
    uint32_t conn_id; /* bit<32> */
};


enum ubpf_map_type {
    UBPF_MAP_TYPE_HASHMAP = 4,
};
struct ubpf_map_def {
    enum ubpf_map_type type;
    unsigned int key_size;
    unsigned int value_size;
    unsigned int max_entries;
    unsigned int nb_hash_functions;
};


struct ubpf_map_def conn_srv_addr_0 = {
    .type = UBPF_MAP_TYPE_HASHMAP,
    .key_size = sizeof(uint32_t),
    .value_size = sizeof(uint32_t),
    .max_entries = 65536,
    .nb_hash_functions = 0,
};
struct ubpf_map_def conn_state_0 = {
    .type = UBPF_MAP_TYPE_HASHMAP,
    .key_size = sizeof(uint32_t),
    .value_size = sizeof(uint32_t),
    .max_entries = 65536,
    .nb_hash_functions = 0,
};
#endif
