/* Automatically generated by p4c-ubpf from /home/dev/workspace/p4c/testdata/p4_16_samples/csum_ubpf.p4 on Thu Feb  6 10:00:01 2020
 */
#ifndef _P4_GEN_HEADER_
#define _P4_GEN_HEADER_
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include "ubpf_common.h"


struct Ethernet {
    uint64_t destination; /* bit<48> */
    uint64_t source; /* bit<48> */
    uint16_t etherType; /* bit<16> */
    uint8_t ebpf_valid;
};

struct IPv4 {
    uint8_t version; /* bit<4> */
    uint8_t ihl; /* bit<4> */
    uint8_t diffserv; /* bit<8> */
    uint16_t totalLen; /* bit<16> */
    uint16_t identification; /* bit<16> */
    uint8_t flags; /* bit<3> */
    uint16_t fragOffset; /* bit<13> */
    uint8_t ttl; /* bit<8> */
    uint8_t protocol; /* bit<8> */
    uint16_t checksum; /* bit<16> */
    uint32_t srcAddr; /* bit<32> */
    uint32_t dstAddr; /* bit<32> */
    uint8_t ebpf_valid;
};

struct udp_t {
    uint16_t srcPort; /* bit<16> */
    uint16_t dstPort; /* bit<16> */
    uint16_t length_; /* bit<16> */
    uint16_t checksum; /* bit<16> */
    uint8_t ebpf_valid;
};

struct Headers_t {
    struct Ethernet ethernet; /* Ethernet */
    struct IPv4 ipv4; /* IPv4 */
    struct udp_t udp; /* udp_t */
};

struct metadata {
};


enum ubpf_map_type {
    UBPF_MAP_TYPE_HASHMAP = 4,
};
struct ubpf_map_def {
    enum ubpf_map_type type;
    unsigned int key_size;
    unsigned int value_size;
    unsigned int max_entries;
    unsigned int nb_hash_functions;
};


#endif
