# proto-file: p4/config/v1/p4info.proto
# proto-message: p4.config.v1.P4Info

pkg_info {
  name: "fabric_border_router.p4"
  version: "1.6.1"
  arch: "v1model"
  organization: "Google"
}
tables {
  preamble {
    id: 33554507
    name: "ingress.tunnel_termination_lookup.ipv6_tunnel_termination_table"
    alias: "ipv6_tunnel_termination_table"
    annotations: "@unsupported"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "dst_ipv6"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
    match_type: TERNARY
  }
  match_fields {
    id: 2
    name: "src_ipv6"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
    match_type: TERNARY
  }
  action_refs {
    id: 16777238
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  size: 126
}
tables {
  preamble {
    id: 33554509
    name: "ingress.vlan_untag.disable_vlan_checks_table"
    alias: "disable_vlan_checks_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@entry_restriction(\"\n    // Force the dummy_match to be wildcard.\n    dummy_match::mask == 0;\n  \")"
  }
  match_fields {
    id: 1
    name: "dummy_match"
    bitwidth: 1
    match_type: TERNARY
  }
  action_refs {
    id: 16777242
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  size: 1
}
tables {
  preamble {
    id: 33554689
    name: "ingress.acl_pre_ingress.acl_pre_ingress_table"
    alias: "acl_pre_ingress_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@sai_acl(PRE_INGRESS)"
    annotations: "@sai_acl_priority(11)"
    annotations: "@entry_restriction(\"\n    // Only allow IP field matches for IP packets.\n    dscp::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    ecn::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    dst_ip::mask != 0 -> is_ipv4 == 1;\n    dst_ipv6::mask != 0 -> is_ipv6 == 1;\n    // Forbid illegal combinations of IP_TYPE fields.\n    is_ip::mask != 0 -> (is_ipv4::mask == 0 && is_ipv6::mask == 0);\n    is_ipv4::mask != 0 -> (is_ip::mask == 0 && is_ipv6::mask == 0);\n    is_ipv6::mask != 0 -> (is_ip::mask == 0 && is_ipv4::mask == 0);\n    // Forbid unsupported combinations of IP_TYPE fields.\n    is_ipv4::mask != 0 -> (is_ipv4 == 1);\n    is_ipv6::mask != 0 -> (is_ipv6 == 1);\n\n\n\n\n    // Reserve high priorities for switch-internal use.\n    // TODO: Remove once inband workaround is obsolete.\n    ::priority < 0x7fffffff;\n  \")"
  }
  match_fields {
    id: 1
    name: "is_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IP)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 2
    name: "is_ipv4"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV4ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 3
    name: "is_ipv6"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV6ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 4
    name: "src_mac"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC)"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
    match_type: TERNARY
  }
  match_fields {
    id: 9
    name: "dst_mac"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DST_MAC)"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
    match_type: TERNARY
  }
  match_fields {
    id: 5
    name: "dst_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DST_IP)"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
    match_type: TERNARY
  }
  match_fields {
    id: 6
    name: "dst_ipv6"
    annotations: "@composite_field(@ sai_field ( SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3 ) , @ sai_field ( SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2 ))"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 64
    match_type: TERNARY
  }
  match_fields {
    id: 7
    name: "dscp"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DSCP)"
    bitwidth: 6
    match_type: TERNARY
  }
  match_fields {
    id: 10
    name: "ecn"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ECN)"
    bitwidth: 2
    match_type: TERNARY
  }
  match_fields {
    id: 8
    name: "in_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_IN_PORT)"
    bitwidth: 9
    match_type: OPTIONAL
    type_name {
      name: "port_id_t"
    }
  }
  action_refs {
    id: 16777472
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  direct_resource_ids: 318767361
  size: 254
}
tables {
  preamble {
    id: 33554503
    name: "ingress.l3_admit.l3_admit_table"
    alias: "l3_admit_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "dst_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
    match_type: TERNARY
  }
  match_fields {
    id: 2
    name: "in_port"
    bitwidth: 9
    match_type: OPTIONAL
    type_name {
      name: "port_id_t"
    }
  }
  action_refs {
    id: 16777224
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  size: 64
}
tables {
  preamble {
    id: 33554506
    name: "ingress.routing_lookup.vrf_table"
    alias: "vrf_table"
    annotations: "@entry_restriction(\"\n    // The VRF ID 0 (or \'\' in P4Runtime) encodes the default VRF, which cannot\n    // be read or written via this table, but is always present implicitly.\n    // TODO: This constraint should read `vrf_id != \'\'` (since\n    // constraints are a control plane (P4Runtime) concept), but\n    // p4-constraints does not currently support strings.\n    vrf_id != 0;\n  \")"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "vrf_id"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "vrf_id_t"
    }
  }
  action_refs {
    id: 24742814
    annotations: "@proto_id(1)"
  }
  const_default_action_id: 24742814
  size: 64
}
tables {
  preamble {
    id: 33554500
    name: "ingress.routing_lookup.ipv4_table"
    alias: "ipv4_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "vrf_id"
    annotations: "@refers_to(vrf_table , vrf_id)"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "vrf_id_t"
    }
  }
  match_fields {
    id: 2
    name: "ipv4_dst"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
    match_type: LPM
  }
  action_refs {
    id: 16777222
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777221
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 16777220
    annotations: "@proto_id(3)"
  }
  action_refs {
    id: 16777232
    annotations: "@proto_id(5)"
  }
  action_refs {
    id: 16777233
    annotations: "@proto_id(6)"
  }
  action_refs {
    id: 16777237
    annotations: "@proto_id(7)"
  }
  const_default_action_id: 16777222
  size: 131072
}
tables {
  preamble {
    id: 33554501
    name: "ingress.routing_lookup.ipv6_table"
    alias: "ipv6_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "vrf_id"
    annotations: "@refers_to(vrf_table , vrf_id)"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "vrf_id_t"
    }
  }
  match_fields {
    id: 2
    name: "ipv6_dst"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
    match_type: LPM
  }
  action_refs {
    id: 16777222
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777221
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 16777220
    annotations: "@proto_id(3)"
  }
  action_refs {
    id: 16777232
    annotations: "@proto_id(5)"
  }
  action_refs {
    id: 16777233
    annotations: "@proto_id(6)"
  }
  action_refs {
    id: 16777237
    annotations: "@proto_id(7)"
  }
  const_default_action_id: 16777222
  size: 17000
}
tables {
  preamble {
    id: 33554510
    name: "ingress.routing_lookup.ipv4_multicast_table"
    alias: "ipv4_multicast_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "vrf_id"
    annotations: "@refers_to(vrf_table , vrf_id)"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "vrf_id_t"
    }
  }
  match_fields {
    id: 2
    name: "ipv4_dst"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
    match_type: EXACT
  }
  action_refs {
    id: 16777240
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  size: 1600
}
tables {
  preamble {
    id: 33554511
    name: "ingress.routing_lookup.ipv6_multicast_table"
    alias: "ipv6_multicast_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "vrf_id"
    annotations: "@refers_to(vrf_table , vrf_id)"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "vrf_id_t"
    }
  }
  match_fields {
    id: 2
    name: "ipv6_dst"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
    match_type: EXACT
  }
  action_refs {
    id: 16777240
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  size: 1600
}
tables {
  preamble {
    id: 33554688
    name: "ingress.acl_ingress.acl_ingress_table"
    alias: "acl_ingress_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@sai_acl(INGRESS)"
    annotations: "@sai_acl_priority(5)"
    annotations: "@entry_restriction(\"\n    // Forbid using ether_type for IP packets (by convention, use is_ip* instead).\n    ether_type != 0x0800 && ether_type != 0x86dd;\n    // Only allow IP field matches for IP packets.\n    dst_ip::mask != 0 -> is_ipv4 == 1;\n\n    src_ip::mask != 0 -> is_ipv4 == 1;\n\n    dst_ipv6::mask != 0 -> is_ipv6 == 1;\n    src_ipv6::mask != 0 -> is_ipv6 == 1;\n    ttl::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n\n    dscp::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    ecn::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n\n    ip_protocol::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    // Only allow l4_dst_port and l4_src_port matches for TCP/UDP packets.\n\n    l4_src_port::mask != 0 -> (ip_protocol == 6 || ip_protocol == 17);\n\n    l4_dst_port::mask != 0 -> (ip_protocol == 6 || ip_protocol == 17);\n\n\n\n\n\n    // Only allow icmp_type matches for ICMP packets\n    icmp_type::mask != 0 -> ip_protocol == 1;\n\n    icmpv6_type::mask != 0 -> ip_protocol == 58;\n    // Forbid illegal combinations of IP_TYPE fields.\n    is_ip::mask != 0 -> (is_ipv4::mask == 0 && is_ipv6::mask == 0);\n    is_ipv4::mask != 0 -> (is_ip::mask == 0 && is_ipv6::mask == 0);\n    is_ipv6::mask != 0 -> (is_ip::mask == 0 && is_ipv4::mask == 0);\n    // Forbid unsupported combinations of IP_TYPE fields.\n    is_ipv4::mask != 0 -> (is_ipv4 == 1);\n    is_ipv6::mask != 0 -> (is_ipv6 == 1);\n  \")"
  }
  match_fields {
    id: 1
    name: "is_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IP)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 2
    name: "is_ipv4"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV4ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 3
    name: "is_ipv6"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV6ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 4
    name: "ether_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 5
    name: "dst_mac"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DST_MAC)"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
    match_type: TERNARY
  }
  match_fields {
    id: 6
    name: "src_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_SRC_IP)"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
    match_type: TERNARY
  }
  match_fields {
    id: 7
    name: "dst_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DST_IP)"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
    match_type: TERNARY
  }
  match_fields {
    id: 8
    name: "src_ipv6"
    annotations: "@composite_field(@ sai_field ( SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3 ) , @ sai_field ( SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2 ))"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 64
    match_type: TERNARY
  }
  match_fields {
    id: 9
    name: "dst_ipv6"
    annotations: "@composite_field(@ sai_field ( SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3 ) , @ sai_field ( SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2 ))"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 64
    match_type: TERNARY
  }
  match_fields {
    id: 10
    name: "ttl"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_TTL)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 11
    name: "dscp"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DSCP)"
    bitwidth: 6
    match_type: TERNARY
  }
  match_fields {
    id: 12
    name: "ecn"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ECN)"
    bitwidth: 2
    match_type: TERNARY
  }
  match_fields {
    id: 13
    name: "ip_protocol"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 19
    name: "icmp_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 14
    name: "icmpv6_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 20
    name: "l4_src_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 15
    name: "l4_dst_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 17
    name: "in_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_IN_PORT)"
    bitwidth: 9
    match_type: OPTIONAL
    type_name {
      name: "port_id_t"
    }
  }
  match_fields {
    id: 18
    name: "route_metadata"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META)"
    bitwidth: 6
    match_type: OPTIONAL
  }
  action_refs {
    id: 16777473
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777474
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 16777475
    annotations: "@proto_id(3)"
  }
  action_refs {
    id: 16777476
    annotations: "@proto_id(4)"
  }
  action_refs {
    id: 16777481
    annotations: "@proto_id(5)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  direct_resource_ids: 318767362
  direct_resource_ids: 352321792
  size: 255
}
tables {
  preamble {
    id: 33554695
    name: "ingress.acl_ingress.acl_ingress_qos_table"
    alias: "acl_ingress_qos_table"
    annotations: "@sai_acl(INGRESS)"
    annotations: "@sai_acl_priority(10)"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@entry_restriction(\"\n    // Forbid using ether_type for IP packets (by convention, use is_ip* instead).\n    ether_type != 0x0800 && ether_type != 0x86dd;\n    // Only allow IP field matches for IP packets.\n    ttl::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    ip_protocol::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    // Only allow l4_dst_port matches for TCP/UDP packets.\n    l4_dst_port::mask != 0 -> (ip_protocol == 6 || ip_protocol == 17);\n    // Forbid illegal combinations of IP_TYPE fields.\n    is_ip::mask != 0 -> (is_ipv4::mask == 0 && is_ipv6::mask == 0);\n    is_ipv4::mask != 0 -> (is_ip::mask == 0 && is_ipv6::mask == 0);\n    is_ipv6::mask != 0 -> (is_ip::mask == 0 && is_ipv4::mask == 0);\n    // Forbid unsupported combinations of IP_TYPE fields.\n    is_ipv4::mask != 0 -> (is_ipv4 == 1);\n    is_ipv6::mask != 0 -> (is_ipv6 == 1);\n    // Only allow icmp_type matches for ICMP packets\n    icmpv6_type::mask != 0 -> ip_protocol == 58;\n\n    // Only allow l4_dst_port matches for TCP/UDP packets.\n    l4_src_port::mask != 0 -> (ip_protocol == 6 || ip_protocol == 17);\n    // Only allow icmp_type matches for ICMP packets\n    icmp_type::mask != 0 -> ip_protocol == 1;\n\n\n\n\n\n  \")"
  }
  match_fields {
    id: 1
    name: "is_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IP)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 2
    name: "is_ipv4"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV4ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 3
    name: "is_ipv6"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV6ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 4
    name: "ether_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 7
    name: "ttl"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_TTL)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 8
    name: "ip_protocol"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 9
    name: "icmpv6_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 10
    name: "l4_dst_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 12
    name: "l4_src_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 14
    name: "icmp_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 15
    name: "route_metadata"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META)"
    bitwidth: 6
    match_type: TERNARY
  }
  action_refs {
    id: 16777484
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777486
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 16777475
    annotations: "@proto_id(3)"
  }
  action_refs {
    id: 16777481
    annotations: "@proto_id(4)"
  }
  action_refs {
    id: 16777488
    annotations: "@proto_id(5)"
  }
  action_refs {
    id: 16777489
    annotations: "@proto_id(6)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  direct_resource_ids: 318767367
  direct_resource_ids: 352321794
  size: 511
}
tables {
  preamble {
    id: 33554697
    name: "ingress.acl_ingress.acl_ingress_counting_table"
    alias: "acl_ingress_counting_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@sai_acl_priority(7)"
    annotations: "@sai_acl(INGRESS)"
    annotations: "@entry_restriction(\"\n    // Only allow IP field matches for IP packets.\n    dscp::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n    // Forbid illegal combinations of IP_TYPE fields.\n    is_ip::mask != 0 -> (is_ipv4::mask == 0 && is_ipv6::mask == 0);\n    is_ipv4::mask != 0 -> (is_ip::mask == 0 && is_ipv6::mask == 0);\n    is_ipv6::mask != 0 -> (is_ip::mask == 0 && is_ipv4::mask == 0);\n    // Forbid unsupported combinations of IP_TYPE fields.\n    is_ipv4::mask != 0 -> (is_ipv4 == 1);\n    is_ipv6::mask != 0 -> (is_ipv6 == 1);\n  \")"
  }
  match_fields {
    id: 1
    name: "is_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IP)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 2
    name: "is_ipv4"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV4ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 3
    name: "is_ipv6"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV6ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 11
    name: "dscp"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DSCP)"
    bitwidth: 6
    match_type: TERNARY
  }
  match_fields {
    id: 18
    name: "route_metadata"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META)"
    bitwidth: 6
    match_type: TERNARY
  }
  action_refs {
    id: 16777477
    annotations: "@proto_id(3)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  direct_resource_ids: 318767369
  size: 255
}
tables {
  preamble {
    id: 33554496
    name: "ingress.routing_resolution.neighbor_table"
    alias: "neighbor_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "router_interface_id"
    annotations: "@refers_to(router_interface_table , router_interface_id)"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "router_interface_id_t"
    }
  }
  match_fields {
    id: 2
    name: "neighbor_id"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
    match_type: EXACT
  }
  action_refs {
    id: 16777217
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  size: 1024
}
tables {
  preamble {
    id: 33554497
    name: "ingress.routing_resolution.router_interface_table"
    alias: "router_interface_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "router_interface_id"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "router_interface_id_t"
    }
  }
  action_refs {
    id: 16777218
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777243
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  size: 256
}
tables {
  preamble {
    id: 33554498
    name: "ingress.routing_resolution.nexthop_table"
    alias: "nexthop_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "nexthop_id"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "nexthop_id_t"
    }
  }
  action_refs {
    id: 16777219
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777234
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 16777236
    annotations: "@proto_id(3)"
  }
  action_refs {
    id: 16777239
    annotations: "@proto_id(4)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  size: 1024
}
tables {
  preamble {
    id: 33554512
    name: "ingress.routing_resolution.tunnel_table"
    alias: "tunnel_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "tunnel_id"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "tunnel_id_t"
    }
  }
  action_refs {
    id: 16777235
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  size: 2048
}
tables {
  preamble {
    id: 33554499
    name: "ingress.routing_resolution.wcmp_group_table"
    alias: "wcmp_group_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@oneshot"
  }
  match_fields {
    id: 1
    name: "wcmp_group_id"
    bitwidth: 12
    match_type: EXACT
    type_name {
      name: "wcmp_group_id_t"
    }
  }
  action_refs {
    id: 16777221
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  implementation_id: 299650760
  size: 3968
}
tables {
  preamble {
    id: 33554502
    name: "ingress.mirror_session_lookup.mirror_session_table"
    alias: "mirror_session_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "mirror_session_id"
    bitwidth: 10
    match_type: EXACT
    type_name {
      name: "mirror_session_id_t"
    }
  }
  action_refs {
    id: 16777223
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 16777245
    annotations: "@proto_id(2)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  size: 4
}
tables {
  preamble {
    id: 33554513
    name: "ingress.ingress_cloning.ingress_clone_table"
    alias: "ingress_clone_table"
    annotations: "@unsupported"
    annotations: "@p4runtime_role(\"packet_replication_engine_manager\")"
    annotations: "@entry_restriction(\"\n    // mirror_egress_port is present iff marked_to_mirror is true.\n    // Exact match indicating presence of mirror_egress_port.\n    marked_to_mirror == 1 -> mirror_egress_port::mask == -1;\n    // Wildcard match indicating abscence of mirror_egress_port.\n    marked_to_mirror == 0 -> mirror_egress_port::mask == 0;\n  \")"
  }
  match_fields {
    id: 1
    name: "marked_to_copy"
    bitwidth: 1
    match_type: EXACT
  }
  match_fields {
    id: 2
    name: "marked_to_mirror"
    bitwidth: 1
    match_type: EXACT
  }
  match_fields {
    id: 3
    name: "mirror_egress_port"
    bitwidth: 9
    match_type: OPTIONAL
    type_name {
      name: "port_id_t"
    }
  }
  action_refs {
    id: 16777244
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  size: 1024
}
tables {
  preamble {
    id: 33554508
    name: "egress.packet_rewrites.multicast_rewrites.multicast_router_interface_table"
    alias: "multicast_router_interface_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
  }
  match_fields {
    id: 1
    name: "multicast_replica_port"
    annotations: "@referenced_by(builtin : : multicast_group_table , replica . port)"
    bitwidth: 9
    match_type: EXACT
    type_name {
      name: "port_id_t"
    }
  }
  match_fields {
    id: 2
    name: "multicast_replica_instance"
    annotations: "@referenced_by(builtin : : multicast_group_table , replica . instance)"
    bitwidth: 16
    match_type: EXACT
  }
  action_refs {
    id: 16777241
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  size: 110
}
tables {
  preamble {
    id: 33554692
    name: "egress.acl_egress.acl_egress_table"
    alias: "acl_egress_table"
    annotations: "@p4runtime_role(\"sdn_controller\")"
    annotations: "@sai_acl(EGRESS)"
    annotations: "@entry_restriction(\"\n\n    // Forbid using ether_type for IP packets (by convention, use is_ip* instead).\n    ether_type != 0x0800 && ether_type != 0x86dd;\n    dscp::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n\n    // Only allow IP field matches for IP packets.\n    ip_protocol::mask != 0 -> (is_ip == 1 || is_ipv4 == 1 || is_ipv6 == 1);\n\n\n\n\n    // Only allow l4_dst_port matches for TCP/UDP packets.\n    l4_dst_port::mask != 0 -> (ip_protocol == 6 || ip_protocol == 17);\n\n    // Forbid illegal combinations of IP_TYPE fields.\n    is_ip::mask != 0 -> (is_ipv4::mask == 0 && is_ipv6::mask == 0);\n    is_ipv4::mask != 0 -> (is_ip::mask == 0 && is_ipv6::mask == 0);\n    is_ipv6::mask != 0 -> (is_ip::mask == 0 && is_ipv4::mask == 0);\n    // Forbid unsupported combinations of IP_TYPE fields.\n    is_ipv4::mask != 0 -> (is_ipv4 == 1);\n    is_ipv6::mask != 0 -> (is_ipv6 == 1);\n  \")"
  }
  match_fields {
    id: 1
    name: "ether_type"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 2
    name: "ip_protocol"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL)"
    bitwidth: 8
    match_type: TERNARY
  }
  match_fields {
    id: 3
    name: "l4_dst_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT)"
    bitwidth: 16
    match_type: TERNARY
  }
  match_fields {
    id: 4
    name: "out_port"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT)"
    bitwidth: 9
    match_type: OPTIONAL
    type_name {
      name: "port_id_t"
    }
  }
  match_fields {
    id: 5
    name: "is_ip"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IP)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 6
    name: "is_ipv4"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV4ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 7
    name: "is_ipv6"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE / IPV6ANY)"
    bitwidth: 1
    match_type: OPTIONAL
  }
  match_fields {
    id: 8
    name: "dscp"
    annotations: "@sai_field(SAI_ACL_TABLE_ATTR_FIELD_DSCP)"
    bitwidth: 6
    match_type: TERNARY
  }
  action_refs {
    id: 16777481
    annotations: "@proto_id(1)"
  }
  action_refs {
    id: 21257015
    annotations: "@defaultonly"
    scope: DEFAULT_ONLY
  }
  const_default_action_id: 21257015
  direct_resource_ids: 318767364
  size: 127
}
actions {
  preamble {
    id: 21257015
    name: "NoAction"
    alias: "NoAction"
    annotations: "@noWarn(\"unused\")"
  }
}
actions {
  preamble {
    id: 16777221
    name: "set_nexthop_id"
    alias: "set_nexthop_id"
  }
  params {
    id: 1
    name: "nexthop_id"
    annotations: "@refers_to(nexthop_table , nexthop_id)"
    bitwidth: 10
    type_name {
      name: "nexthop_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777481
    name: "acl_drop"
    alias: "acl_drop"
    annotations: "@sai_action(SAI_PACKET_ACTION_DROP)"
  }
}
actions {
  preamble {
    id: 16777238
    name: "ingress.tunnel_termination_lookup.mark_for_tunnel_decap_and_set_vrf"
    alias: "mark_for_tunnel_decap_and_set_vrf"
  }
  params {
    id: 1
    name: "vrf_id"
    annotations: "@refers_to(vrf_table , vrf_id)"
    bitwidth: 10
    type_name {
      name: "vrf_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777242
    name: "ingress.vlan_untag.disable_vlan_checks"
    alias: "disable_vlan_checks"
  }
}
actions {
  preamble {
    id: 16777472
    name: "ingress.acl_pre_ingress.set_vrf"
    alias: "set_vrf"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD)"
  }
  params {
    id: 1
    name: "vrf_id"
    annotations: "@sai_action_param(SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF)"
    annotations: "@refers_to(vrf_table , vrf_id)"
    bitwidth: 10
    type_name {
      name: "vrf_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777224
    name: "ingress.l3_admit.admit_to_l3"
    alias: "admit_to_l3"
  }
}
actions {
  preamble {
    id: 17825802
    name: "ingress.hashing.select_ecmp_hash_algorithm"
    alias: "select_ecmp_hash_algorithm"
    annotations: "@sai_hash_seed(0)"
  }
}
actions {
  preamble {
    id: 16777227
    name: "ingress.hashing.compute_ecmp_hash_ipv4"
    alias: "compute_ecmp_hash_ipv4"
    annotations: "@sai_ecmp_hash(SAI_SWITCH_ATTR_ECMP_HASH_IPV4)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_SRC_IPV4)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_DST_IPV4)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_SRC_PORT)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_DST_PORT)"
  }
}
actions {
  preamble {
    id: 16777228
    name: "ingress.hashing.compute_ecmp_hash_ipv6"
    alias: "compute_ecmp_hash_ipv6"
    annotations: "@sai_ecmp_hash(SAI_SWITCH_ATTR_ECMP_HASH_IPV6)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_SRC_IPV6)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_DST_IPV6)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_SRC_PORT)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_DST_PORT)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_IPV6_FLOW_LABEL)"
  }
}
actions {
  preamble {
    id: 19711398
    name: "ingress.lag_hashing_config.select_lag_hash_algorithm"
    alias: "select_lag_hash_algorithm"
    annotations: "@sai_hash_algorithm(SAI_HASH_ALGORITHM_CRC)"
    annotations: "@sai_hash_seed(0)"
    annotations: "@sai_hash_offset(0)"
  }
}
actions {
  preamble {
    id: 16777229
    name: "ingress.lag_hashing_config.compute_lag_hash_ipv4"
    alias: "compute_lag_hash_ipv4"
    annotations: "@sai_lag_hash(SAI_SWITCH_ATTR_LAG_HASH_IPV4)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_SRC_IPV4)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_DST_IPV4)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_SRC_PORT)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_DST_PORT)"
  }
}
actions {
  preamble {
    id: 16777230
    name: "ingress.lag_hashing_config.compute_lag_hash_ipv6"
    alias: "compute_lag_hash_ipv6"
    annotations: "@sai_lag_hash(SAI_SWITCH_ATTR_LAG_HASH_IPV6)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_SRC_IPV6)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_DST_IPV6)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_SRC_PORT)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_L4_DST_PORT)"
    annotations: "@sai_native_hash_field(SAI_NATIVE_HASH_FIELD_IPV6_FLOW_LABEL)"
  }
}
actions {
  preamble {
    id: 24742814
    name: "ingress.routing_lookup.no_action"
    alias: "no_action"
  }
}
actions {
  preamble {
    id: 16777222
    name: "ingress.routing_lookup.drop"
    alias: "drop"
  }
}
actions {
  preamble {
    id: 16777220
    name: "ingress.routing_lookup.set_wcmp_group_id"
    alias: "set_wcmp_group_id"
  }
  params {
    id: 1
    name: "wcmp_group_id"
    annotations: "@refers_to(wcmp_group_table , wcmp_group_id)"
    bitwidth: 12
    type_name {
      name: "wcmp_group_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777233
    name: "ingress.routing_lookup.set_wcmp_group_id_and_metadata"
    alias: "set_wcmp_group_id_and_metadata"
  }
  params {
    id: 1
    name: "wcmp_group_id"
    annotations: "@refers_to(wcmp_group_table , wcmp_group_id)"
    bitwidth: 12
    type_name {
      name: "wcmp_group_id_t"
    }
  }
  params {
    id: 2
    name: "route_metadata"
    bitwidth: 6
  }
}
actions {
  preamble {
    id: 16777237
    name: "ingress.routing_lookup.set_metadata_and_drop"
    alias: "set_metadata_and_drop"
  }
  params {
    id: 1
    name: "route_metadata"
    bitwidth: 6
  }
}
actions {
  preamble {
    id: 16777232
    name: "ingress.routing_lookup.set_nexthop_id_and_metadata"
    alias: "set_nexthop_id_and_metadata"
  }
  params {
    id: 1
    name: "nexthop_id"
    annotations: "@refers_to(nexthop_table , nexthop_id)"
    bitwidth: 10
    type_name {
      name: "nexthop_id_t"
    }
  }
  params {
    id: 2
    name: "route_metadata"
    bitwidth: 6
  }
}
actions {
  preamble {
    id: 16777240
    name: "ingress.routing_lookup.set_multicast_group_id"
    alias: "set_multicast_group_id"
    annotations: "@action_restriction(\"\n    // Disallow 0 since it encodes \'no multicast\' in V1Model.\n    multicast_group_id != 0;\n  \")"
  }
  params {
    id: 1
    name: "multicast_group_id"
    annotations: "@refers_to(builtin : : multicast_group_table , multicast_group_id)"
    bitwidth: 16
  }
}
actions {
  preamble {
    id: 16777473
    name: "ingress.acl_ingress.acl_copy"
    alias: "acl_copy"
    annotations: "@sai_action(SAI_PACKET_ACTION_COPY , SAI_PACKET_COLOR_GREEN)"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD , SAI_PACKET_COLOR_RED)"
  }
  params {
    id: 1
    name: "qos_queue"
    annotations: "@sai_action_param(QOS_QUEUE)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
}
actions {
  preamble {
    id: 16777474
    name: "ingress.acl_ingress.acl_trap"
    alias: "acl_trap"
    annotations: "@sai_action(SAI_PACKET_ACTION_TRAP , SAI_PACKET_COLOR_GREEN)"
    annotations: "@sai_action(SAI_PACKET_ACTION_DROP , SAI_PACKET_COLOR_RED)"
  }
  params {
    id: 1
    name: "qos_queue"
    annotations: "@sai_action_param(QOS_QUEUE)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
}
actions {
  preamble {
    id: 16777475
    name: "ingress.acl_ingress.acl_forward"
    alias: "acl_forward"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD , SAI_PACKET_COLOR_GREEN)"
    annotations: "@sai_action(SAI_PACKET_ACTION_DROP , SAI_PACKET_COLOR_RED)"
  }
}
actions {
  preamble {
    id: 16777477
    name: "ingress.acl_ingress.acl_count"
    alias: "acl_count"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD)"
  }
}
actions {
  preamble {
    id: 16777476
    name: "ingress.acl_ingress.acl_mirror"
    alias: "acl_mirror"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD)"
  }
  params {
    id: 1
    name: "mirror_session_id"
    annotations: "@refers_to(mirror_session_table , mirror_session_id)"
    annotations: "@sai_action_param(SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS)"
    bitwidth: 10
    type_name {
      name: "mirror_session_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777484
    name: "ingress.acl_ingress.set_qos_queue_and_cancel_copy_above_rate_limit"
    alias: "set_qos_queue_and_cancel_copy_above_rate_limit"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD , SAI_PACKET_COLOR_GREEN)"
    annotations: "@sai_action(SAI_PACKET_ACTION_COPY_CANCEL , SAI_PACKET_COLOR_RED)"
  }
  params {
    id: 1
    name: "qos_queue"
    annotations: "@sai_action_param(QOS_QUEUE)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
}
actions {
  preamble {
    id: 16777489
    name: "ingress.acl_ingress.set_cpu_and_multicast_queues_and_deny_above_rate_limit"
    alias: "set_cpu_and_multicast_queues_and_deny_above_rate_limit"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD , SAI_PACKET_COLOR_GREEN)"
    annotations: "@sai_action(SAI_PACKET_ACTION_DENY , SAI_PACKET_COLOR_RED)"
    annotations: "@unsupported"
  }
  params {
    id: 1
    name: "cpu_queue"
    annotations: "@sai_action_param(QOS_QUEUE)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
  params {
    id: 2
    name: "green_multicast_queue"
    annotations: "@sai_action_param(MULTICAST_QOS_QUEUE , SAI_PACKET_COLOR_GREEN)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
  params {
    id: 3
    name: "red_multicast_queue"
    annotations: "@sai_action_param(MULTICAST_QOS_QUEUE , SAI_PACKET_COLOR_RED)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
}
actions {
  preamble {
    id: 16777486
    name: "ingress.acl_ingress.set_cpu_queue_and_deny_above_rate_limit"
    alias: "set_cpu_queue_and_deny_above_rate_limit"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD , SAI_PACKET_COLOR_GREEN)"
    annotations: "@sai_action(SAI_PACKET_ACTION_DENY , SAI_PACKET_COLOR_RED)"
  }
  params {
    id: 1
    name: "cpu_queue"
    annotations: "@sai_action_param(QOS_QUEUE)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
}
actions {
  preamble {
    id: 16777488
    name: "ingress.acl_ingress.set_cpu_queue"
    alias: "set_cpu_queue"
    annotations: "@sai_action(SAI_PACKET_ACTION_FORWARD)"
  }
  params {
    id: 1
    name: "cpu_queue"
    annotations: "@sai_action_param(QOS_QUEUE)"
    bitwidth: 8
    type_name {
      name: "qos_queue_t"
    }
  }
}
actions {
  preamble {
    id: 16777217
    name: "ingress.routing_resolution.set_dst_mac"
    alias: "set_dst_mac"
  }
  params {
    id: 1
    name: "dst_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
}
actions {
  preamble {
    id: 16777243
    name: "ingress.routing_resolution.set_port_and_src_mac_and_vlan_id"
    alias: "set_port_and_src_mac_and_vlan_id"
    annotations: "@unsupported"
    annotations: "@action_restriction(\"\n    // Disallow reserved VLAN IDs with implementation-defined semantics.\n    vlan_id != 0 && vlan_id != 4095\")"
  }
  params {
    id: 1
    name: "port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  params {
    id: 2
    name: "src_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
  params {
    id: 3
    name: "vlan_id"
    bitwidth: 12
  }
}
actions {
  preamble {
    id: 16777218
    name: "ingress.routing_resolution.set_port_and_src_mac"
    alias: "set_port_and_src_mac"
  }
  params {
    id: 1
    name: "port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  params {
    id: 2
    name: "src_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
}
actions {
  preamble {
    id: 16777239
    name: "ingress.routing_resolution.set_ip_nexthop_and_disable_rewrites"
    alias: "set_ip_nexthop_and_disable_rewrites"
  }
  params {
    id: 1
    name: "router_interface_id"
    annotations: "@refers_to(router_interface_table , router_interface_id)"
    annotations: "@refers_to(neighbor_table , router_interface_id)"
    bitwidth: 10
    type_name {
      name: "router_interface_id_t"
    }
  }
  params {
    id: 2
    name: "neighbor_id"
    annotations: "@format(IPV6_ADDRESS)"
    annotations: "@refers_to(neighbor_table , neighbor_id)"
    bitwidth: 128
  }
  params {
    id: 3
    name: "disable_decrement_ttl"
    bitwidth: 1
  }
  params {
    id: 4
    name: "disable_src_mac_rewrite"
    bitwidth: 1
  }
  params {
    id: 5
    name: "disable_dst_mac_rewrite"
    bitwidth: 1
  }
  params {
    id: 6
    name: "disable_vlan_rewrite"
    bitwidth: 1
  }
}
actions {
  preamble {
    id: 16777236
    name: "ingress.routing_resolution.set_ip_nexthop"
    alias: "set_ip_nexthop"
  }
  params {
    id: 1
    name: "router_interface_id"
    annotations: "@refers_to(router_interface_table , router_interface_id)"
    annotations: "@refers_to(neighbor_table , router_interface_id)"
    bitwidth: 10
    type_name {
      name: "router_interface_id_t"
    }
  }
  params {
    id: 2
    name: "neighbor_id"
    annotations: "@format(IPV6_ADDRESS)"
    annotations: "@refers_to(neighbor_table , neighbor_id)"
    bitwidth: 128
  }
}
actions {
  preamble {
    id: 16777219
    name: "ingress.routing_resolution.set_nexthop"
    alias: "set_nexthop"
    annotations: "@deprecated(\"Use set_ip_nexthop instead.\")"
  }
  params {
    id: 1
    name: "router_interface_id"
    annotations: "@refers_to(router_interface_table , router_interface_id)"
    annotations: "@refers_to(neighbor_table , router_interface_id)"
    bitwidth: 10
    type_name {
      name: "router_interface_id_t"
    }
  }
  params {
    id: 2
    name: "neighbor_id"
    annotations: "@format(IPV6_ADDRESS)"
    annotations: "@refers_to(neighbor_table , neighbor_id)"
    bitwidth: 128
  }
}
actions {
  preamble {
    id: 16777234
    name: "ingress.routing_resolution.set_p2p_tunnel_encap_nexthop"
    alias: "set_p2p_tunnel_encap_nexthop"
  }
  params {
    id: 1
    name: "tunnel_id"
    annotations: "@refers_to(tunnel_table , tunnel_id)"
    bitwidth: 10
    type_name {
      name: "tunnel_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777235
    name: "ingress.routing_resolution.mark_for_p2p_tunnel_encap"
    alias: "mark_for_p2p_tunnel_encap"
  }
  params {
    id: 1
    name: "encap_src_ip"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
  }
  params {
    id: 2
    name: "encap_dst_ip"
    annotations: "@format(IPV6_ADDRESS)"
    annotations: "@refers_to(neighbor_table , neighbor_id)"
    bitwidth: 128
  }
  params {
    id: 3
    name: "router_interface_id"
    annotations: "@refers_to(neighbor_table , router_interface_id)"
    annotations: "@refers_to(router_interface_table , router_interface_id)"
    bitwidth: 10
    type_name {
      name: "router_interface_id_t"
    }
  }
}
actions {
  preamble {
    id: 16777223
    name: "ingress.mirror_session_lookup.mirror_as_ipv4_erspan"
    alias: "mirror_as_ipv4_erspan"
  }
  params {
    id: 1
    name: "port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  params {
    id: 2
    name: "src_ip"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
  }
  params {
    id: 3
    name: "dst_ip"
    annotations: "@format(IPV4_ADDRESS)"
    bitwidth: 32
  }
  params {
    id: 4
    name: "src_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
  params {
    id: 5
    name: "dst_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
  params {
    id: 6
    name: "ttl"
    bitwidth: 8
  }
  params {
    id: 7
    name: "tos"
    bitwidth: 8
  }
}
actions {
  preamble {
    id: 16777245
    name: "ingress.mirror_session_lookup.mirror_with_vlan_tag_and_ipfix_encapsulation"
    alias: "mirror_with_vlan_tag_and_ipfix_encapsulation"
    annotations: "@unsupported"
  }
  params {
    id: 1
    name: "monitor_port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  params {
    id: 2
    name: "monitor_failover_port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  params {
    id: 3
    name: "mirror_encap_src_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
  params {
    id: 4
    name: "mirror_encap_dst_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
  params {
    id: 6
    name: "mirror_encap_vlan_id"
    bitwidth: 12
  }
  params {
    id: 7
    name: "mirror_encap_dst_ip"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
  }
  params {
    id: 8
    name: "mirror_encap_src_ip"
    annotations: "@format(IPV6_ADDRESS)"
    bitwidth: 128
  }
  params {
    id: 9
    name: "mirror_encap_udp_src_port"
    bitwidth: 16
  }
  params {
    id: 10
    name: "mirror_encap_udp_dst_port"
    bitwidth: 16
  }
}
actions {
  preamble {
    id: 16777244
    name: "ingress.ingress_cloning.ingress_clone"
    alias: "ingress_clone"
  }
  params {
    id: 1
    name: "clone_session"
    bitwidth: 32
  }
}
actions {
  preamble {
    id: 16777241
    name: "egress.packet_rewrites.multicast_rewrites.set_multicast_src_mac"
    alias: "set_multicast_src_mac"
  }
  params {
    id: 1
    name: "src_mac"
    annotations: "@format(MAC_ADDRESS)"
    bitwidth: 48
  }
}
action_profiles {
  preamble {
    id: 299650760
    name: "ingress.routing_resolution.wcmp_group_selector"
    alias: "wcmp_group_selector"
  }
  table_ids: 33554499
  with_selector: true
  size: 49152
  max_group_size: 512
}
direct_counters {
  preamble {
    id: 318767361
    name: "ingress.acl_pre_ingress.acl_pre_ingress_counter"
    alias: "acl_pre_ingress_counter"
  }
  spec {
    unit: BOTH
  }
  direct_table_id: 33554689
}
direct_counters {
  preamble {
    id: 318767362
    name: "ingress.acl_ingress.acl_ingress_counter"
    alias: "acl_ingress_counter"
  }
  spec {
    unit: BOTH
  }
  direct_table_id: 33554688
}
direct_counters {
  preamble {
    id: 318767367
    name: "ingress.acl_ingress.acl_ingress_qos_counter"
    alias: "acl_ingress_qos_counter"
  }
  spec {
    unit: BOTH
  }
  direct_table_id: 33554695
}
direct_counters {
  preamble {
    id: 318767369
    name: "ingress.acl_ingress.acl_ingress_counting_counter"
    alias: "acl_ingress_counting_counter"
  }
  spec {
    unit: BOTH
  }
  direct_table_id: 33554697
}
direct_counters {
  preamble {
    id: 318767364
    name: "egress.acl_egress.acl_egress_counter"
    alias: "acl_egress_counter"
  }
  spec {
    unit: BOTH
  }
  direct_table_id: 33554692
}
direct_meters {
  preamble {
    id: 352321792
    name: "ingress.acl_ingress.acl_ingress_meter"
    alias: "acl_ingress_meter"
    annotations: "@mode(single_rate_two_color)"
  }
  spec {
    unit: BYTES
  }
  direct_table_id: 33554688
}
direct_meters {
  preamble {
    id: 352321794
    name: "ingress.acl_ingress.acl_ingress_qos_meter"
    alias: "acl_ingress_qos_meter"
    annotations: "@mode(single_rate_two_color)"
  }
  spec {
    unit: BYTES
  }
  direct_table_id: 33554695
}
controller_packet_metadata {
  preamble {
    id: 81826293
    name: "packet_in"
    alias: "packet_in"
    annotations: "@controller_header(\"packet_in\")"
  }
  metadata {
    id: 1
    name: "ingress_port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  metadata {
    id: 2
    name: "target_egress_port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
}
controller_packet_metadata {
  preamble {
    id: 76689799
    name: "packet_out"
    alias: "packet_out"
    annotations: "@controller_header(\"packet_out\")"
  }
  metadata {
    id: 1
    name: "egress_port"
    bitwidth: 9
    type_name {
      name: "port_id_t"
    }
  }
  metadata {
    id: 2
    name: "submit_to_ingress"
    bitwidth: 1
  }
  metadata {
    id: 3
    name: "unused_pad"
    annotations: "@padding"
    bitwidth: 6
  }
}
type_info {
  new_types {
    key: "mirror_session_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 10
          }
        }
      }
    }
  }
  new_types {
    key: "nexthop_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 10
          }
        }
      }
    }
  }
  new_types {
    key: "port_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 9
          }
        }
      }
    }
  }
  new_types {
    key: "qos_queue_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 8
          }
        }
      }
    }
  }
  new_types {
    key: "router_interface_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 10
          }
        }
      }
    }
  }
  new_types {
    key: "tunnel_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 10
          }
        }
      }
    }
  }
  new_types {
    key: "vrf_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 10
          }
        }
      }
      annotations: "@p4runtime_translation_mappings({ { \"\" , 0 } , })"
    }
  }
  new_types {
    key: "wcmp_group_id_t"
    value {
      original_type {
        bitstring {
          bit {
            bitwidth: 12
          }
        }
      }
    }
  }
}
