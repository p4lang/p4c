/* Automatically generated by p4c-ubpf from /home/mateusz/p4c/testdata/p4_16_samples/ipv6-actions_ubpf.p4 on Mon Jan 20 15:27:07 2020
 */
#ifndef _P4_GEN_HEADER_
#define _P4_GEN_HEADER_
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include "ubpf_common.h"


struct Ethernet_h {
    uint64_t dstAddr; /* EthernetAddress */
    uint64_t srcAddr; /* EthernetAddress */
    uint16_t etherType; /* bit<16> */
    uint8_t ebpf_valid;
};

struct IPv4_h {
    uint8_t version; /* bit<4> */
    uint8_t ihl; /* bit<4> */
    uint8_t diffserv; /* bit<8> */
    uint16_t totalLen; /* bit<16> */
    uint16_t identification; /* bit<16> */
    uint8_t flags; /* bit<3> */
    uint16_t fragOffset; /* bit<13> */
    uint8_t ttl; /* bit<8> */
    uint8_t protocol; /* bit<8> */
    uint16_t hdrChecksum; /* bit<16> */
    uint32_t srcAddr; /* IPv4Address */
    uint32_t dstAddr; /* IPv4Address */
    uint8_t ebpf_valid;
};

struct IPv6_h {
    uint8_t version; /* bit<4> */
    uint8_t trafficClass; /* bit<8> */
    uint32_t flowLabel; /* bit<20> */
    uint16_t payloadLen; /* bit<16> */
    uint8_t nextHdr; /* bit<8> */
    uint8_t hopLimit; /* bit<8> */
    uint8_t srcAddr[16]; /* bit<128> */
    uint8_t dstAddr[16]; /* bit<128> */
    uint8_t ebpf_valid;
};

struct mpls_h {
    uint32_t label; /* bit<20> */
    uint8_t tc; /* bit<3> */
    uint8_t stack; /* bit<1> */
    uint8_t ttl; /* bit<8> */
    uint8_t ebpf_valid;
};

struct Headers_t {
    struct Ethernet_h ethernet; /* Ethernet_h */
    struct mpls_h mpls; /* mpls_h */
    struct IPv4_h ipv4; /* IPv4_h */
    struct IPv6_h ipv6; /* IPv6_h */
};

struct metadata {
};


enum ubpf_map_type {
    UBPF_MAP_TYPE_HASHMAP = 4,
};
struct ubpf_map_def {
    enum ubpf_map_type type;
    unsigned int key_size;
    unsigned int value_size;
    unsigned int max_entries;
    unsigned int nb_hash_functions;
};

struct pipe_filter_tbl_key {
    uint8_t headers_ipv6_srcAddr[16]; /* headers.ipv6.srcAddr */
};
enum filter_tbl_0_actions {
    pipe_ipv6_modify_dstAddr,
    pipe_ipv6_swap_addr,
    pipe_set_flowlabel,
    pipe_set_traffic_class_flow_label,
    pipe_set_ipv6_version,
    pipe_set_next_hdr,
    pipe_set_hop_limit,
    pipe_Reject,
    pipe_filter_tbl_NoAction,
};
struct pipe_filter_tbl_value {
    enum filter_tbl_0_actions action;
    union {
        struct {
            uint8_t dstAddr[16];
        } pipe_ipv6_modify_dstAddr;
        struct {
        } pipe_ipv6_swap_addr;
        struct {
            uint32_t label;
        } pipe_set_flowlabel;
        struct {
            uint8_t trafficClass;
            uint32_t label;
        } pipe_set_traffic_class_flow_label;
        struct {
            uint8_t version;
        } pipe_set_ipv6_version;
        struct {
            uint8_t nextHdr;
        } pipe_set_next_hdr;
        struct {
            uint8_t hopLimit;
        } pipe_set_hop_limit;
        struct {
        } pipe_Reject;
        struct {
        } pipe_filter_tbl_NoAction;
    } u;
};

struct ubpf_map_def pipe_filter_tbl = {
    .type = UBPF_MAP_TYPE_HASHMAP,
    .key_size = sizeof(struct pipe_filter_tbl_key),
    .value_size = sizeof(struct pipe_filter_tbl_value),
    .max_entries = 65535,
    .nb_hash_functions = 0,
};
#endif
