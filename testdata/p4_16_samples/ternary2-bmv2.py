# P4Runtime PTF test for ternary2-bmv2
# p4testgen seed: 12

import logging
import os
import sys
from functools import wraps

from p4.v1 import p4runtime_pb2_grpc
from ptf import config
from ptf import testutils as ptfutils
from ptf.mask import Mask
from ptf.packet import *
from ptf.thriftutils import *

directory = os.getcwd()
directory = directory.split("/")
workspaceFolder = ""
for i in range(len(directory) - 1):
    workspaceFolder += directory[i] + "/"
sys.path.insert(1, workspaceFolder + 'backends/p4tools/modules/testgen/targets/bmv2/backend/ptf')
import base_test as bt

logger = logging.getLogger('ternary2-bmv2')
logger.addHandler(logging.StreamHandler())


class AbstractTest(bt.P4RuntimeTest):
    @bt.autocleanup
    def setUp(self):
        bt.P4RuntimeTest.setUp(self)
        success = bt.P4RuntimeTest.updateConfig(self)
        assert success

    def tearDown(self):
        bt.P4RuntimeTest.tearDown(self)

    def setupCtrlPlane(self):
        pass

    def sendPacket(self):
        pass

    def verifyPackets(self):
        pass

    def runTestImpl(self):
        self.setupCtrlPlane()
        logger.info("Sending Packet ...")
        self.sendPacket()
        logger.info("Verifying Packet ...")
        self.verifyPackets()
        logger.info("Verifying no other packets ...")
        ptfutils.verify_no_other_packets(self, self.device_id, timeout=2)


class Test1(AbstractTest):
    # Date generated: 2023-01-17-17:00:00.528
    # Current statement coverage: 0.5

    def setupCtrlPlane(self):
        self.table_add(
            (
                'ingress.ex1',
                [
                    self.Ternary('hdrs.extra[0].h', 0x93F7, 0xC3B7),
                ],
            ),
            (
                'ingress.setbyte',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )
        self.table_add(
            (
                'ingress.test1',
                [
                    self.Ternary('hdrs.data.f1', 0xBFD67EF3, 0xDD4B9E1C),
                ],
            ),
            (
                'ingress.setb1',
                [
                    ('port', 0x002),
                    ('val', 0x00),
                ],
            ),
            1,
        )

    def sendPacket(self):
        ig_port = 0
        pkt = b'\xbf\xd6\x1f\xb2\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xb7\x00\x77\x07\xf9\x84\x8b\x16\xaa\x73\x98\x5b\xe9\x47\x5f\xbd\xe0\xa3\x12\xce\xee\xc4\xc2\xf4\x47\xb4\xf1\xd0\x17\x2c\xd9\x17\x8c\xf8\x35\x60\x49\xb0\x8d\x4f\x0d\xc4\xe3\x71\x4c\x02\x97\x83\x0e\x1c\x7a\xe4\x58\x9b\x0f\xa6\x88\xbb\x71\xa1\x96\x09\x3b\xb4\x37\xea\x9a\x75\x83\x45\xa5\x4f\x2d\x96\x9b\x14\x3f\x2c\x86\xbe\x0e\x99\xe5\x0d\xe1\xc4\x50\x53\xfe\x61\x76\x20\xf2\xef\x94\xad\x32\x66\x81\xad\xa8\xb8\xa2\xf3\xa3\xb6\x7e\x24\x08\x39\x92\xc9\xe4\xd7\xa4\x45\x03\xed\xe8\xeb\x2f\xc3\x46\xf1\x27\x50\xb1\x8b\x03\xff\x1d\x15\x00\x94\x43\x9b\x36\xa5\xcd\xb3\x44\x70\x92\x42\x59\x00\x92\x89\x1a\x3a\x0c\x70\x4b\x35\x0c\x58\x10\x64\x69\x04\x41\xe6\x6a\x97\x33\xa2\xce\x06\xaf\xf3\x85\xf3\x74\x5b\x80\x2d\xaa\x72\x0e\x15\xca\x46\x91\x98\x01\xf7\x38\x89\xca\x74\x71\x75\x86\xf6\x4c\xd7\xf1\xed\x03\xb6\x2e\x79\x07\x24\xf7\x12\xb9\xd2\x0f\x2b\xa2\xde\x00\xa0\xd1\x4d\x57\x2b\xbb\x86\x79\xf5\x43\x8f\x20\xb3\x15\x92\xe4\xc5\x26\xfe\x88\x69\x09\x00\xc9\x9d\x92\x1c\xba\x14\x77\x2b\x89\xe1\xef\xa7\xa4\xed\x5f\xac\x51\xeb\x05\x44\x3a\xd4\x76\x90\xec\xb7\xed\xcd\x78\xb6\x6c\x8e\xb3\x79\xbc\xd0\xf1\x63\x6b\x53\xfc\x54\x4d\xe2\x4e\x3b\xf6\x6c\xc0\x3a\x44\xc1\x61\xca\x2d\x74\xd8\x9c\xed\x3e\xe6\x82\xfe\xc1\x5f\xc3\xca\x17\xda\x6d\x66\x8f\xcb\x46\x9b\xb6\xcc\xc6\x73\x88\xf2\xaa\x6b\xf6\x21\xe0\x68\x19\x94\x3c\x8b\xa3\x80\xaf\xd3\x33\xce\x6b\x1f\x21\x6d\x35\xc4\x79\x48\xcb\x2c\x3f\x62\xb5\xf3\x47\xbf\x44\xfc\x8f\x45\x73\x9f\xe4\x9c\xf5\x37\xb7\x5c\xcb\xfa\x62\x03\xa5\x09\x94\xed\x2c\x55\xab\x75\xeb\xdd\xc1\x06\x41\x53\xdb\x97\xc4\x2a\x14\x05\xe0\xb3\xdf\x0f\x04\x0d\x8e\x3b\x38\xbb\xae\x24\xe1\x24\xf0\xc2\xf6\x4a\x22\x5c\x19\xa1\x1e\x09\x4f\xd0\xf0\x67\xd8\x33\xe1\x92\xbb\x78\xa2\x83\xd9\x7f\xfc\x66\xbb\xab\xe4\x52\x1b\xb3\xf3\xdc\x6e\x4f\x55\x72\xa0\x39\x2e\x12\xf0\x1d\xc4\x11\x9e\xf1\x74\x16\xad\x22\x9d\x22\x49\xcd\x1f\xba\x6d\x05\x53\xca\x7b\x90\x2a\x04\x86\xc3\xba\x3b\xd4\x74\xbf\xc0\xd0\x29\x24\xbb\xb2\xf5\x2d\xb5\xd6\xc4\xa4\x70\x92\xaf\x2f\xed\x60\x7c\x41\xb1\xbf\xe8\x42\xac\x77\x8d\x52\x56\x9e\x25\xe1\x9d\xa1\x85\x6f\x11\xa3\x30\x9b\xbc\x64\x00\x94\x0f\xbe\xe9\x9c\x25\x23\xda\x4c\xe0\x59\x7b\x45\x90\x52\xf1\xb8\xbd\x0d\xfb\xd0\x4c\xcc\x9b\x28\x44\x68\xad\x0e\x2d\x75\x48\xa8\xf9\x80\x5f\x72\x14\x4a\x23\x20\x26\x76\xb9\xd8\x21\xcb\xf4\xfa\xa1\xa2\x15\x20\x51\xd9\x08\x8e\x4e\x8d\x4b\xa1\xbf\x85'
        ptfutils.send_packet(self, ig_port, pkt)

    def verifyPackets(self):
        eg_port = 2
        exp_pkt = Mask(
            b'\xbf\xd6\x1f\xb2\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xb7\x00\x77\x07\xf9\x84\x8b\x16\xaa\x73\x98\x5b\xe9\x47\x5f\xbd\xe0\xa3\x12\xce\xee\xc4\xc2\xf4\x47\xb4\xf1\xd0\x17\x2c\xd9\x17\x8c\xf8\x35\x60\x49\xb0\x8d\x4f\x0d\xc4\xe3\x71\x4c\x02\x97\x83\x0e\x1c\x7a\xe4\x58\x9b\x0f\xa6\x88\xbb\x71\xa1\x96\x09\x3b\xb4\x37\xea\x9a\x75\x83\x45\xa5\x4f\x2d\x96\x9b\x14\x3f\x2c\x86\xbe\x0e\x99\xe5\x0d\xe1\xc4\x50\x53\xfe\x61\x76\x20\xf2\xef\x94\xad\x32\x66\x81\xad\xa8\xb8\xa2\xf3\xa3\xb6\x7e\x24\x08\x39\x92\xc9\xe4\xd7\xa4\x45\x03\xed\xe8\xeb\x2f\xc3\x46\xf1\x27\x50\xb1\x8b\x03\xff\x1d\x15\x00\x94\x43\x9b\x36\xa5\xcd\xb3\x44\x70\x92\x42\x59\x00\x92\x89\x1a\x3a\x0c\x70\x4b\x35\x0c\x58\x10\x64\x69\x04\x41\xe6\x6a\x97\x33\xa2\xce\x06\xaf\xf3\x85\xf3\x74\x5b\x80\x2d\xaa\x72\x0e\x15\xca\x46\x91\x98\x01\xf7\x38\x89\xca\x74\x71\x75\x86\xf6\x4c\xd7\xf1\xed\x03\xb6\x2e\x79\x07\x24\xf7\x12\xb9\xd2\x0f\x2b\xa2\xde\x00\xa0\xd1\x4d\x57\x2b\xbb\x86\x79\xf5\x43\x8f\x20\xb3\x15\x92\xe4\xc5\x26\xfe\x88\x69\x09\x00\xc9\x9d\x92\x1c\xba\x14\x77\x2b\x89\xe1\xef\xa7\xa4\xed\x5f\xac\x51\xeb\x05\x44\x3a\xd4\x76\x90\xec\xb7\xed\xcd\x78\xb6\x6c\x8e\xb3\x79\xbc\xd0\xf1\x63\x6b\x53\xfc\x54\x4d\xe2\x4e\x3b\xf6\x6c\xc0\x3a\x44\xc1\x61\xca\x2d\x74\xd8\x9c\xed\x3e\xe6\x82\xfe\xc1\x5f\xc3\xca\x17\xda\x6d\x66\x8f\xcb\x46\x9b\xb6\xcc\xc6\x73\x88\xf2\xaa\x6b\xf6\x21\xe0\x68\x19\x94\x3c\x8b\xa3\x80\xaf\xd3\x33\xce\x6b\x1f\x21\x6d\x35\xc4\x79\x48\xcb\x2c\x3f\x62\xb5\xf3\x47\xbf\x44\xfc\x8f\x45\x73\x9f\xe4\x9c\xf5\x37\xb7\x5c\xcb\xfa\x62\x03\xa5\x09\x94\xed\x2c\x55\xab\x75\xeb\xdd\xc1\x06\x41\x53\xdb\x97\xc4\x2a\x14\x05\xe0\xb3\xdf\x0f\x04\x0d\x8e\x3b\x38\xbb\xae\x24\xe1\x24\xf0\xc2\xf6\x4a\x22\x5c\x19\xa1\x1e\x09\x4f\xd0\xf0\x67\xd8\x33\xe1\x92\xbb\x78\xa2\x83\xd9\x7f\xfc\x66\xbb\xab\xe4\x52\x1b\xb3\xf3\xdc\x6e\x4f\x55\x72\xa0\x39\x2e\x12\xf0\x1d\xc4\x11\x9e\xf1\x74\x16\xad\x22\x9d\x22\x49\xcd\x1f\xba\x6d\x05\x53\xca\x7b\x90\x2a\x04\x86\xc3\xba\x3b\xd4\x74\xbf\xc0\xd0\x29\x24\xbb\xb2\xf5\x2d\xb5\xd6\xc4\xa4\x70\x92\xaf\x2f\xed\x60\x7c\x41\xb1\xbf\xe8\x42\xac\x77\x8d\x52\x56\x9e\x25\xe1\x9d\xa1\x85\x6f\x11\xa3\x30\x9b\xbc\x64\x00\x94\x0f\xbe\xe9\x9c\x25\x23\xda\x4c\xe0\x59\x7b\x45\x90\x52\xf1\xb8\xbd\x0d\xfb\xd0\x4c\xcc\x9b\x28\x44\x68\xad\x0e\x2d\x75\x48\xa8\xf9\x80\x5f\x72\x14\x4a\x23\x20\x26\x76\xb9\xd8\x21\xcb\xf4\xfa\xa1\xa2\x15\x20\x51\xd9\x08\x8e\x4e\x8d\x4b\xa1\xbf\x85'
        )
        ptfutils.verify_packet(self, exp_pkt, eg_port)

    def runTest(self):
        self.runTestImpl()


class Test2(AbstractTest):
    # Date generated: 2023-01-17-17:00:00.537
    # Current statement coverage: 0.67

    def setupCtrlPlane(self):
        self.table_add(
            (
                'ingress.ex1',
                [
                    self.Ternary('hdrs.extra[0].h', 0x0000, 0x0000),
                ],
            ),
            (
                'ingress.act3',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )
        self.table_add(
            (
                'ingress.tbl3',
                [
                    self.Ternary('hdrs.data.f2', 0x3E8EBBE3, 0x52FBFAEE),
                ],
            ),
            (
                'ingress.setbyte',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )

    def sendPacket(self):
        ig_port = 0
        pkt = b'\x00\x00\x00\x00\x3f\x8e\xbb\xe2\x00\x00\x00\x00\xa4\xe4\x51'
        ptfutils.send_packet(self, ig_port, pkt)

    def verifyPackets(self):
        eg_port = 0
        exp_pkt = Mask(b'\x00\x00\x00\x00\x3f\x8e\xbb\xe2\x00\x00\x00\x00\xa4\xe4\x51')
        ptfutils.verify_packet(self, exp_pkt, eg_port)

    def runTest(self):
        self.runTestImpl()


class Test3(AbstractTest):
    # Date generated: 2023-01-17-17:00:00.547
    # Current statement coverage: 0.67

    def setupCtrlPlane(self):
        self.table_add(
            (
                'ingress.test1',
                [
                    self.Ternary('hdrs.data.f1', 0xB4DFD4DF, 0x759EAE4E),
                ],
            ),
            (
                'ingress.setb1',
                [
                    ('port', 0x006),
                    ('val', 0x00),
                ],
            ),
            1,
        )

    def sendPacket(self):
        ig_port = 0
        pkt = b'\xbc\xbe\x94\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x4a'
        ptfutils.send_packet(self, ig_port, pkt)

    def verifyPackets(self):
        eg_port = 6
        exp_pkt = Mask(b'\xbc\xbe\x94\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x4a')
        ptfutils.verify_packet(self, exp_pkt, eg_port)

    def runTest(self):
        self.runTestImpl()


class Test4(AbstractTest):
    # Date generated: 2023-01-17-17:00:00.567
    # Current statement coverage: 0.83

    def setupCtrlPlane(self):
        self.table_add(
            (
                'ingress.ex1',
                [
                    self.Ternary('hdrs.extra[0].h', 0xB3FF, 0xF9F6),
                ],
            ),
            (
                'ingress.act2',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )
        self.table_add(
            (
                'ingress.tbl2',
                [
                    self.Ternary('hdrs.data.f2', 0x3FB8BFE5, 0x3DBFE2CC),
                ],
            ),
            (
                'ingress.setbyte',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )
        self.table_add(
            (
                'ingress.test1',
                [
                    self.Ternary('hdrs.data.f1', 0x77E8CEF9, 0x8AA21772),
                ],
            ),
            (
                'ingress.setb1',
                [
                    ('port', 0x005),
                    ('val', 0x00),
                ],
            ),
            1,
        )

    def sendPacket(self):
        ig_port = 0
        pkt = b'\x27\xe4\xc6\xf4\xfd\xb8\xa2\xc6\x00\x00\x00\x00\xb5\xf6\x00\x59\xb9\x45\x18\x6e\x39\xcf\xb1\xdf\x25\xfb\x43\xbb\x58\x9a\xa6\x4c\x39\xc4\x72\xef\x51\x91\x52\x1f\x8f\x4a\x11\x64\xb5\xe4\x1c\x6d\xe5\xec\x2d\x9f\x1d\x20\x8b\xaa\xeb\x9a\xd6\xfa\x80\xee\x89\xbd\x1b\x41\xb0\xa4\x64\xce\x7f\x42\x78\x5e\xd6\x99\x06\x40\xc7\xc2\x4a\x4e\x3c\x60\x11\xe7\x57\xba\x7e\xf5\x52\x82\x46\x20\xfe\x7d\x18\xba\x02\xc1\xbf\x02\x94\x64\x1a\xed\x69\x7b\x1d\xe6\x90\xbd\x56\xba\x24\x47\x69\x3e\xb9\x26\x99\xaa\xe9\x66\xca\x5c\xe9\xf6\x1f\x4d\x87\xe0\xd5\x6c\x69\x10\x48\x64\x64\xee\xda\x92\x05\x8e\x20\x33\xdd\xed\x71\xb4\xd4\x02\x5b\xde\x51\xa7\xf9\xd0\x13\xe9\x4b\x78\x55\xa7\x01\x36\x8b\xa0\x4d\xa0\xd3\xf9\x88\x65\x99\x2d\x2d\x4a\x5b\x17\x04\xa4\x7e\x4d\x59\xbe\xab\x69\x41\xcd\x88\x30\xc8\x8b\xc8\xd4\x74\xcc\x5a\x3c\x5d\x4d\x32\x3f\x49\xde\x7b\xe7\xb3\x84\x5b\x01\x3e\xae\x54\xb3\x90\xdf\x1c\x5c\x45\xa8\x52\x2c\x5f\x6c\x49\xa2\x44\x1b\x21\x81\x4f\x33\x6c\x3e\xf8\x8d\x1d\x21\xa2\xbe\x33\xcf\x9f\x0c\xe6\xae\x24\x74\xb4\x1b\x72\x9e\xf6\xda\xa6\xf8\x07\x45\x46\x3a\xef\x1d\x97\xff\x24\x39\xaa\xda\x57\xce\x69\x49\x1c\x69\x5d\x8a\x6d\x33\xb7\x62\x04\x4f\x93\xca\xf3\xe9\x0a\x84\xe2\x0b\x71\x60\x76\x37\xb8\x70\xf9\xfe\x10\x4a\x04\x18\x20\x78\x7d\x2d\x10\x0b\x11\x59\x88\x6b\x09\x32\xb3\x9b\x79\xd8\x27\x5c\x4d\xd1\x7a\xdb\xf5\x65\x09\x85\x30\x60\x96\xcf\x15\xe9\x9c\xe2\xbd\x55\x7f\x34\xf9\xaf\xb4\xf1\x1f\x2a\x0f\x77\x19\x87\x7a\x81\x58\xe3\xe8\xc9\xc7\xe1\x6c\xa0\x50\x06\xda\x34\x49\xdc\xc6\xe9\x85\xd4\x29\xf3\x29\x5f\x45\x1a\x87\xed\xee\xd3\x83\x91\xaa\x6c\x8b\xd4\x20\xbb\x51\x76\x48\xee\xde\x7a\x6b\x99\x01\x8d\xf1\x11\xb5\x9b\x90\x92\x87\x0c\x7c\x71\x4c\x26\xc3\xd7\x0c\x1f\x18\xc5\x28\xe6\x70\x01\x20\x58\x74\x89\xe3\xfd\xb2\xea\x2e\x71\xdf\x9e\xd4\x74\x2a\xd4\x34\x03\xdd\x57\x33\x82\x54\x94\x8f\xd8\x1a\xec\x42\x91\x13\x5b\x0d\x22\x57\x5a\x26\x27\x86\x47\x04\x05\x78\x21\x34\x6d\x74\x76\xf2\x95\x21\xae\xf1\x29\xed\xfa\xe9\x1a\x03\x30\xe1\xac\x0e\x92\x0c\x43\xc8\xf4\xb6\xc6\xd6\xdf\xab\x7a\x9d\x34\x94\x83\xc2\xbe\x76\xb5\xfe\x1f\xe6\x94\xdf\x1b\xd9\xc8\xd5\xdd\xbb\xf3\x5c\x4b\xa7\x50\xd3\xf4\x15\xe9\x8e\x95\x9b\x75\xbe\xc5\xa3\xd6\x2d\xb4\x5c\xdb\xd6\x85\xf5\x99\x8c\xed\x50\xea\x75\x63\xf8\x1d\xd1\xc3\xc2\xa1\x55\x8b\xa0\x74\xca\x72\xb9\x76\xf0\x3f\xa7\x3d\xea\x3c\x7e\x95\xb9\xf7\xcb\x86\xc4\x4c\x30\x51\xa6\x3e\x95\x2b\xca\x4e\xc8\xb1\x96\x2c\xb2\x44\xe5\x5e\xbe\x1b\x59\xeb\xe2\xd4\x75\x41\x60\xdf\x44\x21\x25\x8a\x02\xd1\x61\x8c\x48\x84\x59\xa4\x43\x88\xec\x18\xbe\x05\xed\x24\xbb\x1f\x4b\xab\x68\x8b\x99\x83\x3b\x48\x83\x7d\x62\x78\x84\x3f\xd6\x49\xbe\xf3\x19\x0a\x5e\x60\x3c\x03\x92\x3a\xf6\xb7\x10\x12\xf7\xc5\xdf\x2f\xa8\xda\x60\x03\x8c\x7f\x8a\x9e\xb8\x95\x4f\xdd\x1e\xd6\xe6\x5f\x6b\xc0\xf0\x29\x30\xe1\xfe\x8e\x2b\xa6\x31\xb5\xa9\x26\x5a\x60\xce\xf7\x1d\x6e\xec\x4c\x98\x6b\xe0\x7e\x40\x73\xbe\xe4\xbd\x14\xb3\xa4\x63\xe8\x5a\xbd\xb0\x3e\xf2\xe9\x6c\x63\x4d\xa5\x49\xcd\x44\xed\x6c\x2d\xbe\x0e\x7b\x82\x1b\x73\xce\xe3\x99\x32\xe9\xb3\x0c\x40\xb5\xe7\xca\xa6\x9e\x2a\x15\xd3\x60\x0a\x1b\x95\xf2\xaa\x79\x21\x88\x9b\xd2\x7c\x4c\xfa\x0e\x18\x22\x9a\xf7\xe8\x80\x8c\xdc\xfa\x49\xad\x31\xf4\xa2\x2d\x02\xb9\x09\x6b\xc5\x00\xbd\xbb\xd1\x49\x0f\x3b\xa4\x4f\xb4\xb5\xf7\xfc\x7c\xa7\x90\xd9\xdf\x00\xc7\x6b\x76\xa9\x45\x47\x9e\xf4\xc5\xc9\x0a\x58\xf5\x60\xf9\x89\xc1\x0e\xd1\xbf\x46\x89\xf9\xb8\x38\xdb\xae\x3d\x3c\x1d\x80\x14\xc7\xe4\xd4\xc5\x33\x2e\x5c\xe6\x5f\x38\xca\x2b\xaf\xa7\x27\xbe\x26\xc4\xa6\x27\xae\xd1\xd0\x45\xbb\x51\x99\x09\xb6\x84\x18\x6e\xf2\x39\x69\x64\x43\xce\x1f\x24\xf9\x5a\x7d\x51\xdc\xf8\x3e\xbb\x8d\xaa\x79\x1f\x7d\xb0\x40\x82\x65\x95\xe6\xba\xbb\x9a\xc7\x1c\x29\x35\x08\x24\x90\x62\xb4\xfc\xbe\xd3\xd7\x3a\x14\xd3\x8c\x45\x15\x4d\xd3\x38\xcf\xfd\x5c\x5b\xc4\x50\xce\x60\xdd\xdb\xf3\x7d\x43\x4c\x9f\x79\x1d\x11\x9e\xb4\x78\x60\x12\x59\xfe\xa0\x6b\x5f\xb1\xeb\xe2\x1f\xb6\xbd\xb4\x59\x4d\x2e\xf7\x9d\x0a\x15\x7a\x84\x79\x14\x18\xa9\x25\xf5\x88\x91\xbc\x91\x29\xce\x34\xb9\xf9\x50\x41\xcb\x83\x2e\x2e\x2b\x49\xff\x45\xd5\x7f\x66\x1b\x5f\xb8\x9e\xb3\xed\x94\xee\x76\x05\xb7\x23\x91\x96\x4b\x7b\xe2\x8c\x20'
        ptfutils.send_packet(self, ig_port, pkt)

    def verifyPackets(self):
        eg_port = 5
        exp_pkt = Mask(
            b'\x27\xe4\xc6\xf4\xfd\xb8\xa2\xc6\x00\x00\x00\x00\xb5\xf6\x00\x59\xb9\x45\x18\x6e\x39\xcf\xb1\xdf\x25\xfb\x43\xbb\x58\x9a\xa6\x4c\x39\xc4\x72\xef\x51\x91\x52\x1f\x8f\x4a\x11\x64\xb5\xe4\x1c\x6d\xe5\xec\x2d\x9f\x1d\x20\x8b\xaa\xeb\x9a\xd6\xfa\x80\xee\x89\xbd\x1b\x41\xb0\xa4\x64\xce\x7f\x42\x78\x5e\xd6\x99\x06\x40\xc7\xc2\x4a\x4e\x3c\x60\x11\xe7\x57\xba\x7e\xf5\x52\x82\x46\x20\xfe\x7d\x18\xba\x02\xc1\xbf\x02\x94\x64\x1a\xed\x69\x7b\x1d\xe6\x90\xbd\x56\xba\x24\x47\x69\x3e\xb9\x26\x99\xaa\xe9\x66\xca\x5c\xe9\xf6\x1f\x4d\x87\xe0\xd5\x6c\x69\x10\x48\x64\x64\xee\xda\x92\x05\x8e\x20\x33\xdd\xed\x71\xb4\xd4\x02\x5b\xde\x51\xa7\xf9\xd0\x13\xe9\x4b\x78\x55\xa7\x01\x36\x8b\xa0\x4d\xa0\xd3\xf9\x88\x65\x99\x2d\x2d\x4a\x5b\x17\x04\xa4\x7e\x4d\x59\xbe\xab\x69\x41\xcd\x88\x30\xc8\x8b\xc8\xd4\x74\xcc\x5a\x3c\x5d\x4d\x32\x3f\x49\xde\x7b\xe7\xb3\x84\x5b\x01\x3e\xae\x54\xb3\x90\xdf\x1c\x5c\x45\xa8\x52\x2c\x5f\x6c\x49\xa2\x44\x1b\x21\x81\x4f\x33\x6c\x3e\xf8\x8d\x1d\x21\xa2\xbe\x33\xcf\x9f\x0c\xe6\xae\x24\x74\xb4\x1b\x72\x9e\xf6\xda\xa6\xf8\x07\x45\x46\x3a\xef\x1d\x97\xff\x24\x39\xaa\xda\x57\xce\x69\x49\x1c\x69\x5d\x8a\x6d\x33\xb7\x62\x04\x4f\x93\xca\xf3\xe9\x0a\x84\xe2\x0b\x71\x60\x76\x37\xb8\x70\xf9\xfe\x10\x4a\x04\x18\x20\x78\x7d\x2d\x10\x0b\x11\x59\x88\x6b\x09\x32\xb3\x9b\x79\xd8\x27\x5c\x4d\xd1\x7a\xdb\xf5\x65\x09\x85\x30\x60\x96\xcf\x15\xe9\x9c\xe2\xbd\x55\x7f\x34\xf9\xaf\xb4\xf1\x1f\x2a\x0f\x77\x19\x87\x7a\x81\x58\xe3\xe8\xc9\xc7\xe1\x6c\xa0\x50\x06\xda\x34\x49\xdc\xc6\xe9\x85\xd4\x29\xf3\x29\x5f\x45\x1a\x87\xed\xee\xd3\x83\x91\xaa\x6c\x8b\xd4\x20\xbb\x51\x76\x48\xee\xde\x7a\x6b\x99\x01\x8d\xf1\x11\xb5\x9b\x90\x92\x87\x0c\x7c\x71\x4c\x26\xc3\xd7\x0c\x1f\x18\xc5\x28\xe6\x70\x01\x20\x58\x74\x89\xe3\xfd\xb2\xea\x2e\x71\xdf\x9e\xd4\x74\x2a\xd4\x34\x03\xdd\x57\x33\x82\x54\x94\x8f\xd8\x1a\xec\x42\x91\x13\x5b\x0d\x22\x57\x5a\x26\x27\x86\x47\x04\x05\x78\x21\x34\x6d\x74\x76\xf2\x95\x21\xae\xf1\x29\xed\xfa\xe9\x1a\x03\x30\xe1\xac\x0e\x92\x0c\x43\xc8\xf4\xb6\xc6\xd6\xdf\xab\x7a\x9d\x34\x94\x83\xc2\xbe\x76\xb5\xfe\x1f\xe6\x94\xdf\x1b\xd9\xc8\xd5\xdd\xbb\xf3\x5c\x4b\xa7\x50\xd3\xf4\x15\xe9\x8e\x95\x9b\x75\xbe\xc5\xa3\xd6\x2d\xb4\x5c\xdb\xd6\x85\xf5\x99\x8c\xed\x50\xea\x75\x63\xf8\x1d\xd1\xc3\xc2\xa1\x55\x8b\xa0\x74\xca\x72\xb9\x76\xf0\x3f\xa7\x3d\xea\x3c\x7e\x95\xb9\xf7\xcb\x86\xc4\x4c\x30\x51\xa6\x3e\x95\x2b\xca\x4e\xc8\xb1\x96\x2c\xb2\x44\xe5\x5e\xbe\x1b\x59\xeb\xe2\xd4\x75\x41\x60\xdf\x44\x21\x25\x8a\x02\xd1\x61\x8c\x48\x84\x59\xa4\x43\x88\xec\x18\xbe\x05\xed\x24\xbb\x1f\x4b\xab\x68\x8b\x99\x83\x3b\x48\x83\x7d\x62\x78\x84\x3f\xd6\x49\xbe\xf3\x19\x0a\x5e\x60\x3c\x03\x92\x3a\xf6\xb7\x10\x12\xf7\xc5\xdf\x2f\xa8\xda\x60\x03\x8c\x7f\x8a\x9e\xb8\x95\x4f\xdd\x1e\xd6\xe6\x5f\x6b\xc0\xf0\x29\x30\xe1\xfe\x8e\x2b\xa6\x31\xb5\xa9\x26\x5a\x60\xce\xf7\x1d\x6e\xec\x4c\x98\x6b\xe0\x7e\x40\x73\xbe\xe4\xbd\x14\xb3\xa4\x63\xe8\x5a\xbd\xb0\x3e\xf2\xe9\x6c\x63\x4d\xa5\x49\xcd\x44\xed\x6c\x2d\xbe\x0e\x7b\x82\x1b\x73\xce\xe3\x99\x32\xe9\xb3\x0c\x40\xb5\xe7\xca\xa6\x9e\x2a\x15\xd3\x60\x0a\x1b\x95\xf2\xaa\x79\x21\x88\x9b\xd2\x7c\x4c\xfa\x0e\x18\x22\x9a\xf7\xe8\x80\x8c\xdc\xfa\x49\xad\x31\xf4\xa2\x2d\x02\xb9\x09\x6b\xc5\x00\xbd\xbb\xd1\x49\x0f\x3b\xa4\x4f\xb4\xb5\xf7\xfc\x7c\xa7\x90\xd9\xdf\x00\xc7\x6b\x76\xa9\x45\x47\x9e\xf4\xc5\xc9\x0a\x58\xf5\x60\xf9\x89\xc1\x0e\xd1\xbf\x46\x89\xf9\xb8\x38\xdb\xae\x3d\x3c\x1d\x80\x14\xc7\xe4\xd4\xc5\x33\x2e\x5c\xe6\x5f\x38\xca\x2b\xaf\xa7\x27\xbe\x26\xc4\xa6\x27\xae\xd1\xd0\x45\xbb\x51\x99\x09\xb6\x84\x18\x6e\xf2\x39\x69\x64\x43\xce\x1f\x24\xf9\x5a\x7d\x51\xdc\xf8\x3e\xbb\x8d\xaa\x79\x1f\x7d\xb0\x40\x82\x65\x95\xe6\xba\xbb\x9a\xc7\x1c\x29\x35\x08\x24\x90\x62\xb4\xfc\xbe\xd3\xd7\x3a\x14\xd3\x8c\x45\x15\x4d\xd3\x38\xcf\xfd\x5c\x5b\xc4\x50\xce\x60\xdd\xdb\xf3\x7d\x43\x4c\x9f\x79\x1d\x11\x9e\xb4\x78\x60\x12\x59\xfe\xa0\x6b\x5f\xb1\xeb\xe2\x1f\xb6\xbd\xb4\x59\x4d\x2e\xf7\x9d\x0a\x15\x7a\x84\x79\x14\x18\xa9\x25\xf5\x88\x91\xbc\x91\x29\xce\x34\xb9\xf9\x50\x41\xcb\x83\x2e\x2e\x2b\x49\xff\x45\xd5\x7f\x66\x1b\x5f\xb8\x9e\xb3\xed\x94\xee\x76\x05\xb7\x23\x91\x96\x4b\x7b\xe2\x8c\x20'
        )
        ptfutils.verify_packet(self, exp_pkt, eg_port)

    def runTest(self):
        self.runTestImpl()


class Test5(AbstractTest):
    # Date generated: 2023-01-17-17:00:00.574
    # Current statement coverage: 0.83

    def setupCtrlPlane(self):
        self.table_add(
            (
                'ingress.ex1',
                [
                    self.Ternary('hdrs.extra[0].h', 0x0000, 0x0000),
                ],
            ),
            ('ingress.noop', []),
            1,
        )
        self.table_add(
            (
                'ingress.test1',
                [
                    self.Ternary('hdrs.data.f1', 0x6AFFF7F3, 0x507BD47B),
                ],
            ),
            (
                'ingress.setb1',
                [
                    ('port', 0x004),
                    ('val', 0x00),
                ],
            ),
            1,
        )

    def sendPacket(self):
        ig_port = 0
        pkt = b'\xc2\xff\xf5\xf3\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x34\x2a'
        ptfutils.send_packet(self, ig_port, pkt)

    def verifyPackets(self):
        eg_port = 4
        exp_pkt = Mask(b'\xc2\xff\xf5\xf3\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x34\x2a')
        ptfutils.verify_packet(self, exp_pkt, eg_port)

    def runTest(self):
        self.runTestImpl()


class Test6(AbstractTest):
    # Date generated: 2023-01-17-17:00:00.579
    # Current statement coverage: 1

    def setupCtrlPlane(self):
        self.table_add(
            (
                'ingress.ex1',
                [
                    self.Ternary('hdrs.extra[0].h', 0x0000, 0x0000),
                ],
            ),
            (
                'ingress.act1',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )
        self.table_add(
            (
                'ingress.tbl1',
                [
                    self.Ternary('hdrs.data.f2', 0xBF594DC7, 0x7B4A6D67),
                ],
            ),
            (
                'ingress.setbyte',
                [
                    ('val', 0x00),
                ],
            ),
            1,
        )

    def sendPacket(self):
        ig_port = 0
        pkt = b'\x00\x00\x00\x00\xbb\x6d\x5f\x57\x00\x00\x00\x00\x27\xed\x9c'
        ptfutils.send_packet(self, ig_port, pkt)

    def verifyPackets(self):
        eg_port = 0
        exp_pkt = Mask(b'\x00\x00\x00\x00\xbb\x6d\x5f\x57\x00\x00\x00\x00\x27\xed\x9c')
        ptfutils.verify_packet(self, exp_pkt, eg_port)

    def runTest(self):
        self.runTestImpl()
