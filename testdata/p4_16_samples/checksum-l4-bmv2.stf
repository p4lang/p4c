#def bytes_to_hex(b):
#    return ''.join(['%02x' % (x) for x in b])
#
# bytes_to_hex(bytes(pkt1))
#
# The packet was created with these Scapy statements:
# p=Ether(src='08:00:27:01:8b:bc', dst='52:54:00:12:35:02')/IP(src='10.0.2.15', dst='10.1.0.1')/TCP(sport=5793, dport=80)/Raw("deadbeefdeadbeef")
#
packet 0 525400123502080027018bbc08004500003800010000400664af0a00020f0a01000116a1005000000000000000005002200047a6000064656164626565666465616462656566
expect 0 525400123502080027018BBC080045000038000100003F0665AB0A00020F0A01000516A2005000000000000000005002200047A1000064656164626565666465616462656566


# The second packet was created with these Scapy statements:
# p=Ether(src='08:00:27:01:8b:bc', dst='52:54:00:12:35:02')/IP(dst='10.2.3.4', options=IPOption(b'\x83\x03\x10'))/TCP(sport=5501, dport=80)/Raw("deadbeefdeadbeef")

# This tests that the P4 code for calculating a fresh IPv4 header and TCP
# checksum also works with a varbit field 'options' in the ipv4_t
# header type.

packet 0 525400123502080027018bbc08004600003c000100004006174bc0a801bf0a02030483031000157d00500000000000000000500220008f6d000064656164626565666465616462656566
expect 0 525400123502080027018BBC08004600003C000100003F061847C0A801BF0A02030883031000157E00500000000000000000500220008F68000064656164626565666465616462656566


# UDP pkt for UDP checksum test
#
packet 0 CA0107FC001C11111111111108004500002C00010000401166BA0A0100040A01000116A100500018B99B64656164626565666465616462656566
expect 0 CA0107FC001C11111111111108004500002C000100003F1167B60A0100040A01000516A200500018B99664656164626565666465616462656566

# TCP pkt with TCP options and IP options
#p=Ether(src='08:00:27:01:8b:bc', dst='52:54:00:12:35:02')/IP(dst='10.2.3.4', options=IPOption(b'\x83\x03\x10'))/TCP(sport=5501, dport=80, options=[('MSS', 636), ('EOL', None)])/Raw("deadbeefdeadbeef")

packet 0 525400123502080027018bbc0800460000440001000040061743c0a801bf0a02030483031000157d00500000000000000000700220006ae500000204027c0000000064656164626565666465616462656566
expect 0 525400123502080027018BBC080046000044000100003F06183FC0A801BF0A02030883031000157E00500000000000000000700220006AE000000204027C0000000064656164626565666465616462656566
