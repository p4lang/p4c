implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(6): [--Wwarn=unused] warning: 'x' is unused
const S<tuple<>> x = {
                 ^
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(6): [--Werror=type-error] error: 'x'
const S<tuple<>> x = {
                 ^
  ---- Actual error:
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(6): 'int' type can only be unified with 'int', 'bit<>', or 'signed<>' types, not with 'tuple<>'
  const S<tuple<>> x = {
          ^^^^^^^
  ---- Originating from:
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(7): Type of initializer 'tuple<int, int>' does not match type 'tuple<tuple<>, tuple<>>' of field 't' in 'struct S'
    t = { 0, 0 }
        ^^^^^^^^
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(4)
    tuple<T, T> t;
    ^^^^^^^^^^^
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(4)
    tuple<T, T> t;
                ^
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(3)
  struct S<T> {
         ^
  ---- Originating from:
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(6): Source expression '{ t = { 0, 0 } }' produces a result of type 'unknown struct' which cannot be assigned to a left-value with type 'struct S<...>'
  const S<tuple<>> x = {
                       ^
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(6)
  const S<tuple<>> x = {
                       ^
implicit-cast-to-tuple-from-tuple-expr-with-field-of-incompatible-type.p4(6)
  const S<tuple<>> x = {
        ^^^^^^^^^^
