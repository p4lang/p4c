# Copyright 2013-present Barefoot Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ACLOCAL_AMFLAGS = -I m4
WARNING_FLAGS = -Wall \
		-Wextra \
		-Wno-overloaded-virtual \
		-Wno-deprecated \
		$(EXTRA_WARNING_FLAGS)
AM_CFLAGS = $(WARNING_FLAGS)
AM_CXXFLAGS = $(WARNING_FLAGS)
AM_CPPFLAGS = -I$(srcdir)/frontends \
	      -I$(srcdir)/backends \
	      -I$(srcdir)/extensions

# Make installation locations available to source code.
AM_CPPFLAGS += -DCONFIG_PREFIX=\"$(prefix)\"
AM_CPPFLAGS += -DCONFIG_PKGDATADIR=\"$(pkgdatadir)\"

TOOLSDIR=$(srcdir)/tools
GENTESTS=$(TOOLSDIR)/gen-tests.py

################ Utility functions

# Overwrite a file $(1) with $(2) if the two have different contents, and remove
# $(2). Useful to avoid unnecessary rebuilds when generated files are updated.
define update_if_changed
	@if ! cmp -s $(1) $(2); then cp -f $(2) $(1); fi
	@rm -f $(2)
endef

################ Variables populated in subproject Makefiles
# Please use += to append values to these variables.

# Standard automake variables.
CLEANFILES =                   # Files to remove on clean
bin_PROGRAMS =                 # Binaries built
noinst_LTLIBRARIES =           # Libtool convenience libraries
noinst_HEADERS =               # Headers that are not installed
noinst_LIBRARIES =             # Static libraries built
noinst_PROGRAMS =              # Binaries built that are not installed
BUILT_SOURCES =                # Generated source files
check_PROGRAMS =               # Test programs to build
TESTS =                        # Tests to execute
bin_SCRIPTS =                  # Scripts built
EXTRA_DIST =                   # Extra files to distribute

# Variables specific to our build system.
XFAIL_TESTS = $(IFAIL_TESTS)   # Tests that are supposed to fail
IFAIL_TESTS =                  # intermittent failures
export XFAIL_TESTS
export IFAIL_TESTS
gtest_SOURCES =                # GTests
gtest_LDADD =                  # Libraries needed by GTests
cpplint_FILES =                # Files that should be passed to cpplint (and etags)
ir_DEF_FILES =                 # Files that generate the IR
extension_frontend_SOURCES =   # Files added to libfrontend by extensions
p4include_HEADERS =            # p4_16 include files
p4_14include_HEADERS =         # p4_14 include files
control_plane_proto_DIRS =     # Locations for .proto files; must be absolute paths
control_plane_proto_FILES =    # .proto files; must be inside one of the proto_DIRS
control_plane_SOURCES =        # Files added to libcontrolplane by extensions

################ Subproject Makefile inclusions

include $(srcdir)/lib/Makefile.am
include $(srcdir)/tools/ir-generator/Makefile.am
include $(srcdir)/tools/driver/Makefile.am
include $(srcdir)/ir/Makefile.am
include $(srcdir)/frontends/Makefile.am
include $(srcdir)/midend/Makefile.am
include $(srcdir)/control-plane/Makefile.am
include $(srcdir)/p4runtime-to-pd/Makefile.am

# The following files are generated by scripts.
include $(srcdir)/otherMakefiles.am

$(srcdir)/otherMakefiles.am: $(srcdir)/find-makefiles.sh $(wildcard $(srcdir)/backends/*/Makefile.am $(srcdir)/extensions/*/Makefile.am)
	cd $(srcdir); ./find-makefiles.sh

include $(srcdir)/unified-compilation.am

######## Generate C++ IR files from *.def files using ir-generator

# Add support for automake's verbosity options for the IR generator.
V_IRGEN = $(__v_IRGEN_$(V))
__v_IRGEN_ = $(__v_IRGEN_$(AM_DEFAULT_VERBOSITY))
__v_IRGEN_0 = @echo "  IRGEN   " $?;
__v_IRGEN_1 = 

# Helper that rewrites the empty `#` directives placed in $(2) by the IR
# generator to reference the correct line number in the file $(1). $(1) and $(2)
# may be distinct so that temporary files may be processed before being moved to
# their final place in the file system.
define fixup_ir_line_directives
	@awk '/^#$$/ { printf "#line %d \"%s\"\n", NR+1, "$(abspath $(1))"; next; } 1' \
	     $(2) > $(2).fixup
	@mv -f $(2).fixup $(2)
endef

# This rule actually runs the IR generator. To avoid unnecessary rebuilds, its
# output files are only overwritten if their contents actually changed.
.ir-generated-files.stamp: irgenerator $(ir_DEF_FILES)
	$(V_IRGEN) ./irgenerator -i .ir-generated.cpp.tmp \
				 -o .ir-generated.h.tmp \
	                         -t .gen-tree-macro.h.tmp \
				 $(ir_DEF_FILES) \
			|| (rm -f $@; false)
	$(call fixup_ir_line_directives,ir/ir-generated.cpp,.ir-generated.cpp.tmp)
	$(call fixup_ir_line_directives,ir/ir-generated.h,.ir-generated.h.tmp)
	$(call fixup_ir_line_directives,ir/gen-tree-macro.h,.gen-tree-macro.h.tmp)
	$(call update_if_changed,ir/ir-generated.cpp,.ir-generated.cpp.tmp)
	$(call update_if_changed,ir/ir-generated.h,.ir-generated.h.tmp)
	$(call update_if_changed,ir/gen-tree-macro.h,.gen-tree-macro.h.tmp)
	@touch $@

BUILT_SOURCES += \
	.ir-generated-files.stamp

######## P4 header files to install

# FIXME -- should these be in $(pkgdatadir) or $(prefix)?  setup.cpp
# FIXME -- and check-install-headers: below need to be consistent
p4includedir = $(pkgdatadir)/p4include
p4_14includedir = $(pkgdatadir)/p4_14include
p4include_HEADERS += $(wildcard $(srcdir)/p4include/*.p4)

#### For testing, install headers in the build directory

all-local: .installed-data.stamp

.installed-data.stamp: $(p4include_HEADERS) $(p4_14include_HEADERS) $(p4c_PYTHON) \
                       $(p4runtime_to_pd_PYTHON) $(nobase_p4runtime_to_pd_PYTHON) \
                       config.status
	@$(MAKE) install-data pkgdatadir=$(abs_builddir)
	@touch $@

################

# Front-end library
noinst_LTLIBRARIES += libfrontend.la
libfrontend_la_LIBADD = \
	libcontrolplane.la \
	libp4ctoolkit.la
libfrontend_la_SOURCES = \
	$(frontend_SOURCES) \
	$(midend_SOURCES) \
	$(ir_SOURCES) \
	ir/ir-generated.cpp \
	$(extension_frontend_SOURCES)

################ Testing

# Test-related make rules.
include $(srcdir)/test/Makefile.am

# GTest unit tests.
include $(srcdir)/test/gtest/Makefile.am

# Lint all header files.
cpplint_FILES += $(noinst_HEADERS)

################ Misc custom targets

clean-local:
	-rm -f $(BUILT_SOURCES) $(CLEANFILES)

cpplint:
	@cd $(srcdir); tools/cpplint.py --root=. --extensions=h,hpp,c,cpp,ypp,l $(sort $(cpplint_FILES))

cpplint-quiet:
	@cd $(srcdir); tools/cpplint.py --root=. --extensions=h,hpp,c,cpp,ypp,l --quiet $(sort $(cpplint_FILES))

tags:
	cd $(srcdir); ctags -R --langmap=C++:+.def,Flex:+.l,YACC:+.ypp \
	    backends extensions frontends ir lib tools midend
	cd $(srcdir)/tools/ir-generator; ctags -R --langmap=Flex:+.l,YACC:+.ypp \
	    . ../../lib
etags:
	cd $(srcdir); ctags -e -R --langmap=C++:+.def,Flex:+.l,YACC:+.ypp \
	    backends extensions frontends ir lib tools midend
	cd $(srcdir)/tools/ir-generator; ctags -e -R --langmap=Flex:+.l,YACC:+.ypp \
	    . ../../lib

# automake's default "make check" rule runs into "Argument list too long" errors on
# Linux when TESTS gets to big, because of the peculiar way in which it recursively
# invokes make with assignments on the command line.  These in turn end up in the
# MAKEFLAGS environment variable which causes the problem when invoking bash, as
# it exceeds Linux's 128K limit on a single environment variable.  So we override
# with a simpler recipe that doesn't do that.  This gives us warnings from make
# about multiple recipes for 'check-am', but the right one (this one) ends up being used
check-am: all-am cpplint-quiet $(check_LTLIBRARIES) $(check_PROGRAMS)
	@rm -f $(TEST_LOGS)
	@rm -f $(TEST_LOGS:.log=.trs)
	@rm -f $(TEST_SUITE_LOG)
	@$(MAKE) $(TEST_SUITE_LOG)

# XXX(seth): automake as of version 1.15 has a bug that makes "recheck" interact
# very badly with parallel make.
#
# Here's the background: there are two "top-level" targets in an automake-based
# makefile: "all", and "all-am". A very important difference between them is
# that "all" *spawns a second copy of make*, while "all-am" does not. This means
# that depending on "all" is dangerous: if a rule depends on "all", but
# also depends on other targets directly, the two copies of make can end up
# racing to build those targets, resulting in corrupted artifacts and build
# failures.
#
# So how does this tie into the "recheck" target? The rule that automake
# generates depends on "all", *not* on "all-am". This is unlike other
# automake-generated targets (e.g. "check" or "install"), which correctly depend
# on "all-am", so I'm not sure how things went wrong for "recheck". This bad
# rule was causing "recheck" builds to fail frequently if they were built in
# parallel.
#
# Unfortunately, there's no easy way to override "recheck" and just change which
# targets it depends on, so to resolve this I've been forced to copy the entire
# automake-generated rule. The only difference is that "all" has been replaced
# with "all-am".
recheck: all-am $(check_LTLIBRARIES) $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?

check-%: all-am $(check_LTLIBRARIES) $(check_PROGRAMS)
	@$(MAKE) check-TESTS TESTS="$(filter $*/%, $(TESTS) $(EXTRA_TESTS))"

recheck-%:
	@$(MAKE) recheck TESTS="$(filter $*/%, $(TESTS) $(EXTRA_TESTS))"

check-ifail: all-am $(check_LTLIBRARIES) $(check_PROGRAMS)
	@$(MAKE) check-TESTS TESTS="$(IFAIL_TESTS)"

gtest:
	@$(MAKE) gtestp4c

# DOXYGEN SUPPORT
@DX_RULES@

DOXYGEN_FILES = $(top_srcdir)/docs/doxygen/doxygen.cfg \
	        $(top_srcdir)/docs/doxygen/bfn_header.tex \
	        $(top_srcdir)/docs/doxygen/p4c_layout.xml \
	        $(top_srcdir)/docs/doxygen/*.md

# ensure the distribution of the doxygen configuration files
EXTRA_DIST += $(DOXYGEN_FILES)

.PHONY: docs
if DOXYGEN_ENABLED
# the default clean rule does not remove directories so
# we need to override it
mostlyclean-local:
	-$(RM) -r $(DX_CLEANFILES)

# easier to remember rule for making the documentation
# also depends on the ir-generated.h (part of BUILT_SOURCES)
# and force rebuilding documentation when sources change
docs: $(BUILT_SOURCES) $(DOXY_SOURCES)
	$(RM) $(DX_DOCDIR)/$(PACKAGE).tag
	@$(MAKE) doxygen-doc
else
docs:
	@echo "Please enable docs building (configure with --enable-doxygen-doc)"
endif

################ Flex and Bison

# Bison generates multiple files at the same time, and it doesn't provide much
# control over where those files are placed, so automake uses a special rule and
# a wrapper script called ylwrap to move them all into place together and to
# rewrite lines in the files that reference paths. Unfortunately, the rule
# automake generates misses the 'stack.hh' file that Bison generates in C++
# mode. This rule is identical to the original automake rule except that it
# also handles 'stack.hh'.
.ypp.cpp:
	$(AM_V_YACC)$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h `echo $@ | $(am__yacc_c2h)` y.output $*.output stack.hh $(dir $@)stack.hh -- $(YACCCOMPILE)

# The `-d` flag causes Bison to create header files for the parsers it generates.
AM_YFLAGS = -v -d

# This hack works around the fact that Flex, by default, adds a `.cc` extension
# to lexers it generates in C++ mode. That extension confuses the `ylwrap`
# script included with automake.
AM_LFLAGS = -o$(LEX_OUTPUT_ROOT).c
